/* Generated by Cython 0.29.32 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/home/flaviomartins/anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/core/include/numpy/arrayobject.h",
            "/home/flaviomartins/anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/core/include/numpy/arrayscalars.h",
            "/home/flaviomartins/anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/core/include/numpy/ndarrayobject.h",
            "/home/flaviomartins/anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/core/include/numpy/ndarraytypes.h",
            "/home/flaviomartins/anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/core/include/numpy/ufuncobject.h",
            "cpp/solver/foamSolverCore.H"
        ],
        "extra_compile_args": [
            "-m64",
            "-Dlinux64",
            "-DWM_ARCH_OPTION=64",
            "-DWM_DP",
            "-DWM_LABEL_SIZE=32",
            "-Wall",
            "-Wextra",
            "-Wno-old-style-cast",
            "-Wnon-virtual-dtor",
            "-Wno-unused-parameter",
            "-Wno-invalid-offsetof",
            "-O3",
            "-DNoRepository",
            "-ftemplate-depth-100",
            "-std=c++17",
            "-fPIC"
        ],
        "extra_link_args": [
            "-m64",
            "-Dlinux64",
            "-DWM_ARCH_OPTION=64",
            "-DWM_DP",
            "-DWM_LABEL_SIZE=32",
            "-Wall",
            "-Wextra",
            "-Wno-old-style-cast",
            "-Wnon-virtual-dtor",
            "-Wno-unused-parameter",
            "-Wno-invalid-offsetof",
            "-O3",
            "-DNoRepository",
            "-ftemplate-depth-100",
            "-fPIC",
            "-shared"
        ],
        "include_dirs": [
            "/usr/lib/openfoam/openfoam2406/src/finiteVolume/lnInclude",
            "/usr/lib/openfoam/openfoam2406/src/meshTools/lnInclude",
            "/usr/lib/openfoam/openfoam2406/src/sampling/lnInclude",
            "/usr/lib/openfoam/openfoam2406/src/TurbulenceModels/turbulenceModels/lnInclude",
            "/usr/lib/openfoam/openfoam2406/src/TurbulenceModels/incompressible/lnInclude",
            "/usr/lib/openfoam/openfoam2406/src/transportModels",
            "/usr/lib/openfoam/openfoam2406/src/transportModels/incompressible/singlePhaseTransportModel",
            "/usr/lib/openfoam/openfoam2406/src/dynamicMesh/lnInclude",
            "/usr/lib/openfoam/openfoam2406/src/dynamicFvMesh/lnInclude",
            "/usr/lib/openfoam/openfoam2406/src/regionFaModels/lnInclude",
            "/usr/lib/openfoam/openfoam2406/src/OpenFOAM/lnInclude",
            "/usr/lib/openfoam/openfoam2406/src/OSspecific/POSIX/lnInclude",
            "./cpp/solver",
            "./cpp/boundaryConditions/lnInclude",
            "./cpp/customLibraries/customFvModels/lnInclude",
            "./lnInclude",
            ".",
            "/home/flaviomartins/anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/core/include"
        ],
        "language": "c++",
        "libraries": [
            "finiteVolume",
            "fvOptions",
            "meshTools",
            "sampling",
            "turbulenceModels",
            "incompressibleTurbulenceModels",
            "incompressibleTransportModels",
            "dynamicMesh",
            "dynamicFvMesh",
            "topoChangerFvMesh",
            "atmosphericModels",
            "regionFaModels",
            "finiteArea",
            "dl",
            "m",
            "pimpleStepperFoamBC",
            "pimpleStepperFoamFvModels"
        ],
        "library_dirs": [
            "/usr/lib/openfoam/openfoam2406/platforms/linux64GccDPInt32Opt/lib",
            "/home/flaviomartins/OpenFOAM/flaviomartins-v2406/platforms/linux64GccDPInt32Opt/lib"
        ],
        "name": "openONDA.solvers.FVM.fvmModule",
        "sources": [
            "foamSolverWrapper.pyx",
            "./cpp/solver/foamSolverCore.C",
            "./cpp/solver/foamSolverBridge.C"
        ]
    },
    "module_name": "openONDA.solvers.FVM.fvmModule"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_32"
#define CYTHON_HEX_VERSION 0x001D20F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC (PYPY_VERSION_HEX >= 0x07030900)
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__openONDA__solvers__FVM__fvmModule
#define __PYX_HAVE_API__openONDA__solvers__FVM__fvmModule
/* Early includes */
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"

    /* NumPy API declarations from "numpy/__init__.pxd" */
    
#include <stdlib.h>
#include "foamSolverCore.H"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "foamSolverWrapper.pyx",
  "stringsource",
  "__init__.pxd",
  "type.pxd",
};
/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":689
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":690
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":691
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":692
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":696
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":697
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":698
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":699
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":703
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":704
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":713
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":714
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":715
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":717
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":718
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":719
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":721
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":722
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":724
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":725
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":726
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver;

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":728
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":729
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":730
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":732
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "foamSolverWrapper.pyx":40
 * # Python Wrapper Class
 * # ==================================================
 * cdef class pyFoamSolver:             # <<<<<<<<<<<<<<
 * 
 *       """
 */
struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver {
  PyObject_HEAD
  cppFoamSolver *cppFoamLib;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* BufferGetAndValidate.proto */
#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
    ((obj == Py_None || obj == NULL) ?\
    (__Pyx_ZeroBuffer(buf), 0) :\
    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static void __Pyx_ZeroBuffer(Py_buffer* buf);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

/* BufferFallbackError.proto */
static void __Pyx_RaiseBufferFallbackError(void);

/* BufferIndexError.proto */
static void __Pyx_RaiseBufferIndexError(int axis);

#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_AddObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_AddObjC(op1, op2, floatval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* py_abs.proto */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *num);
#define __Pyx_PyNumber_Absolute(x)\
    ((likely(PyLong_CheckExact(x))) ?\
         (likely(Py_SIZE(x) >= 0) ? (Py_INCREF(x), (x)) : __Pyx_PyLong_AbsNeg(x)) :\
         PyNumber_Absolute(x))
#else
#define __Pyx_PyNumber_Absolute(x)  PyNumber_Absolute(x)
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'cython' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_generic = 0;
static PyTypeObject *__pyx_ptype_5numpy_number = 0;
static PyTypeObject *__pyx_ptype_5numpy_integer = 0;
static PyTypeObject *__pyx_ptype_5numpy_signedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_unsignedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_inexact = 0;
static PyTypeObject *__pyx_ptype_5numpy_floating = 0;
static PyTypeObject *__pyx_ptype_5numpy_complexfloating = 0;
static PyTypeObject *__pyx_ptype_5numpy_flexible = 0;
static PyTypeObject *__pyx_ptype_5numpy_character = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'cpython.version' */

/* Module declarations from 'foamSolverWrapper' */

/* Module declarations from 'openONDA.solvers.FVM.fvmModule' */
static PyTypeObject *__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver = 0;
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t = { "float64_t", NULL, sizeof(__pyx_t_5numpy_float64_t), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t = { "int64_t", NULL, sizeof(__pyx_t_5numpy_int64_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int64_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int64_t), 0 };
#define __Pyx_MODULE_NAME "openONDA.solvers.FVM.fvmModule"
extern int __pyx_module_is_main_openONDA__solvers__FVM__fvmModule;
int __pyx_module_is_main_openONDA__solvers__FVM__fvmModule = 0;

/* Implementation of 'openONDA.solvers.FVM.fvmModule' */
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_i[] = "i";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_gx[] = "gx";
static const char __pyx_k_gy[] = "gy";
static const char __pyx_k_gz[] = "gz";
static const char __pyx_k_np[] = "_np";
static const char __pyx_k_nx[] = "nx";
static const char __pyx_k_ny[] = "ny";
static const char __pyx_k_nz[] = "nz";
static const char __pyx_k_os[] = "os";
static const char __pyx_k_sh[] = "_sh";
static const char __pyx_k_abs[] = "abs";
static const char __pyx_k_all[] = "__all__";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_dot[] = "dot";
static const char __pyx_k_ref[] = "ref";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_axis[] = "axis";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_dpdn[] = "dpdn";
static const char __pyx_k_dpdt[] = "dpdt";
static const char __pyx_k_dpdx[] = "dpdx";
static const char __pyx_k_dpdy[] = "dpdy";
static const char __pyx_k_dpdz[] = "dpdz";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_norm[] = "norm";
static const char __pyx_k_np_2[] = "np";
static const char __pyx_k_os_2[] = "_os";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_sqrt[] = "sqrt";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_ravel[] = "ravel";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_sys_2[] = "_sys";
static const char __pyx_k_utf_8[] = "utf-8";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_ctypes[] = "ctypes";
static const char __pyx_k_deltaT[] = "deltaT";
static const char __pyx_k_dpdn_x[] = "dpdn_x";
static const char __pyx_k_dpdn_y[] = "dpdn_y";
static const char __pyx_k_dpdn_z[] = "dpdn_z";
static const char __pyx_k_dpdt_x[] = "dpdt_x";
static const char __pyx_k_dpdt_y[] = "dpdt_y";
static const char __pyx_k_dpdt_z[] = "dpdt_z";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_evolve[] = "evolve";
static const char __pyx_k_hstack[] = "hstack";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_linalg[] = "linalg";
static const char __pyx_k_nCells[] = "nCells";
static const char __pyx_k_nNodes[] = "nNodes";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_shutil[] = "shutil";
static const char __pyx_k_cellXYZ[] = "cellXYZ";
static const char __pyx_k_faceXYZ[] = "faceXYZ";
static const char __pyx_k_float64[] = "float64";
static const char __pyx_k_reshape[] = "reshape";
static const char __pyx_k_tangent[] = "tangent";
static const char __pyx_k_centroid[] = "centroid";
static const char __pyx_k_faceArea[] = "faceArea";
static const char __pyx_k_faceFlux[] = "faceFlux";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_griddata[] = "griddata";
static const char __pyx_k_nodesXYZ[] = "nodesXYZ";
static const char __pyx_k_pressure[] = "pressure";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_timeStep[] = "timeStep";
static const char __pyx_k_velocity[] = "velocity";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_num_cells[] = "num_cells";
static const char __pyx_k_pBoundary[] = "pBoundary";
static const char __pyx_k_patchName[] = "patchName";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_totalFlux[] = "totalFlux";
static const char __pyx_k_vorticity[] = "vorticity";
static const char __pyx_k_cellVolume[] = "cellVolume";
static const char __pyx_k_faceDeltaP[] = "faceDeltaP";
static const char __pyx_k_faceNormal[] = "faceNormal";
static const char __pyx_k_global_ref[] = "global_ref";
static const char __pyx_k_griddata_2[] = "_griddata";
static const char __pyx_k_pressureBC[] = "pressureBC";
static const char __pyx_k_velocityBC[] = "velocityBC";
static const char __pyx_k_vxBoundary[] = "vxBoundary";
static const char __pyx_k_vyBoundary[] = "vyBoundary";
static const char __pyx_k_vzBoundary[] = "vzBoundary";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_cellCenters[] = "cellCenters";
static const char __pyx_k_cellVolumes[] = "cellVolumes";
static const char __pyx_k_circulation[] = "circulation";
static const char __pyx_k_evolve_mesh[] = "evolve_mesh";
static const char __pyx_k_faceTangent[] = "faceTangent";
static const char __pyx_k_totalDeltaP[] = "totalDeltaP";
static const char __pyx_k_connectivity[] = "connectivity";
static const char __pyx_k_dpdxBoundary[] = "dpdxBoundary";
static const char __pyx_k_dpdyBoundary[] = "dpdyBoundary";
static const char __pyx_k_dpdzBoundary[] = "dpdzBoundary";
static const char __pyx_k_pyFoamSolver[] = "pyFoamSolver";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_totalAbsFlux[] = "totalAbsFlux";
static const char __pyx_k_cellVolumeSum[] = "cellVolumeSum";
static const char __pyx_k_faceVelocityX[] = "faceVelocityX";
static const char __pyx_k_faceVelocityY[] = "faceVelocityY";
static const char __pyx_k_faceVelocityZ[] = "faceVelocityZ";
static const char __pyx_k_get_time_step[] = "get_time_step";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_set_time_step[] = "set_time_step";
static const char __pyx_k_faceVelocityX2[] = "faceVelocityX2";
static const char __pyx_k_faceVelocityY2[] = "faceVelocityY2";
static const char __pyx_k_faceVelocityZ2[] = "faceVelocityZ2";
static const char __pyx_k_nBoundaryFaces[] = "nBoundaryFaces";
static const char __pyx_k_nBoundaryNodes[] = "nBoundaryNodes";
static const char __pyx_k_totalAbsDeltaP[] = "totalAbsDeltaP";
static const char __pyx_k_alternative_ref[] = "alternative_ref";
static const char __pyx_k_bondFaceNormals[] = "bondFaceNormals";
static const char __pyx_k_bondNodeNormals[] = "bondNodeNormals";
static const char __pyx_k_cellCoordinates[] = "cellCoordinates";
static const char __pyx_k_nodeCoordinates[] = "nodeCoordinates";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_faceVelocityCorr[] = "faceVelocityCorr";
static const char __pyx_k_get_cell_volumes[] = "get_cell_volumes";
static const char __pyx_k_get_connectivity[] = "get_connectivity";
static const char __pyx_k_boundaryFaceAreas[] = "boundaryFaceAreas";
static const char __pyx_k_correct_mass_flux[] = "correct_mass_flux";
static const char __pyx_k_get_mesh_centroid[] = "get_mesh_centroid";
static const char __pyx_k_numericalBoundary[] = "numericalBoundary";
static const char __pyx_k_pimpleStepperFoam[] = "pimpleStepperFoam";
static const char __pyx_k_pressure_gradient[] = "pressure_gradient";
static const char __pyx_k_scipy_interpolate[] = "scipy.interpolate";
static const char __pyx_k_velocity_gradient[] = "velocity_gradient";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_get_pressure_field[] = "get_pressure_field";
static const char __pyx_k_get_run_time_value[] = "get_run_time_value";
static const char __pyx_k_get_velocity_field[] = "get_velocity_field";
static const char __pyx_k_num_boundary_faces[] = "num_boundary_faces";
static const char __pyx_k_pressureGradientBC[] = "pressureGradientBC";
static const char __pyx_k_get_number_of_cells[] = "get_number_of_cells";
static const char __pyx_k_get_number_of_nodes[] = "get_number_of_nodes";
static const char __pyx_k_get_vorticity_field[] = "get_vorticity_field";
static const char __pyx_k_pyFoamSolver_evolve[] = "pyFoamSolver.evolve";
static const char __pyx_k_bondNodesCoordinates[] = "bondNodesCoordinates";
static const char __pyx_k_evolve_only_solution[] = "evolve_only_solution";
static const char __pyx_k_get_node_coordinates[] = "get_node_coordinates";
static const char __pyx_k_foamSolverWrapper_pyx[] = "foamSolverWrapper.pyx";
static const char __pyx_k_get_total_circulation[] = "get_total_circulation";
static const char __pyx_k_get_velocity_gradient[] = "get_velocity_gradient";
static const char __pyx_k_get_boundary_face_areas[] = "get_boundary_face_areas";
static const char __pyx_k_correct_mass_flux_python[] = "correct_mass_flux_python";
static const char __pyx_k_facePressureGradientCorr[] = "facePressureGradientCorr";
static const char __pyx_k_get_boundary_node_normal[] = "get_boundary_node_normal";
static const char __pyx_k_pyFoamSolver_evolve_mesh[] = "pyFoamSolver.evolve_mesh";
static const char __pyx_k_bondCellCenterCoordinates[] = "bondCellCenterCoordinates";
static const char __pyx_k_bondFaceCenterCoordinates[] = "bondFaceCenterCoordinates";
static const char __pyx_k_get_boundary_face_normals[] = "get_boundary_face_normals";
static const char __pyx_k_pyFoamSolver_get_time_step[] = "pyFoamSolver.get_time_step";
static const char __pyx_k_pyFoamSolver_set_time_step[] = "pyFoamSolver.set_time_step";
static const char __pyx_k_get_cell_center_coordinates[] = "get_cell_center_coordinates";
static const char __pyx_k_get_pressure_boundary_field[] = "get_pressure_boundary_field";
static const char __pyx_k_get_pressure_gradient_field[] = "get_pressure_gradient_field";
static const char __pyx_k_get_velocity_boundary_field[] = "get_velocity_boundary_field";
static const char __pyx_k_get_number_of_boundary_faces[] = "get_number_of_boundary_faces";
static const char __pyx_k_get_number_of_boundary_nodes[] = "get_number_of_boundary_nodes";
static const char __pyx_k_get_vorticity_boundary_field[] = "get_vorticity_boundary_field";
static const char __pyx_k_pyFoamSolver___reduce_cython[] = "pyFoamSolver.__reduce_cython__";
static const char __pyx_k_get_boundary_node_coordinates[] = "get_boundary_node_coordinates";
static const char __pyx_k_pyFoamSolver_get_cell_volumes[] = "pyFoamSolver.get_cell_volumes";
static const char __pyx_k_pyFoamSolver_get_connectivity[] = "pyFoamSolver.get_connectivity";
static const char __pyx_k_openONDA_solvers_FVM_fvmModule[] = "openONDA.solvers.FVM.fvmModule";
static const char __pyx_k_pyFoamSolver___setstate_cython[] = "pyFoamSolver.__setstate_cython__";
static const char __pyx_k_pyFoamSolver_correct_mass_flux[] = "pyFoamSolver.correct_mass_flux";
static const char __pyx_k_pyFoamSolver_get_mesh_centroid[] = "pyFoamSolver.get_mesh_centroid";
static const char __pyx_k_fvmModule_Interface_for_OpenFOA[] = "\nfvmModule: Interface for OpenFOAM solvers in OpenONDA.\n\nThis module provides Python bindings for interacting with OpenFOAM solvers using the PIMPLE algorithm. It includes methods to access mesh properties, correct mass fluxes, and evolve the simulation.\n";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_pyFoamSolver_get_pressure_field[] = "pyFoamSolver.get_pressure_field";
static const char __pyx_k_pyFoamSolver_get_run_time_value[] = "pyFoamSolver.get_run_time_value";
static const char __pyx_k_pyFoamSolver_get_velocity_field[] = "pyFoamSolver.get_velocity_field";
static const char __pyx_k_set_dirichlet_pressure_boundary[] = "set_dirichlet_pressure_boundary_condition";
static const char __pyx_k_set_dirichlet_velocity_boundary[] = "set_dirichlet_velocity_boundary_condition";
static const char __pyx_k_File_foamSolverWrapper_pyx_start[] = "File: foamSolverWrapper.pyx (starting at line 1)";
static const char __pyx_k_correct_normal_pressure_gradient[] = "correct_normal_pressure_gradient";
static const char __pyx_k_get_boundary_cell_center_coordin[] = "get_boundary_cell_center_coordinates";
static const char __pyx_k_get_boundary_face_center_coordin[] = "get_boundary_face_center_coordinates";
static const char __pyx_k_get_finite_volume_mesh_circulati[] = "get_finite_volume_mesh_circulation";
static const char __pyx_k_get_pressure_gradient_boundary_f[] = "get_pressure_gradient_boundary_field";
static const char __pyx_k_get_velocity_gradient_boundary_f[] = "get_velocity_gradient_boundary_field";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_pyFoamSolver_correct_mass_flux_p[] = "pyFoamSolver.correct_mass_flux_python";
static const char __pyx_k_pyFoamSolver_correct_normal_pres[] = "pyFoamSolver.correct_normal_pressure_gradient";
static const char __pyx_k_pyFoamSolver_evolve_only_solutio[] = "pyFoamSolver.evolve_only_solution";
static const char __pyx_k_pyFoamSolver_get_boundary_cell_c[] = "pyFoamSolver.get_boundary_cell_center_coordinates";
static const char __pyx_k_pyFoamSolver_get_boundary_face_a[] = "pyFoamSolver.get_boundary_face_areas";
static const char __pyx_k_pyFoamSolver_get_boundary_face_c[] = "pyFoamSolver.get_boundary_face_center_coordinates";
static const char __pyx_k_pyFoamSolver_get_boundary_face_n[] = "pyFoamSolver.get_boundary_face_normals";
static const char __pyx_k_pyFoamSolver_get_boundary_node_c[] = "pyFoamSolver.get_boundary_node_coordinates";
static const char __pyx_k_pyFoamSolver_get_boundary_node_n[] = "pyFoamSolver.get_boundary_node_normal";
static const char __pyx_k_pyFoamSolver_get_cell_center_coo[] = "pyFoamSolver.get_cell_center_coordinates";
static const char __pyx_k_pyFoamSolver_get_node_coordinate[] = "pyFoamSolver.get_node_coordinates";
static const char __pyx_k_pyFoamSolver_get_number_of_bound[] = "pyFoamSolver.get_number_of_boundary_nodes";
static const char __pyx_k_pyFoamSolver_get_number_of_cells[] = "pyFoamSolver.get_number_of_cells";
static const char __pyx_k_pyFoamSolver_get_number_of_nodes[] = "pyFoamSolver.get_number_of_nodes";
static const char __pyx_k_pyFoamSolver_get_pressure_bounda[] = "pyFoamSolver.get_pressure_boundary_field";
static const char __pyx_k_pyFoamSolver_get_pressure_gradie[] = "pyFoamSolver.get_pressure_gradient_field";
static const char __pyx_k_pyFoamSolver_get_total_circulati[] = "pyFoamSolver.get_total_circulation";
static const char __pyx_k_pyFoamSolver_get_velocity_bounda[] = "pyFoamSolver.get_velocity_boundary_field";
static const char __pyx_k_pyFoamSolver_get_velocity_gradie[] = "pyFoamSolver.get_velocity_gradient";
static const char __pyx_k_pyFoamSolver_get_vorticity_bound[] = "pyFoamSolver.get_vorticity_boundary_field";
static const char __pyx_k_pyFoamSolver_get_vorticity_field[] = "pyFoamSolver.get_vorticity_field";
static const char __pyx_k_pyFoamSolver_set_dirichlet_press[] = "pyFoamSolver.set_dirichlet_pressure_boundary_condition";
static const char __pyx_k_pyFoamSolver_set_dirichlet_veloc[] = "pyFoamSolver.set_dirichlet_velocity_boundary_condition";
static const char __pyx_k_pyFoamSolver_set_neumann_pressur[] = "pyFoamSolver.set_neumann_pressure_boundary_condition";
static const char __pyx_k_set_neumann_pressure_boundary_co[] = "set_neumann_pressure_boundary_condition";
static const char __pyx_k_pyFoamSolver_get_number_of_bound_2[] = "pyFoamSolver.get_number_of_boundary_faces";
static const char __pyx_k_pyFoamSolver_get_pressure_gradie_2[] = "pyFoamSolver.get_pressure_gradient_boundary_field";
static const char __pyx_k_pyFoamSolver_get_velocity_gradie_2[] = "pyFoamSolver.get_velocity_gradient_boundary_field";
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_abs;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_alternative_ref;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_axis;
static PyObject *__pyx_n_s_bondCellCenterCoordinates;
static PyObject *__pyx_n_s_bondFaceCenterCoordinates;
static PyObject *__pyx_n_s_bondFaceNormals;
static PyObject *__pyx_n_s_bondNodeNormals;
static PyObject *__pyx_n_s_bondNodesCoordinates;
static PyObject *__pyx_n_s_boundaryFaceAreas;
static PyObject *__pyx_n_s_cellCenters;
static PyObject *__pyx_n_s_cellCoordinates;
static PyObject *__pyx_n_s_cellVolume;
static PyObject *__pyx_n_s_cellVolumeSum;
static PyObject *__pyx_n_s_cellVolumes;
static PyObject *__pyx_n_s_cellXYZ;
static PyObject *__pyx_n_s_centroid;
static PyObject *__pyx_n_s_circulation;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_connectivity;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_correct_mass_flux;
static PyObject *__pyx_n_s_correct_mass_flux_python;
static PyObject *__pyx_n_s_correct_normal_pressure_gradient;
static PyObject *__pyx_n_s_ctypes;
static PyObject *__pyx_n_s_deltaT;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_dot;
static PyObject *__pyx_n_s_dpdn;
static PyObject *__pyx_n_s_dpdn_x;
static PyObject *__pyx_n_s_dpdn_y;
static PyObject *__pyx_n_s_dpdn_z;
static PyObject *__pyx_n_s_dpdt;
static PyObject *__pyx_n_s_dpdt_x;
static PyObject *__pyx_n_s_dpdt_y;
static PyObject *__pyx_n_s_dpdt_z;
static PyObject *__pyx_n_s_dpdx;
static PyObject *__pyx_n_s_dpdxBoundary;
static PyObject *__pyx_n_s_dpdy;
static PyObject *__pyx_n_s_dpdyBoundary;
static PyObject *__pyx_n_s_dpdz;
static PyObject *__pyx_n_s_dpdzBoundary;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_evolve;
static PyObject *__pyx_n_s_evolve_mesh;
static PyObject *__pyx_n_s_evolve_only_solution;
static PyObject *__pyx_n_s_faceArea;
static PyObject *__pyx_n_s_faceDeltaP;
static PyObject *__pyx_n_s_faceFlux;
static PyObject *__pyx_n_s_faceNormal;
static PyObject *__pyx_n_s_facePressureGradientCorr;
static PyObject *__pyx_n_s_faceTangent;
static PyObject *__pyx_n_s_faceVelocityCorr;
static PyObject *__pyx_n_s_faceVelocityX;
static PyObject *__pyx_n_s_faceVelocityX2;
static PyObject *__pyx_n_s_faceVelocityY;
static PyObject *__pyx_n_s_faceVelocityY2;
static PyObject *__pyx_n_s_faceVelocityZ;
static PyObject *__pyx_n_s_faceVelocityZ2;
static PyObject *__pyx_n_s_faceXYZ;
static PyObject *__pyx_n_s_float64;
static PyObject *__pyx_kp_s_foamSolverWrapper_pyx;
static PyObject *__pyx_kp_u_fvmModule_Interface_for_OpenFOA;
static PyObject *__pyx_n_s_get_boundary_cell_center_coordin;
static PyObject *__pyx_n_s_get_boundary_face_areas;
static PyObject *__pyx_n_s_get_boundary_face_center_coordin;
static PyObject *__pyx_n_s_get_boundary_face_normals;
static PyObject *__pyx_n_s_get_boundary_node_coordinates;
static PyObject *__pyx_n_s_get_boundary_node_normal;
static PyObject *__pyx_n_s_get_cell_center_coordinates;
static PyObject *__pyx_n_s_get_cell_volumes;
static PyObject *__pyx_n_s_get_connectivity;
static PyObject *__pyx_n_s_get_finite_volume_mesh_circulati;
static PyObject *__pyx_n_s_get_mesh_centroid;
static PyObject *__pyx_n_s_get_node_coordinates;
static PyObject *__pyx_n_s_get_number_of_boundary_faces;
static PyObject *__pyx_n_s_get_number_of_boundary_nodes;
static PyObject *__pyx_n_s_get_number_of_cells;
static PyObject *__pyx_n_s_get_number_of_nodes;
static PyObject *__pyx_n_s_get_pressure_boundary_field;
static PyObject *__pyx_n_s_get_pressure_field;
static PyObject *__pyx_n_s_get_pressure_gradient_boundary_f;
static PyObject *__pyx_n_s_get_pressure_gradient_field;
static PyObject *__pyx_n_s_get_run_time_value;
static PyObject *__pyx_n_s_get_time_step;
static PyObject *__pyx_n_s_get_total_circulation;
static PyObject *__pyx_n_s_get_velocity_boundary_field;
static PyObject *__pyx_n_s_get_velocity_field;
static PyObject *__pyx_n_s_get_velocity_gradient;
static PyObject *__pyx_n_s_get_velocity_gradient_boundary_f;
static PyObject *__pyx_n_s_get_vorticity_boundary_field;
static PyObject *__pyx_n_s_get_vorticity_field;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_global_ref;
static PyObject *__pyx_n_s_griddata;
static PyObject *__pyx_n_s_griddata_2;
static PyObject *__pyx_n_s_gx;
static PyObject *__pyx_n_s_gy;
static PyObject *__pyx_n_s_gz;
static PyObject *__pyx_n_s_hstack;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_linalg;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_nBoundaryFaces;
static PyObject *__pyx_n_s_nBoundaryNodes;
static PyObject *__pyx_n_s_nCells;
static PyObject *__pyx_n_s_nNodes;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_nodeCoordinates;
static PyObject *__pyx_n_s_nodesXYZ;
static PyObject *__pyx_n_s_norm;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_np_2;
static PyObject *__pyx_n_s_num_boundary_faces;
static PyObject *__pyx_n_s_num_cells;
static PyObject *__pyx_n_u_numericalBoundary;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_nx;
static PyObject *__pyx_n_s_ny;
static PyObject *__pyx_n_s_nz;
static PyObject *__pyx_n_s_openONDA_solvers_FVM_fvmModule;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_os_2;
static PyObject *__pyx_n_s_pBoundary;
static PyObject *__pyx_n_s_patchName;
static PyObject *__pyx_n_u_pimpleStepperFoam;
static PyObject *__pyx_n_s_pressure;
static PyObject *__pyx_n_s_pressureBC;
static PyObject *__pyx_n_s_pressureGradientBC;
static PyObject *__pyx_n_s_pressure_gradient;
static PyObject *__pyx_n_s_pyFoamSolver;
static PyObject *__pyx_n_u_pyFoamSolver;
static PyObject *__pyx_n_s_pyFoamSolver___reduce_cython;
static PyObject *__pyx_n_s_pyFoamSolver___setstate_cython;
static PyObject *__pyx_n_s_pyFoamSolver_correct_mass_flux;
static PyObject *__pyx_n_s_pyFoamSolver_correct_mass_flux_p;
static PyObject *__pyx_n_s_pyFoamSolver_correct_normal_pres;
static PyObject *__pyx_n_s_pyFoamSolver_evolve;
static PyObject *__pyx_n_s_pyFoamSolver_evolve_mesh;
static PyObject *__pyx_n_s_pyFoamSolver_evolve_only_solutio;
static PyObject *__pyx_n_s_pyFoamSolver_get_boundary_cell_c;
static PyObject *__pyx_n_s_pyFoamSolver_get_boundary_face_a;
static PyObject *__pyx_n_s_pyFoamSolver_get_boundary_face_c;
static PyObject *__pyx_n_s_pyFoamSolver_get_boundary_face_n;
static PyObject *__pyx_n_s_pyFoamSolver_get_boundary_node_c;
static PyObject *__pyx_n_s_pyFoamSolver_get_boundary_node_n;
static PyObject *__pyx_n_s_pyFoamSolver_get_cell_center_coo;
static PyObject *__pyx_n_s_pyFoamSolver_get_cell_volumes;
static PyObject *__pyx_n_s_pyFoamSolver_get_connectivity;
static PyObject *__pyx_n_s_pyFoamSolver_get_mesh_centroid;
static PyObject *__pyx_n_s_pyFoamSolver_get_node_coordinate;
static PyObject *__pyx_n_s_pyFoamSolver_get_number_of_bound;
static PyObject *__pyx_n_s_pyFoamSolver_get_number_of_bound_2;
static PyObject *__pyx_n_s_pyFoamSolver_get_number_of_cells;
static PyObject *__pyx_n_s_pyFoamSolver_get_number_of_nodes;
static PyObject *__pyx_n_s_pyFoamSolver_get_pressure_bounda;
static PyObject *__pyx_n_s_pyFoamSolver_get_pressure_field;
static PyObject *__pyx_n_s_pyFoamSolver_get_pressure_gradie;
static PyObject *__pyx_n_s_pyFoamSolver_get_pressure_gradie_2;
static PyObject *__pyx_n_s_pyFoamSolver_get_run_time_value;
static PyObject *__pyx_n_s_pyFoamSolver_get_time_step;
static PyObject *__pyx_n_s_pyFoamSolver_get_total_circulati;
static PyObject *__pyx_n_s_pyFoamSolver_get_velocity_bounda;
static PyObject *__pyx_n_s_pyFoamSolver_get_velocity_field;
static PyObject *__pyx_n_s_pyFoamSolver_get_velocity_gradie;
static PyObject *__pyx_n_s_pyFoamSolver_get_velocity_gradie_2;
static PyObject *__pyx_n_s_pyFoamSolver_get_vorticity_bound;
static PyObject *__pyx_n_s_pyFoamSolver_get_vorticity_field;
static PyObject *__pyx_n_s_pyFoamSolver_set_dirichlet_press;
static PyObject *__pyx_n_s_pyFoamSolver_set_dirichlet_veloc;
static PyObject *__pyx_n_s_pyFoamSolver_set_neumann_pressur;
static PyObject *__pyx_n_s_pyFoamSolver_set_time_step;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_ravel;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_ref;
static PyObject *__pyx_n_s_reshape;
static PyObject *__pyx_n_s_scipy_interpolate;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_set_dirichlet_pressure_boundary;
static PyObject *__pyx_n_s_set_dirichlet_velocity_boundary;
static PyObject *__pyx_n_s_set_neumann_pressure_boundary_co;
static PyObject *__pyx_n_s_set_time_step;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_sh;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_shutil;
static PyObject *__pyx_n_s_sqrt;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_sys_2;
static PyObject *__pyx_n_s_tangent;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_timeStep;
static PyObject *__pyx_n_s_totalAbsDeltaP;
static PyObject *__pyx_n_s_totalAbsFlux;
static PyObject *__pyx_n_s_totalDeltaP;
static PyObject *__pyx_n_s_totalFlux;
static PyObject *__pyx_kp_u_utf_8;
static PyObject *__pyx_n_s_velocity;
static PyObject *__pyx_n_s_velocityBC;
static PyObject *__pyx_n_s_velocity_gradient;
static PyObject *__pyx_n_s_vorticity;
static PyObject *__pyx_n_s_vxBoundary;
static PyObject *__pyx_n_s_vyBoundary;
static PyObject *__pyx_n_s_vzBoundary;
static PyObject *__pyx_n_s_zeros;
static int __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver___cinit__(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static void __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_2__dealloc__(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_4evolve(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_6evolve_mesh(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_8evolve_only_solution(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_10correct_mass_flux(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_12get_run_time_value(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_14get_time_step(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_16get_number_of_nodes(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_18get_number_of_cells(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_20get_number_of_boundary_nodes(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_22get_number_of_boundary_faces(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_24get_node_coordinates(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_26get_connectivity(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_28get_cell_volumes(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_30get_cell_center_coordinates(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_32get_boundary_node_coordinates(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_34get_boundary_node_normal(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_36get_boundary_face_center_coordinates(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_38get_boundary_face_areas(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_40get_boundary_face_normals(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_42get_boundary_cell_center_coordinates(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_44get_velocity_field(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_46get_velocity_boundary_field(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_48get_pressure_field(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_50get_velocity_gradient(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_52get_velocity_gradient_boundary_field(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_54get_pressure_gradient_field(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_56get_pressure_boundary_field(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_58get_pressure_gradient_boundary_field(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_60get_vorticity_field(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_62get_vorticity_boundary_field(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_64set_time_step(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_deltaT); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_66set_dirichlet_velocity_boundary_condition(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_vxBoundary, PyObject *__pyx_v_vyBoundary, PyObject *__pyx_v_vzBoundary, PyObject *__pyx_v_patchName); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_68set_dirichlet_pressure_boundary_condition(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_pBoundary, PyObject *__pyx_v_patchName); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_70set_neumann_pressure_boundary_condition(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_dpdxBoundary, PyObject *__pyx_v_dpdyBoundary, PyObject *__pyx_v_dpdzBoundary, PyObject *__pyx_v_patchName); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_72correct_mass_flux_python(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_faceVelocityX, PyObject *__pyx_v_faceVelocityY, PyObject *__pyx_v_faceVelocityZ, PyObject *__pyx_v_patchName); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_74correct_normal_pressure_gradient(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_dpdx, PyObject *__pyx_v_dpdy, PyObject *__pyx_v_dpdz, PyObject *__pyx_v_patchName); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_76get_total_circulation(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_78get_mesh_centroid(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_80__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_82__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_float_0_99;
static PyObject *__pyx_float_1_0eneg_15;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_9;
static PyObject *__pyx_k_;
static PyObject *__pyx_slice__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_codeobj__12;
static PyObject *__pyx_codeobj__14;
static PyObject *__pyx_codeobj__16;
static PyObject *__pyx_codeobj__18;
static PyObject *__pyx_codeobj__20;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__24;
static PyObject *__pyx_codeobj__26;
static PyObject *__pyx_codeobj__28;
static PyObject *__pyx_codeobj__30;
static PyObject *__pyx_codeobj__32;
static PyObject *__pyx_codeobj__34;
static PyObject *__pyx_codeobj__36;
static PyObject *__pyx_codeobj__38;
static PyObject *__pyx_codeobj__40;
static PyObject *__pyx_codeobj__42;
static PyObject *__pyx_codeobj__44;
static PyObject *__pyx_codeobj__46;
static PyObject *__pyx_codeobj__48;
static PyObject *__pyx_codeobj__50;
static PyObject *__pyx_codeobj__52;
static PyObject *__pyx_codeobj__54;
static PyObject *__pyx_codeobj__56;
static PyObject *__pyx_codeobj__58;
static PyObject *__pyx_codeobj__60;
static PyObject *__pyx_codeobj__62;
static PyObject *__pyx_codeobj__64;
static PyObject *__pyx_codeobj__66;
static PyObject *__pyx_codeobj__68;
static PyObject *__pyx_codeobj__70;
static PyObject *__pyx_codeobj__72;
static PyObject *__pyx_codeobj__74;
static PyObject *__pyx_codeobj__76;
static PyObject *__pyx_codeobj__78;
static PyObject *__pyx_codeobj__80;
static PyObject *__pyx_codeobj__82;
static PyObject *__pyx_codeobj__84;
static PyObject *__pyx_codeobj__86;
static PyObject *__pyx_codeobj__88;
static PyObject *__pyx_codeobj__90;
/* Late includes */

/* "foamSolverWrapper.pyx":55
 *       # ==================================================
 * 
 *       def __cinit__(self, args=["pimpleStepperFoam"]):             # <<<<<<<<<<<<<<
 *             """
 *             Initializes the pyFoamSolver object by allocating and initializing
 */

/* Python wrapper */
static int __pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_args,0};
    PyObject* values[1] = {0};
    values[0] = __pyx_k_;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_args);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 55, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_args = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 55, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver___cinit__(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver___cinit__(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_args) {
  PyObject *__pyx_v_numArgs = NULL;
  char **__pyx_v_string_buf;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_7genexpr__pyx_v_x = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  size_t __pyx_t_8;
  int __pyx_t_9;
  char *__pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_args);

  /* "foamSolverWrapper.pyx":69
 *             None
 *             """
 *             numArgs = len(args)             # <<<<<<<<<<<<<<
 *             args = [x.encode('utf-8') for x in args]
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 69, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_numArgs = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "foamSolverWrapper.pyx":70
 *             """
 *             numArgs = len(args)
 *             args = [x.encode('utf-8') for x in args]             # <<<<<<<<<<<<<<
 * 
 *             cdef char **string_buf = <char**>malloc(numArgs * sizeof(char*))
 */
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 70, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_v_args)) || PyTuple_CheckExact(__pyx_v_args)) {
      __pyx_t_3 = __pyx_v_args; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_args); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 70, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 70, __pyx_L5_error)
    }
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 70, __pyx_L5_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 70, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 70, __pyx_L5_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 70, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_4(__pyx_t_3);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 70, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_x, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_7genexpr__pyx_v_x, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 70, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_kp_u_utf_8) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_u_utf_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 70, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 70, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_x); __pyx_7genexpr__pyx_v_x = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_x); __pyx_7genexpr__pyx_v_x = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __Pyx_DECREF_SET(__pyx_v_args, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "foamSolverWrapper.pyx":72
 *             args = [x.encode('utf-8') for x in args]
 * 
 *             cdef char **string_buf = <char**>malloc(numArgs * sizeof(char*))             # <<<<<<<<<<<<<<
 *             if string_buf is NULL:
 *                   raise MemoryError()
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(char *))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_numArgs, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_string_buf = ((char **)malloc(__pyx_t_8));

  /* "foamSolverWrapper.pyx":73
 * 
 *             cdef char **string_buf = <char**>malloc(numArgs * sizeof(char*))
 *             if string_buf is NULL:             # <<<<<<<<<<<<<<
 *                   raise MemoryError()
 * 
 */
  __pyx_t_9 = ((__pyx_v_string_buf == NULL) != 0);
  if (unlikely(__pyx_t_9)) {

    /* "foamSolverWrapper.pyx":74
 *             cdef char **string_buf = <char**>malloc(numArgs * sizeof(char*))
 *             if string_buf is NULL:
 *                   raise MemoryError()             # <<<<<<<<<<<<<<
 * 
 *             for i in range(numArgs):
 */
    PyErr_NoMemory(); __PYX_ERR(0, 74, __pyx_L1_error)

    /* "foamSolverWrapper.pyx":73
 * 
 *             cdef char **string_buf = <char**>malloc(numArgs * sizeof(char*))
 *             if string_buf is NULL:             # <<<<<<<<<<<<<<
 *                   raise MemoryError()
 * 
 */
  }

  /* "foamSolverWrapper.pyx":76
 *                   raise MemoryError()
 * 
 *             for i in range(numArgs):             # <<<<<<<<<<<<<<
 *                   string_buf[i] = args[i]
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_numArgs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 76, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 76, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 76, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 76, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 76, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 76, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "foamSolverWrapper.pyx":77
 * 
 *             for i in range(numArgs):
 *                   string_buf[i] = args[i]             # <<<<<<<<<<<<<<
 * 
 *             self.cppFoamLib = new cppFoamSolver(numArgs, string_buf)
 */
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_args, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyObject_AsWritableString(__pyx_t_3); if (unlikely((!__pyx_t_10) && PyErr_Occurred())) __PYX_ERR(0, 77, __pyx_L1_error)
    __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 77, __pyx_L1_error)
    (__pyx_v_string_buf[__pyx_t_11]) = __pyx_t_10;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "foamSolverWrapper.pyx":76
 *                   raise MemoryError()
 * 
 *             for i in range(numArgs):             # <<<<<<<<<<<<<<
 *                   string_buf[i] = args[i]
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "foamSolverWrapper.pyx":79
 *                   string_buf[i] = args[i]
 * 
 *             self.cppFoamLib = new cppFoamSolver(numArgs, string_buf)             # <<<<<<<<<<<<<<
 *             free(string_buf)
 * 
 */
  __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_numArgs); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 79, __pyx_L1_error)
  __pyx_v_self->cppFoamLib = new cppFoamSolver(__pyx_t_12, __pyx_v_string_buf);

  /* "foamSolverWrapper.pyx":80
 * 
 *             self.cppFoamLib = new cppFoamSolver(numArgs, string_buf)
 *             free(string_buf)             # <<<<<<<<<<<<<<
 * 
 *       def __dealloc__(self):
 */
  free(__pyx_v_string_buf);

  /* "foamSolverWrapper.pyx":55
 *       # ==================================================
 * 
 *       def __cinit__(self, args=["pimpleStepperFoam"]):             # <<<<<<<<<<<<<<
 *             """
 *             Initializes the pyFoamSolver object by allocating and initializing
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_numArgs);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":82
 *             free(string_buf)
 * 
 *       def __dealloc__(self):             # <<<<<<<<<<<<<<
 *             """
 *             Deallocates the C++ object when the Python object is garbage-collected.
 */

/* Python wrapper */
static void __pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_2__dealloc__(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_2__dealloc__(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "foamSolverWrapper.pyx":90
 *             None
 *             """
 *             del self.cppFoamLib             # <<<<<<<<<<<<<<
 * 
 * 
 */
  delete __pyx_v_self->cppFoamLib;

  /* "foamSolverWrapper.pyx":82
 *             free(string_buf)
 * 
 *       def __dealloc__(self):             # <<<<<<<<<<<<<<
 *             """
 *             Deallocates the C++ object when the Python object is garbage-collected.
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "foamSolverWrapper.pyx":96
 *       # Simulation methods:
 *       # ================================================== #
 *       def evolve(self):             # <<<<<<<<<<<<<<
 *             """
 *             Advances the OpenFOAM simulation by one time step, updating the state,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_5evolve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_4evolve[] = "pyFoamSolver.evolve(self)\nFile: foamSolverWrapper.pyx (starting at line 96)\n\n            Advances the OpenFOAM simulation by one time step, updating the state,\n            fields, and mesh accordingly.\n\n            Returns\n            -------\n            None\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_5evolve = {"evolve", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_5evolve, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_4evolve};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_5evolve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evolve (wrapper)", 0);
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_4evolve(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_4evolve(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evolve", 0);

  /* "foamSolverWrapper.pyx":105
 *             None
 *             """
 *             self.cppFoamLib.evolve()             # <<<<<<<<<<<<<<
 * 
 *       def evolve_mesh(self):
 */
  __pyx_v_self->cppFoamLib->evolve();

  /* "foamSolverWrapper.pyx":96
 *       # Simulation methods:
 *       # ================================================== #
 *       def evolve(self):             # <<<<<<<<<<<<<<
 *             """
 *             Advances the OpenFOAM simulation by one time step, updating the state,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":107
 *             self.cppFoamLib.evolve()
 * 
 *       def evolve_mesh(self):             # <<<<<<<<<<<<<<
 *             """
 *             Updates the mesh of the OpenFOAM simulation from time step t to t+1.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_7evolve_mesh(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_6evolve_mesh[] = "pyFoamSolver.evolve_mesh(self)\nFile: foamSolverWrapper.pyx (starting at line 107)\n\n            Updates the mesh of the OpenFOAM simulation from time step t to t+1.\n\n            Note\n            ----\n            This function requires a moving mesh problem to be set up in OpenFOAM.\n\n            Returns\n            -------\n            None\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_7evolve_mesh = {"evolve_mesh", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_7evolve_mesh, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_6evolve_mesh};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_7evolve_mesh(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evolve_mesh (wrapper)", 0);
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_6evolve_mesh(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_6evolve_mesh(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evolve_mesh", 0);

  /* "foamSolverWrapper.pyx":119
 *             None
 *             """
 *             self.cppFoamLib.evolve_mesh()             # <<<<<<<<<<<<<<
 * 
 *       def evolve_only_solution(self):
 */
  __pyx_v_self->cppFoamLib->evolve_mesh();

  /* "foamSolverWrapper.pyx":107
 *             self.cppFoamLib.evolve()
 * 
 *       def evolve_mesh(self):             # <<<<<<<<<<<<<<
 *             """
 *             Updates the mesh of the OpenFOAM simulation from time step t to t+1.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":121
 *             self.cppFoamLib.evolve_mesh()
 * 
 *       def evolve_only_solution(self):             # <<<<<<<<<<<<<<
 *             """
 *             Advances the solution of the OpenFOAM simulation without updating the mesh.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_9evolve_only_solution(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_8evolve_only_solution[] = "pyFoamSolver.evolve_only_solution(self)\nFile: foamSolverWrapper.pyx (starting at line 121)\n\n            Advances the solution of the OpenFOAM simulation without updating the mesh.\n\n            Note\n            ----\n            This function is used when the mesh remains stationary.\n\n            Returns\n            -------\n            None\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_9evolve_only_solution = {"evolve_only_solution", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_9evolve_only_solution, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_8evolve_only_solution};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_9evolve_only_solution(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evolve_only_solution (wrapper)", 0);
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_8evolve_only_solution(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_8evolve_only_solution(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evolve_only_solution", 0);

  /* "foamSolverWrapper.pyx":133
 *             None
 *             """
 *             self.cppFoamLib.evolve_only_solution()             # <<<<<<<<<<<<<<
 * 
 *       def correct_mass_flux(self, patchName="numericalBoundary"):
 */
  __pyx_v_self->cppFoamLib->evolve_only_solution();

  /* "foamSolverWrapper.pyx":121
 *             self.cppFoamLib.evolve_mesh()
 * 
 *       def evolve_only_solution(self):             # <<<<<<<<<<<<<<
 *             """
 *             Advances the solution of the OpenFOAM simulation without updating the mesh.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":135
 *             self.cppFoamLib.evolve_only_solution()
 * 
 *       def correct_mass_flux(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Corrects the mass flux across the specified boundary patch.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_11correct_mass_flux(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_10correct_mass_flux[] = "pyFoamSolver.correct_mass_flux(self, patchName=u'numericalBoundary')\nFile: foamSolverWrapper.pyx (starting at line 135)\n\n            Corrects the mass flux across the specified boundary patch.\n\n            Parameters\n            ----------\n            patchName : str, optional\n                  Name of the OpenFOAM boundary patch. Default is \"numericalBoundary\".\n\n            Returns\n            -------\n            None\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_11correct_mass_flux = {"correct_mass_flux", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_11correct_mass_flux, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_10correct_mass_flux};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_11correct_mass_flux(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_patchName = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("correct_mass_flux (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_patchName,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_u_numericalBoundary);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_patchName);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "correct_mass_flux") < 0)) __PYX_ERR(0, 135, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_patchName = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("correct_mass_flux", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 135, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.correct_mass_flux", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_10correct_mass_flux(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self), __pyx_v_patchName);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_10correct_mass_flux(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("correct_mass_flux", 0);
  __Pyx_INCREF(__pyx_v_patchName);

  /* "foamSolverWrapper.pyx":148
 *             None
 *             """
 *             patchName = patchName.encode()             # <<<<<<<<<<<<<<
 *             self.cppFoamLib.correct_mass_flux(patchName)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_patchName, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_patchName, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":149
 *             """
 *             patchName = patchName.encode()
 *             self.cppFoamLib.correct_mass_flux(patchName)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_patchName); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 149, __pyx_L1_error)
  __pyx_v_self->cppFoamLib->correct_mass_flux(__pyx_t_4);

  /* "foamSolverWrapper.pyx":135
 *             self.cppFoamLib.evolve_only_solution()
 * 
 *       def correct_mass_flux(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Corrects the mass flux across the specified boundary patch.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.correct_mass_flux", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_patchName);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":155
 *       # Simulation Methods
 *       # ==================================================
 *       def get_run_time_value(self):             # <<<<<<<<<<<<<<
 *             """
 *             Get the current flow time in seconds.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_13get_run_time_value(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_12get_run_time_value[] = "pyFoamSolver.get_run_time_value(self)\nFile: foamSolverWrapper.pyx (starting at line 155)\n\n            Get the current flow time in seconds.\n\n            Returns\n            -------\n            float\n                  The current flow time in seconds.\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_13get_run_time_value = {"get_run_time_value", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_13get_run_time_value, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_12get_run_time_value};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_13get_run_time_value(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_run_time_value (wrapper)", 0);
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_12get_run_time_value(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_12get_run_time_value(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_run_time_value", 0);

  /* "foamSolverWrapper.pyx":164
 *                   The current flow time in seconds.
 *             """
 *             return self.cppFoamLib.get_run_time_value()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->cppFoamLib->get_run_time_value()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":155
 *       # Simulation Methods
 *       # ==================================================
 *       def get_run_time_value(self):             # <<<<<<<<<<<<<<
 *             """
 *             Get the current flow time in seconds.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_run_time_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":167
 * 
 * 
 *       def get_time_step(self):             # <<<<<<<<<<<<<<
 *             """
 *             Get the size of the current time step in seconds.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_15get_time_step(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_14get_time_step[] = "pyFoamSolver.get_time_step(self)\nFile: foamSolverWrapper.pyx (starting at line 167)\n\n            Get the size of the current time step in seconds.\n\n            Returns\n            -------\n            float\n                  The size of the current time step in seconds.\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_15get_time_step = {"get_time_step", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_15get_time_step, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_14get_time_step};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_15get_time_step(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_time_step (wrapper)", 0);
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_14get_time_step(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_14get_time_step(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_time_step", 0);

  /* "foamSolverWrapper.pyx":176
 *                   The size of the current time step in seconds.
 *             """
 *             return self.cppFoamLib.get_time_step()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->cppFoamLib->get_time_step()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":167
 * 
 * 
 *       def get_time_step(self):             # <<<<<<<<<<<<<<
 *             """
 *             Get the size of the current time step in seconds.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_time_step", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":179
 * 
 * 
 *       def get_number_of_nodes(self):             # <<<<<<<<<<<<<<
 *             """
 *             Get the number of nodes in the simulation.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_17get_number_of_nodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_16get_number_of_nodes[] = "pyFoamSolver.get_number_of_nodes(self)\nFile: foamSolverWrapper.pyx (starting at line 179)\n\n            Get the number of nodes in the simulation.\n\n            Returns\n            -------\n            int\n                  The number of nodes in the simulation.\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_17get_number_of_nodes = {"get_number_of_nodes", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_17get_number_of_nodes, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_16get_number_of_nodes};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_17get_number_of_nodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_number_of_nodes (wrapper)", 0);
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_16get_number_of_nodes(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_16get_number_of_nodes(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_number_of_nodes", 0);

  /* "foamSolverWrapper.pyx":188
 *                   The number of nodes in the simulation.
 *             """
 *             return self.cppFoamLib.get_number_of_nodes()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->cppFoamLib->get_number_of_nodes()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":179
 * 
 * 
 *       def get_number_of_nodes(self):             # <<<<<<<<<<<<<<
 *             """
 *             Get the number of nodes in the simulation.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_number_of_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":191
 * 
 * 
 *       def get_number_of_cells(self):             # <<<<<<<<<<<<<<
 *             """
 *             Get the total number of cells in the simulation.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_19get_number_of_cells(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_18get_number_of_cells[] = "pyFoamSolver.get_number_of_cells(self)\nFile: foamSolverWrapper.pyx (starting at line 191)\n\n            Get the total number of cells in the simulation.\n\n            Returns\n            -------\n            int\n                  The total number of cells in the simulation.\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_19get_number_of_cells = {"get_number_of_cells", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_19get_number_of_cells, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_18get_number_of_cells};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_19get_number_of_cells(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_number_of_cells (wrapper)", 0);
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_18get_number_of_cells(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_18get_number_of_cells(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_number_of_cells", 0);

  /* "foamSolverWrapper.pyx":200
 *                   The total number of cells in the simulation.
 *             """
 *             return self.cppFoamLib.get_number_of_cells()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->cppFoamLib->get_number_of_cells()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":191
 * 
 * 
 *       def get_number_of_cells(self):             # <<<<<<<<<<<<<<
 *             """
 *             Get the total number of cells in the simulation.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_number_of_cells", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":203
 * 
 * 
 *       def get_number_of_boundary_nodes(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Get the number of boundary nodes for a specified OpenFOAM patch.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_21get_number_of_boundary_nodes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_20get_number_of_boundary_nodes[] = "pyFoamSolver.get_number_of_boundary_nodes(self, patchName=u'numericalBoundary')\nFile: foamSolverWrapper.pyx (starting at line 203)\n\n            Get the number of boundary nodes for a specified OpenFOAM patch.\n\n            Parameters\n            ----------\n            patchName : str, optional\n                  The name of the OpenFOAM boundary patch (default is \"numericalBoundary\").\n\n            Returns\n            -------\n            int\n                  The number of boundary nodes for the specified patch.\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_21get_number_of_boundary_nodes = {"get_number_of_boundary_nodes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_21get_number_of_boundary_nodes, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_20get_number_of_boundary_nodes};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_21get_number_of_boundary_nodes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_patchName = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_number_of_boundary_nodes (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_patchName,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_u_numericalBoundary);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_patchName);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_number_of_boundary_nodes") < 0)) __PYX_ERR(0, 203, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_patchName = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_number_of_boundary_nodes", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 203, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_number_of_boundary_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_20get_number_of_boundary_nodes(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self), __pyx_v_patchName);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_20get_number_of_boundary_nodes(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_number_of_boundary_nodes", 0);
  __Pyx_INCREF(__pyx_v_patchName);

  /* "foamSolverWrapper.pyx":217
 *                   The number of boundary nodes for the specified patch.
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_patchName); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foamSolverWrapper.pyx":218
 *             """
 *             if isinstance(patchName, str):
 *                   patchName = patchName.encode('utf-8')             # <<<<<<<<<<<<<<
 * 
 *             return self.cppFoamLib.get_number_of_boundary_nodes(patchName)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_patchName, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_u_utf_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_utf_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_patchName, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "foamSolverWrapper.pyx":217
 *                   The number of boundary nodes for the specified patch.
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  }

  /* "foamSolverWrapper.pyx":220
 *                   patchName = patchName.encode('utf-8')
 * 
 *             return self.cppFoamLib.get_number_of_boundary_nodes(patchName)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_patchName); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 220, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->cppFoamLib->get_number_of_boundary_nodes(__pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":203
 * 
 * 
 *       def get_number_of_boundary_nodes(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Get the number of boundary nodes for a specified OpenFOAM patch.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_number_of_boundary_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_patchName);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":223
 * 
 * 
 *       def get_number_of_boundary_faces(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Get the number of boundary faces for a specified OpenFOAM patch.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_23get_number_of_boundary_faces(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_22get_number_of_boundary_faces[] = "pyFoamSolver.get_number_of_boundary_faces(self, patchName=u'numericalBoundary')\nFile: foamSolverWrapper.pyx (starting at line 223)\n\n            Get the number of boundary faces for a specified OpenFOAM patch.\n\n            Parameters\n            ----------\n            patchName : str, optional\n                  The name of the OpenFOAM boundary patch (default is \"numericalBoundary\").\n\n            Returns\n            -------\n            int\n                  The number of boundary faces for the specified patch.\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_23get_number_of_boundary_faces = {"get_number_of_boundary_faces", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_23get_number_of_boundary_faces, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_22get_number_of_boundary_faces};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_23get_number_of_boundary_faces(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_patchName = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_number_of_boundary_faces (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_patchName,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_u_numericalBoundary);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_patchName);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_number_of_boundary_faces") < 0)) __PYX_ERR(0, 223, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_patchName = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_number_of_boundary_faces", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 223, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_number_of_boundary_faces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_22get_number_of_boundary_faces(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self), __pyx_v_patchName);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_22get_number_of_boundary_faces(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_number_of_boundary_faces", 0);
  __Pyx_INCREF(__pyx_v_patchName);

  /* "foamSolverWrapper.pyx":237
 *                   The number of boundary faces for the specified patch.
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_patchName); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foamSolverWrapper.pyx":238
 *             """
 *             if isinstance(patchName, str):
 *                   patchName = patchName.encode('utf-8')             # <<<<<<<<<<<<<<
 * 
 *             return self.cppFoamLib.get_number_of_boundary_faces(patchName)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_patchName, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_u_utf_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_utf_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_patchName, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "foamSolverWrapper.pyx":237
 *                   The number of boundary faces for the specified patch.
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  }

  /* "foamSolverWrapper.pyx":240
 *                   patchName = patchName.encode('utf-8')
 * 
 *             return self.cppFoamLib.get_number_of_boundary_faces(patchName)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_patchName); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 240, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->cppFoamLib->get_number_of_boundary_faces(__pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":223
 * 
 * 
 *       def get_number_of_boundary_faces(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Get the number of boundary faces for a specified OpenFOAM patch.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_number_of_boundary_faces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_patchName);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":245
 * 
 *       # Cell and Node Coordinate Access
 *       def get_node_coordinates(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the coordinates of the nodes in the simulation.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_25get_node_coordinates(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_24get_node_coordinates[] = "pyFoamSolver.get_node_coordinates(self)\nFile: foamSolverWrapper.pyx (starting at line 245)\n\n            Returns the coordinates of the nodes in the simulation.\n\n            Returns\n            -------\n            ndarray (nNodes,)\n                  Numpy array containing the coordinates of the nodes.\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_25get_node_coordinates = {"get_node_coordinates", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_25get_node_coordinates, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_24get_node_coordinates};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_25get_node_coordinates(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_node_coordinates (wrapper)", 0);
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_24get_node_coordinates(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_24get_node_coordinates(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self) {
  int __pyx_v_nNodes;
  PyArrayObject *__pyx_v_nodeCoordinates = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_nodeCoordinates;
  __Pyx_Buffer __pyx_pybuffer_nodeCoordinates;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyArrayObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_node_coordinates", 0);
  __pyx_pybuffer_nodeCoordinates.pybuffer.buf = NULL;
  __pyx_pybuffer_nodeCoordinates.refcount = 0;
  __pyx_pybuffernd_nodeCoordinates.data = NULL;
  __pyx_pybuffernd_nodeCoordinates.rcbuffer = &__pyx_pybuffer_nodeCoordinates;

  /* "foamSolverWrapper.pyx":254
 *                   Numpy array containing the coordinates of the nodes.
 *             """
 *             nNodes= self.cppFoamLib.get_number_of_nodes()             # <<<<<<<<<<<<<<
 * 
 *             cdef _np.ndarray[_np.float64_t, ndim=1] nodeCoordinates
 */
  __pyx_v_nNodes = __pyx_v_self->cppFoamLib->get_number_of_nodes();

  /* "foamSolverWrapper.pyx":258
 *             cdef _np.ndarray[_np.float64_t, ndim=1] nodeCoordinates
 * 
 *             nodeCoordinates = _np.zeros(nNodes)             # <<<<<<<<<<<<<<
 *             self.cppFoamLib.get_node_coordinates(&nodeCoordinates[0])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_nNodes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 258, __pyx_L1_error)
  __pyx_t_5 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_nodeCoordinates.rcbuffer->pybuffer);
    __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_nodeCoordinates.rcbuffer->pybuffer, (PyObject*)__pyx_t_5, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_6 < 0)) {
      PyErr_Fetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_nodeCoordinates.rcbuffer->pybuffer, (PyObject*)__pyx_v_nodeCoordinates, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_7); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      }
      __pyx_t_7 = __pyx_t_8 = __pyx_t_9 = 0;
    }
    __pyx_pybuffernd_nodeCoordinates.diminfo[0].strides = __pyx_pybuffernd_nodeCoordinates.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_nodeCoordinates.diminfo[0].shape = __pyx_pybuffernd_nodeCoordinates.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 258, __pyx_L1_error)
  }
  __pyx_t_5 = 0;
  __pyx_v_nodeCoordinates = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":259
 * 
 *             nodeCoordinates = _np.zeros(nNodes)
 *             self.cppFoamLib.get_node_coordinates(&nodeCoordinates[0])             # <<<<<<<<<<<<<<
 * 
 *             return nodeCoordinates
 */
  __pyx_t_10 = 0;
  __pyx_t_6 = -1;
  if (__pyx_t_10 < 0) {
    __pyx_t_10 += __pyx_pybuffernd_nodeCoordinates.diminfo[0].shape;
    if (unlikely(__pyx_t_10 < 0)) __pyx_t_6 = 0;
  } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_nodeCoordinates.diminfo[0].shape)) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    __PYX_ERR(0, 259, __pyx_L1_error)
  }
  __pyx_v_self->cppFoamLib->get_node_coordinates((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_nodeCoordinates.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_nodeCoordinates.diminfo[0].strides))));

  /* "foamSolverWrapper.pyx":261
 *             self.cppFoamLib.get_node_coordinates(&nodeCoordinates[0])
 * 
 *             return nodeCoordinates             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_nodeCoordinates));
  __pyx_r = ((PyObject *)__pyx_v_nodeCoordinates);
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":245
 * 
 *       # Cell and Node Coordinate Access
 *       def get_node_coordinates(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the coordinates of the nodes in the simulation.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_nodeCoordinates.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_node_coordinates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_nodeCoordinates.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_nodeCoordinates);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":264
 * 
 * 
 *       def get_connectivity(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the connectivity of the cells in the simulation.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_27get_connectivity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_26get_connectivity[] = "pyFoamSolver.get_connectivity(self)\nFile: foamSolverWrapper.pyx (starting at line 264)\n\n            Returns the connectivity of the cells in the simulation.\n\n            Returns\n            -------\n            ndarray (nCells * 8,)\n                  Numpy array containing the connectivity of the cells.\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_27get_connectivity = {"get_connectivity", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_27get_connectivity, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_26get_connectivity};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_27get_connectivity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_connectivity (wrapper)", 0);
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_26get_connectivity(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_26get_connectivity(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self) {
  PyObject *__pyx_v_nCells = NULL;
  PyArrayObject *__pyx_v_connectivity = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_connectivity;
  __Pyx_Buffer __pyx_pybuffer_connectivity;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_connectivity", 0);
  __pyx_pybuffer_connectivity.pybuffer.buf = NULL;
  __pyx_pybuffer_connectivity.refcount = 0;
  __pyx_pybuffernd_connectivity.data = NULL;
  __pyx_pybuffernd_connectivity.rcbuffer = &__pyx_pybuffer_connectivity;

  /* "foamSolverWrapper.pyx":273
 *                   Numpy array containing the connectivity of the cells.
 *             """
 *             nCells = self.cppFoamLib.get_number_of_cells()             # <<<<<<<<<<<<<<
 * 
 *             cdef _np.ndarray[_np.int64_t, ndim=1] connectivity
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->cppFoamLib->get_number_of_cells()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_nCells = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":277
 *             cdef _np.ndarray[_np.int64_t, ndim=1] connectivity
 * 
 *             connectivity = _np.zeros(nCells * 8, dtype=_np.float64)             # <<<<<<<<<<<<<<
 *             self.cppFoamLib.get_node_coordinates(<double*>connectivity.data)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_nCells, __pyx_int_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 277, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_connectivity.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_connectivity.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_connectivity.rcbuffer->pybuffer, (PyObject*)__pyx_v_connectivity, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
      __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
    }
    __pyx_pybuffernd_connectivity.diminfo[0].strides = __pyx_pybuffernd_connectivity.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_connectivity.diminfo[0].shape = __pyx_pybuffernd_connectivity.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 277, __pyx_L1_error)
  }
  __pyx_t_6 = 0;
  __pyx_v_connectivity = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "foamSolverWrapper.pyx":278
 * 
 *             connectivity = _np.zeros(nCells * 8, dtype=_np.float64)
 *             self.cppFoamLib.get_node_coordinates(<double*>connectivity.data)             # <<<<<<<<<<<<<<
 * 
 *             return connectivity
 */
  __pyx_v_self->cppFoamLib->get_node_coordinates(((double *)__pyx_v_connectivity->data));

  /* "foamSolverWrapper.pyx":280
 *             self.cppFoamLib.get_node_coordinates(<double*>connectivity.data)
 * 
 *             return connectivity             # <<<<<<<<<<<<<<
 * 
 *       def get_cell_volumes(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_connectivity));
  __pyx_r = ((PyObject *)__pyx_v_connectivity);
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":264
 * 
 * 
 *       def get_connectivity(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the connectivity of the cells in the simulation.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_connectivity.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_connectivity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_connectivity.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_nCells);
  __Pyx_XDECREF((PyObject *)__pyx_v_connectivity);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":282
 *             return connectivity
 * 
 *       def get_cell_volumes(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the volumes of the cells in the simulation.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_29get_cell_volumes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_28get_cell_volumes[] = "pyFoamSolver.get_cell_volumes(self)\nFile: foamSolverWrapper.pyx (starting at line 282)\n\n            Returns the volumes of the cells in the simulation.\n\n            Returns\n            -------\n            ndarray (nCells,)\n                  Numpy array containing the volumes of the cells.\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_29get_cell_volumes = {"get_cell_volumes", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_29get_cell_volumes, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_28get_cell_volumes};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_29get_cell_volumes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cell_volumes (wrapper)", 0);
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_28get_cell_volumes(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_28get_cell_volumes(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self) {
  int __pyx_v_nCells;
  PyArrayObject *__pyx_v_cellVolumes = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cellVolumes;
  __Pyx_Buffer __pyx_pybuffer_cellVolumes;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyArrayObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_cell_volumes", 0);
  __pyx_pybuffer_cellVolumes.pybuffer.buf = NULL;
  __pyx_pybuffer_cellVolumes.refcount = 0;
  __pyx_pybuffernd_cellVolumes.data = NULL;
  __pyx_pybuffernd_cellVolumes.rcbuffer = &__pyx_pybuffer_cellVolumes;

  /* "foamSolverWrapper.pyx":291
 *                   Numpy array containing the volumes of the cells.
 *             """
 *             nCells = self.cppFoamLib.get_number_of_cells()             # <<<<<<<<<<<<<<
 * 
 *             cdef _np.ndarray[_np.float64_t, ndim=1] cellVolumes
 */
  __pyx_v_nCells = __pyx_v_self->cppFoamLib->get_number_of_cells();

  /* "foamSolverWrapper.pyx":295
 *             cdef _np.ndarray[_np.float64_t, ndim=1] cellVolumes
 * 
 *             cellVolumes = _np.zeros(nCells)             # <<<<<<<<<<<<<<
 *             self.cppFoamLib.get_cell_volumes(&cellVolumes[0])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_nCells); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 295, __pyx_L1_error)
  __pyx_t_5 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cellVolumes.rcbuffer->pybuffer);
    __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cellVolumes.rcbuffer->pybuffer, (PyObject*)__pyx_t_5, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_6 < 0)) {
      PyErr_Fetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cellVolumes.rcbuffer->pybuffer, (PyObject*)__pyx_v_cellVolumes, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_7); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      }
      __pyx_t_7 = __pyx_t_8 = __pyx_t_9 = 0;
    }
    __pyx_pybuffernd_cellVolumes.diminfo[0].strides = __pyx_pybuffernd_cellVolumes.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cellVolumes.diminfo[0].shape = __pyx_pybuffernd_cellVolumes.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 295, __pyx_L1_error)
  }
  __pyx_t_5 = 0;
  __pyx_v_cellVolumes = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":296
 * 
 *             cellVolumes = _np.zeros(nCells)
 *             self.cppFoamLib.get_cell_volumes(&cellVolumes[0])             # <<<<<<<<<<<<<<
 * 
 *             return cellVolumes
 */
  __pyx_t_10 = 0;
  __pyx_t_6 = -1;
  if (__pyx_t_10 < 0) {
    __pyx_t_10 += __pyx_pybuffernd_cellVolumes.diminfo[0].shape;
    if (unlikely(__pyx_t_10 < 0)) __pyx_t_6 = 0;
  } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_cellVolumes.diminfo[0].shape)) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    __PYX_ERR(0, 296, __pyx_L1_error)
  }
  __pyx_v_self->cppFoamLib->get_cell_volumes((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_cellVolumes.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_cellVolumes.diminfo[0].strides))));

  /* "foamSolverWrapper.pyx":298
 *             self.cppFoamLib.get_cell_volumes(&cellVolumes[0])
 * 
 *             return cellVolumes             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_cellVolumes));
  __pyx_r = ((PyObject *)__pyx_v_cellVolumes);
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":282
 *             return connectivity
 * 
 *       def get_cell_volumes(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the volumes of the cells in the simulation.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cellVolumes.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_cell_volumes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cellVolumes.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_cellVolumes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":301
 * 
 * 
 *       def get_cell_center_coordinates(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the coordinates of the cell centers in the simulation.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_31get_cell_center_coordinates(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_30get_cell_center_coordinates[] = "pyFoamSolver.get_cell_center_coordinates(self)\nFile: foamSolverWrapper.pyx (starting at line 301)\n\n            Returns the coordinates of the cell centers in the simulation.\n\n            Returns\n            -------\n            ndarray (nCells, 3)\n                  Numpy array containing the coordinates of the cell centers.\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_31get_cell_center_coordinates = {"get_cell_center_coordinates", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_31get_cell_center_coordinates, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_30get_cell_center_coordinates};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_31get_cell_center_coordinates(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cell_center_coordinates (wrapper)", 0);
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_30get_cell_center_coordinates(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_30get_cell_center_coordinates(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self) {
  PyObject *__pyx_v_nCells = NULL;
  PyArrayObject *__pyx_v_cellXYZ = 0;
  PyObject *__pyx_v_cellCenters = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cellXYZ;
  __Pyx_Buffer __pyx_pybuffer_cellXYZ;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyArrayObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_cell_center_coordinates", 0);
  __pyx_pybuffer_cellXYZ.pybuffer.buf = NULL;
  __pyx_pybuffer_cellXYZ.refcount = 0;
  __pyx_pybuffernd_cellXYZ.data = NULL;
  __pyx_pybuffernd_cellXYZ.rcbuffer = &__pyx_pybuffer_cellXYZ;

  /* "foamSolverWrapper.pyx":310
 *                   Numpy array containing the coordinates of the cell centers.
 *             """
 *             nCells = self.cppFoamLib.get_number_of_cells()             # <<<<<<<<<<<<<<
 * 
 *             cdef _np.ndarray[_np.float64_t, ndim=1] cellXYZ
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->cppFoamLib->get_number_of_cells()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_nCells = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":314
 *             cdef _np.ndarray[_np.float64_t, ndim=1] cellXYZ
 * 
 *             cellXYZ = _np.zeros(nCells*3)             # <<<<<<<<<<<<<<
 *             self.cppFoamLib.get_cell_center_coordinates(&cellXYZ[0])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_nCells, __pyx_int_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 314, __pyx_L1_error)
  __pyx_t_5 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cellXYZ.rcbuffer->pybuffer);
    __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cellXYZ.rcbuffer->pybuffer, (PyObject*)__pyx_t_5, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_6 < 0)) {
      PyErr_Fetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cellXYZ.rcbuffer->pybuffer, (PyObject*)__pyx_v_cellXYZ, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_7); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      }
      __pyx_t_7 = __pyx_t_8 = __pyx_t_9 = 0;
    }
    __pyx_pybuffernd_cellXYZ.diminfo[0].strides = __pyx_pybuffernd_cellXYZ.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cellXYZ.diminfo[0].shape = __pyx_pybuffernd_cellXYZ.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 314, __pyx_L1_error)
  }
  __pyx_t_5 = 0;
  __pyx_v_cellXYZ = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":315
 * 
 *             cellXYZ = _np.zeros(nCells*3)
 *             self.cppFoamLib.get_cell_center_coordinates(&cellXYZ[0])             # <<<<<<<<<<<<<<
 * 
 *             cellCenters = cellXYZ.reshape(nCells, 3)
 */
  __pyx_t_10 = 0;
  __pyx_t_6 = -1;
  if (__pyx_t_10 < 0) {
    __pyx_t_10 += __pyx_pybuffernd_cellXYZ.diminfo[0].shape;
    if (unlikely(__pyx_t_10 < 0)) __pyx_t_6 = 0;
  } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_cellXYZ.diminfo[0].shape)) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    __PYX_ERR(0, 315, __pyx_L1_error)
  }
  __pyx_v_self->cppFoamLib->get_cell_center_coordinates((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_cellXYZ.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_cellXYZ.diminfo[0].strides))));

  /* "foamSolverWrapper.pyx":317
 *             self.cppFoamLib.get_cell_center_coordinates(&cellXYZ[0])
 * 
 *             cellCenters = cellXYZ.reshape(nCells, 3)             # <<<<<<<<<<<<<<
 * 
 *             return cellCenters
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_cellXYZ), __pyx_n_s_reshape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_nCells, __pyx_int_3};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_nCells, __pyx_int_3};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_nCells);
    __Pyx_GIVEREF(__pyx_v_nCells);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, __pyx_v_nCells);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, __pyx_int_3);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_cellCenters = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":319
 *             cellCenters = cellXYZ.reshape(nCells, 3)
 * 
 *             return cellCenters             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_cellCenters);
  __pyx_r = __pyx_v_cellCenters;
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":301
 * 
 * 
 *       def get_cell_center_coordinates(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the coordinates of the cell centers in the simulation.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cellXYZ.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_cell_center_coordinates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cellXYZ.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_nCells);
  __Pyx_XDECREF((PyObject *)__pyx_v_cellXYZ);
  __Pyx_XDECREF(__pyx_v_cellCenters);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":323
 * 
 *       # Boundary Data Access
 *       def get_boundary_node_coordinates(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the coordinates of the boundary nodes for a given patch.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_33get_boundary_node_coordinates(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_32get_boundary_node_coordinates[] = "pyFoamSolver.get_boundary_node_coordinates(self, patchName=u'numericalBoundary')\nFile: foamSolverWrapper.pyx (starting at line 323)\n\n            Returns the coordinates of the boundary nodes for a given patch.\n\n            Parameters\n            ----------\n            patchName : str, optional\n                  Name of the OpenFOAM boundary patch. Default is \"numericalBoundary\".\n\n            Returns\n            -------\n            ndarray (nBoundaryNodes, 3)\n                  Numpy array containing the coordinates of the boundary nodes.\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_33get_boundary_node_coordinates = {"get_boundary_node_coordinates", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_33get_boundary_node_coordinates, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_32get_boundary_node_coordinates};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_33get_boundary_node_coordinates(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_patchName = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_boundary_node_coordinates (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_patchName,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_u_numericalBoundary);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_patchName);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_boundary_node_coordinates") < 0)) __PYX_ERR(0, 323, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_patchName = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_boundary_node_coordinates", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 323, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_boundary_node_coordinates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_32get_boundary_node_coordinates(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self), __pyx_v_patchName);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_32get_boundary_node_coordinates(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName) {
  PyObject *__pyx_v_nBoundaryNodes = NULL;
  PyArrayObject *__pyx_v_nodesXYZ = 0;
  PyObject *__pyx_v_bondNodesCoordinates = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_nodesXYZ;
  __Pyx_Buffer __pyx_pybuffer_nodesXYZ;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_boundary_node_coordinates", 0);
  __Pyx_INCREF(__pyx_v_patchName);
  __pyx_pybuffer_nodesXYZ.pybuffer.buf = NULL;
  __pyx_pybuffer_nodesXYZ.refcount = 0;
  __pyx_pybuffernd_nodesXYZ.data = NULL;
  __pyx_pybuffernd_nodesXYZ.rcbuffer = &__pyx_pybuffer_nodesXYZ;

  /* "foamSolverWrapper.pyx":337
 *                   Numpy array containing the coordinates of the boundary nodes.
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_patchName); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foamSolverWrapper.pyx":338
 *             """
 *             if isinstance(patchName, str):
 *                   patchName = patchName.encode('utf-8')             # <<<<<<<<<<<<<<
 * 
 *             nBoundaryNodes = self.cppFoamLib.get_number_of_boundary_nodes(patchName)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_patchName, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_u_utf_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_utf_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_patchName, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "foamSolverWrapper.pyx":337
 *                   Numpy array containing the coordinates of the boundary nodes.
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  }

  /* "foamSolverWrapper.pyx":340
 *                   patchName = patchName.encode('utf-8')
 * 
 *             nBoundaryNodes = self.cppFoamLib.get_number_of_boundary_nodes(patchName)             # <<<<<<<<<<<<<<
 * 
 *             cdef _np.ndarray[_np.float64_t, ndim=1] nodesXYZ
 */
  __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_patchName); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 340, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->cppFoamLib->get_number_of_boundary_nodes(__pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_nBoundaryNodes = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "foamSolverWrapper.pyx":344
 *             cdef _np.ndarray[_np.float64_t, ndim=1] nodesXYZ
 * 
 *             nodesXYZ = _np.zeros(nBoundaryNodes*3)             # <<<<<<<<<<<<<<
 *             self.cppFoamLib.get_boundary_node_coordinates(&nodesXYZ[0], patchName)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_nBoundaryNodes, __pyx_int_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 344, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_nodesXYZ.rcbuffer->pybuffer);
    __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_nodesXYZ.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_9 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_nodesXYZ.rcbuffer->pybuffer, (PyObject*)__pyx_v_nodesXYZ, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
    }
    __pyx_pybuffernd_nodesXYZ.diminfo[0].strides = __pyx_pybuffernd_nodesXYZ.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_nodesXYZ.diminfo[0].shape = __pyx_pybuffernd_nodesXYZ.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 344, __pyx_L1_error)
  }
  __pyx_t_8 = 0;
  __pyx_v_nodesXYZ = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "foamSolverWrapper.pyx":345
 * 
 *             nodesXYZ = _np.zeros(nBoundaryNodes*3)
 *             self.cppFoamLib.get_boundary_node_coordinates(&nodesXYZ[0], patchName)             # <<<<<<<<<<<<<<
 * 
 *             bondNodesCoordinates = nodesXYZ.reshape(nBoundaryNodes, 3)
 */
  __pyx_t_13 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_pybuffernd_nodesXYZ.diminfo[0].shape;
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_nodesXYZ.diminfo[0].shape)) __pyx_t_9 = 0;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 345, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_patchName); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 345, __pyx_L1_error)
  __pyx_v_self->cppFoamLib->get_boundary_node_coordinates((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_nodesXYZ.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_nodesXYZ.diminfo[0].strides))), __pyx_t_6);

  /* "foamSolverWrapper.pyx":347
 *             self.cppFoamLib.get_boundary_node_coordinates(&nodesXYZ[0], patchName)
 * 
 *             bondNodesCoordinates = nodesXYZ.reshape(nBoundaryNodes, 3)             # <<<<<<<<<<<<<<
 * 
 *             return bondNodesCoordinates
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_nodesXYZ), __pyx_n_s_reshape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_nBoundaryNodes, __pyx_int_3};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_nBoundaryNodes, __pyx_int_3};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_nBoundaryNodes);
    __Pyx_GIVEREF(__pyx_v_nBoundaryNodes);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_9, __pyx_v_nBoundaryNodes);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_9, __pyx_int_3);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_bondNodesCoordinates = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "foamSolverWrapper.pyx":349
 *             bondNodesCoordinates = nodesXYZ.reshape(nBoundaryNodes, 3)
 * 
 *             return bondNodesCoordinates             # <<<<<<<<<<<<<<
 * 
 *       def get_boundary_node_normal(self, patchName="numericalBoundary"):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_bondNodesCoordinates);
  __pyx_r = __pyx_v_bondNodesCoordinates;
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":323
 * 
 *       # Boundary Data Access
 *       def get_boundary_node_coordinates(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the coordinates of the boundary nodes for a given patch.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_nodesXYZ.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_boundary_node_coordinates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_nodesXYZ.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_nBoundaryNodes);
  __Pyx_XDECREF((PyObject *)__pyx_v_nodesXYZ);
  __Pyx_XDECREF(__pyx_v_bondNodesCoordinates);
  __Pyx_XDECREF(__pyx_v_patchName);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":351
 *             return bondNodesCoordinates
 * 
 *       def get_boundary_node_normal(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the normals of the boundary nodes for a given patch.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_35get_boundary_node_normal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_34get_boundary_node_normal[] = "pyFoamSolver.get_boundary_node_normal(self, patchName=u'numericalBoundary')\nFile: foamSolverWrapper.pyx (starting at line 351)\n\n            Returns the normals of the boundary nodes for a given patch.\n\n            Parameters\n            ----------\n            patchName : str, optional\n                  Name of the OpenFOAM boundary patch. Default is \"numericalBoundary\".\n\n            Returns\n            -------\n            ndarray (nBoundaryNodes, 3)\n                  Numpy array containing the normals of the boundary nodes.\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_35get_boundary_node_normal = {"get_boundary_node_normal", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_35get_boundary_node_normal, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_34get_boundary_node_normal};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_35get_boundary_node_normal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_patchName = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_boundary_node_normal (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_patchName,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_u_numericalBoundary);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_patchName);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_boundary_node_normal") < 0)) __PYX_ERR(0, 351, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_patchName = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_boundary_node_normal", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 351, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_boundary_node_normal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_34get_boundary_node_normal(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self), __pyx_v_patchName);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_34get_boundary_node_normal(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName) {
  PyObject *__pyx_v_nBoundaryNodes = NULL;
  PyArrayObject *__pyx_v_bondNodeNormals = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_bondNodeNormals;
  __Pyx_Buffer __pyx_pybuffer_bondNodeNormals;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_boundary_node_normal", 0);
  __Pyx_INCREF(__pyx_v_patchName);
  __pyx_pybuffer_bondNodeNormals.pybuffer.buf = NULL;
  __pyx_pybuffer_bondNodeNormals.refcount = 0;
  __pyx_pybuffernd_bondNodeNormals.data = NULL;
  __pyx_pybuffernd_bondNodeNormals.rcbuffer = &__pyx_pybuffer_bondNodeNormals;

  /* "foamSolverWrapper.pyx":365
 *                   Numpy array containing the normals of the boundary nodes.
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_patchName); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foamSolverWrapper.pyx":366
 *             """
 *             if isinstance(patchName, str):
 *                   patchName = patchName.encode('utf-8')             # <<<<<<<<<<<<<<
 * 
 *             nBoundaryNodes = self.cppFoamLib.get_number_of_boundary_nodes(patchName)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_patchName, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_u_utf_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_utf_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_patchName, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "foamSolverWrapper.pyx":365
 *                   Numpy array containing the normals of the boundary nodes.
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  }

  /* "foamSolverWrapper.pyx":368
 *                   patchName = patchName.encode('utf-8')
 * 
 *             nBoundaryNodes = self.cppFoamLib.get_number_of_boundary_nodes(patchName)             # <<<<<<<<<<<<<<
 * 
 *             cdef _np.ndarray[_np.float64_t, ndim=1] bondNodeNormals
 */
  __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_patchName); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 368, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->cppFoamLib->get_number_of_boundary_nodes(__pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_nBoundaryNodes = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "foamSolverWrapper.pyx":372
 *             cdef _np.ndarray[_np.float64_t, ndim=1] bondNodeNormals
 * 
 *             bondNodeNormals = _np.zeros(nBoundaryNodes*3)             # <<<<<<<<<<<<<<
 *             self.cppFoamLib.get_boundary_face_normals(&bondNodeNormals[0], patchName)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_nBoundaryNodes, __pyx_int_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 372, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_bondNodeNormals.rcbuffer->pybuffer);
    __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_bondNodeNormals.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_9 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_bondNodeNormals.rcbuffer->pybuffer, (PyObject*)__pyx_v_bondNodeNormals, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
    }
    __pyx_pybuffernd_bondNodeNormals.diminfo[0].strides = __pyx_pybuffernd_bondNodeNormals.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_bondNodeNormals.diminfo[0].shape = __pyx_pybuffernd_bondNodeNormals.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 372, __pyx_L1_error)
  }
  __pyx_t_8 = 0;
  __pyx_v_bondNodeNormals = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "foamSolverWrapper.pyx":373
 * 
 *             bondNodeNormals = _np.zeros(nBoundaryNodes*3)
 *             self.cppFoamLib.get_boundary_face_normals(&bondNodeNormals[0], patchName)             # <<<<<<<<<<<<<<
 * 
 *             return bondNodeNormals.reshape(nBoundaryNodes, 3)
 */
  __pyx_t_13 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_pybuffernd_bondNodeNormals.diminfo[0].shape;
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_bondNodeNormals.diminfo[0].shape)) __pyx_t_9 = 0;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 373, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_patchName); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 373, __pyx_L1_error)
  __pyx_v_self->cppFoamLib->get_boundary_face_normals((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_bondNodeNormals.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_bondNodeNormals.diminfo[0].strides))), __pyx_t_6);

  /* "foamSolverWrapper.pyx":375
 *             self.cppFoamLib.get_boundary_face_normals(&bondNodeNormals[0], patchName)
 * 
 *             return bondNodeNormals.reshape(nBoundaryNodes, 3)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_bondNodeNormals), __pyx_n_s_reshape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_nBoundaryNodes, __pyx_int_3};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 375, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_nBoundaryNodes, __pyx_int_3};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 375, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_nBoundaryNodes);
    __Pyx_GIVEREF(__pyx_v_nBoundaryNodes);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_9, __pyx_v_nBoundaryNodes);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_9, __pyx_int_3);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":351
 *             return bondNodesCoordinates
 * 
 *       def get_boundary_node_normal(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the normals of the boundary nodes for a given patch.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_bondNodeNormals.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_boundary_node_normal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_bondNodeNormals.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_nBoundaryNodes);
  __Pyx_XDECREF((PyObject *)__pyx_v_bondNodeNormals);
  __Pyx_XDECREF(__pyx_v_patchName);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":378
 * 
 * 
 *       def get_boundary_face_center_coordinates(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the coordinates of the boundary face centers for a given patch.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_37get_boundary_face_center_coordinates(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_36get_boundary_face_center_coordinates[] = "pyFoamSolver.get_boundary_face_center_coordinates(self, patchName=u'numericalBoundary')\nFile: foamSolverWrapper.pyx (starting at line 378)\n\n            Returns the coordinates of the boundary face centers for a given patch.\n\n            Parameters\n            ----------\n            patchName : str, optional\n                  Name of the OpenFOAM boundary patch. Default is \"numericalBoundary\".\n\n            Returns\n            -------\n            ndarray (nBoundaryFaces, 3)\n                  Numpy array containing the coordinates of the boundary face centers.\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_37get_boundary_face_center_coordinates = {"get_boundary_face_center_coordinates", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_37get_boundary_face_center_coordinates, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_36get_boundary_face_center_coordinates};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_37get_boundary_face_center_coordinates(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_patchName = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_boundary_face_center_coordinates (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_patchName,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_u_numericalBoundary);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_patchName);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_boundary_face_center_coordinates") < 0)) __PYX_ERR(0, 378, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_patchName = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_boundary_face_center_coordinates", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 378, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_boundary_face_center_coordinates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_36get_boundary_face_center_coordinates(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self), __pyx_v_patchName);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_36get_boundary_face_center_coordinates(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName) {
  PyObject *__pyx_v_nBoundaryFaces = NULL;
  PyArrayObject *__pyx_v_faceXYZ = 0;
  PyObject *__pyx_v_bondFaceCenterCoordinates = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_faceXYZ;
  __Pyx_Buffer __pyx_pybuffer_faceXYZ;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_boundary_face_center_coordinates", 0);
  __Pyx_INCREF(__pyx_v_patchName);
  __pyx_pybuffer_faceXYZ.pybuffer.buf = NULL;
  __pyx_pybuffer_faceXYZ.refcount = 0;
  __pyx_pybuffernd_faceXYZ.data = NULL;
  __pyx_pybuffernd_faceXYZ.rcbuffer = &__pyx_pybuffer_faceXYZ;

  /* "foamSolverWrapper.pyx":392
 *                   Numpy array containing the coordinates of the boundary face centers.
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_patchName); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foamSolverWrapper.pyx":393
 *             """
 *             if isinstance(patchName, str):
 *                   patchName = patchName.encode('utf-8')             # <<<<<<<<<<<<<<
 * 
 *             nBoundaryFaces = self.cppFoamLib.get_number_of_boundary_faces(patchName)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_patchName, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_u_utf_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_utf_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_patchName, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "foamSolverWrapper.pyx":392
 *                   Numpy array containing the coordinates of the boundary face centers.
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  }

  /* "foamSolverWrapper.pyx":395
 *                   patchName = patchName.encode('utf-8')
 * 
 *             nBoundaryFaces = self.cppFoamLib.get_number_of_boundary_faces(patchName)             # <<<<<<<<<<<<<<
 * 
 *             cdef _np.ndarray[_np.float64_t, ndim=1] faceXYZ
 */
  __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_patchName); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 395, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->cppFoamLib->get_number_of_boundary_faces(__pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_nBoundaryFaces = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "foamSolverWrapper.pyx":399
 *             cdef _np.ndarray[_np.float64_t, ndim=1] faceXYZ
 * 
 *             faceXYZ = _np.zeros(nBoundaryFaces*3)             # <<<<<<<<<<<<<<
 *             self.cppFoamLib.get_boundary_face_center_coordinates(&faceXYZ[0], patchName)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_nBoundaryFaces, __pyx_int_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 399, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_faceXYZ.rcbuffer->pybuffer);
    __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_faceXYZ.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_9 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_faceXYZ.rcbuffer->pybuffer, (PyObject*)__pyx_v_faceXYZ, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
    }
    __pyx_pybuffernd_faceXYZ.diminfo[0].strides = __pyx_pybuffernd_faceXYZ.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_faceXYZ.diminfo[0].shape = __pyx_pybuffernd_faceXYZ.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 399, __pyx_L1_error)
  }
  __pyx_t_8 = 0;
  __pyx_v_faceXYZ = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "foamSolverWrapper.pyx":400
 * 
 *             faceXYZ = _np.zeros(nBoundaryFaces*3)
 *             self.cppFoamLib.get_boundary_face_center_coordinates(&faceXYZ[0], patchName)             # <<<<<<<<<<<<<<
 * 
 *             bondFaceCenterCoordinates = faceXYZ.reshape(nBoundaryFaces, 3)
 */
  __pyx_t_13 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_pybuffernd_faceXYZ.diminfo[0].shape;
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_faceXYZ.diminfo[0].shape)) __pyx_t_9 = 0;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 400, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_patchName); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 400, __pyx_L1_error)
  __pyx_v_self->cppFoamLib->get_boundary_face_center_coordinates((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_faceXYZ.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_faceXYZ.diminfo[0].strides))), __pyx_t_6);

  /* "foamSolverWrapper.pyx":402
 *             self.cppFoamLib.get_boundary_face_center_coordinates(&faceXYZ[0], patchName)
 * 
 *             bondFaceCenterCoordinates = faceXYZ.reshape(nBoundaryFaces, 3)             # <<<<<<<<<<<<<<
 * 
 *             return bondFaceCenterCoordinates
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_faceXYZ), __pyx_n_s_reshape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_nBoundaryFaces, __pyx_int_3};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_nBoundaryFaces, __pyx_int_3};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_nBoundaryFaces);
    __Pyx_GIVEREF(__pyx_v_nBoundaryFaces);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_9, __pyx_v_nBoundaryFaces);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_9, __pyx_int_3);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_bondFaceCenterCoordinates = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "foamSolverWrapper.pyx":404
 *             bondFaceCenterCoordinates = faceXYZ.reshape(nBoundaryFaces, 3)
 * 
 *             return bondFaceCenterCoordinates             # <<<<<<<<<<<<<<
 * 
 *       def get_boundary_face_areas(self, patchName="numericalBoundary"):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_bondFaceCenterCoordinates);
  __pyx_r = __pyx_v_bondFaceCenterCoordinates;
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":378
 * 
 * 
 *       def get_boundary_face_center_coordinates(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the coordinates of the boundary face centers for a given patch.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_faceXYZ.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_boundary_face_center_coordinates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_faceXYZ.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_nBoundaryFaces);
  __Pyx_XDECREF((PyObject *)__pyx_v_faceXYZ);
  __Pyx_XDECREF(__pyx_v_bondFaceCenterCoordinates);
  __Pyx_XDECREF(__pyx_v_patchName);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":406
 *             return bondFaceCenterCoordinates
 * 
 *       def get_boundary_face_areas(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the areas of the boundary faces for a given patch.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_39get_boundary_face_areas(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_38get_boundary_face_areas[] = "pyFoamSolver.get_boundary_face_areas(self, patchName=u'numericalBoundary')\nFile: foamSolverWrapper.pyx (starting at line 406)\n\n            Returns the areas of the boundary faces for a given patch.\n\n            Parameters\n            ----------\n            patchName : str, optional\n                  Name of the OpenFOAM boundary patch. Default is \"numericalBoundary\".\n\n            Returns\n            -------\n            ndarray (nBoundaryFaces,)\n                  Numpy array containing the areas of the boundary faces.\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_39get_boundary_face_areas = {"get_boundary_face_areas", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_39get_boundary_face_areas, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_38get_boundary_face_areas};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_39get_boundary_face_areas(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_patchName = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_boundary_face_areas (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_patchName,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_u_numericalBoundary);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_patchName);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_boundary_face_areas") < 0)) __PYX_ERR(0, 406, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_patchName = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_boundary_face_areas", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 406, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_boundary_face_areas", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_38get_boundary_face_areas(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self), __pyx_v_patchName);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_38get_boundary_face_areas(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName) {
  int __pyx_v_nBoundaryFaces;
  PyArrayObject *__pyx_v_boundaryFaceAreas = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_boundaryFaceAreas;
  __Pyx_Buffer __pyx_pybuffer_boundaryFaceAreas;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_boundary_face_areas", 0);
  __Pyx_INCREF(__pyx_v_patchName);
  __pyx_pybuffer_boundaryFaceAreas.pybuffer.buf = NULL;
  __pyx_pybuffer_boundaryFaceAreas.refcount = 0;
  __pyx_pybuffernd_boundaryFaceAreas.data = NULL;
  __pyx_pybuffernd_boundaryFaceAreas.rcbuffer = &__pyx_pybuffer_boundaryFaceAreas;

  /* "foamSolverWrapper.pyx":420
 *                   Numpy array containing the areas of the boundary faces.
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_patchName); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foamSolverWrapper.pyx":421
 *             """
 *             if isinstance(patchName, str):
 *                   patchName = patchName.encode('utf-8')             # <<<<<<<<<<<<<<
 * 
 *             nBoundaryFaces = self.cppFoamLib.get_number_of_boundary_faces(patchName)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_patchName, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_u_utf_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_utf_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_patchName, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "foamSolverWrapper.pyx":420
 *                   Numpy array containing the areas of the boundary faces.
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  }

  /* "foamSolverWrapper.pyx":423
 *                   patchName = patchName.encode('utf-8')
 * 
 *             nBoundaryFaces = self.cppFoamLib.get_number_of_boundary_faces(patchName)             # <<<<<<<<<<<<<<
 * 
 *             cdef _np.ndarray[_np.float64_t, ndim=1] boundaryFaceAreas
 */
  __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_patchName); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 423, __pyx_L1_error)
  __pyx_v_nBoundaryFaces = __pyx_v_self->cppFoamLib->get_number_of_boundary_faces(__pyx_t_6);

  /* "foamSolverWrapper.pyx":427
 *             cdef _np.ndarray[_np.float64_t, ndim=1] boundaryFaceAreas
 * 
 *             boundaryFaceAreas = _np.zeros(nBoundaryFaces)             # <<<<<<<<<<<<<<
 *             self.cppFoamLib.get_boundary_face_areas(&boundaryFaceAreas[0], patchName)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_nBoundaryFaces); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 427, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_boundaryFaceAreas.rcbuffer->pybuffer);
    __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_boundaryFaceAreas.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_9 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_boundaryFaceAreas.rcbuffer->pybuffer, (PyObject*)__pyx_v_boundaryFaceAreas, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
    }
    __pyx_pybuffernd_boundaryFaceAreas.diminfo[0].strides = __pyx_pybuffernd_boundaryFaceAreas.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_boundaryFaceAreas.diminfo[0].shape = __pyx_pybuffernd_boundaryFaceAreas.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 427, __pyx_L1_error)
  }
  __pyx_t_8 = 0;
  __pyx_v_boundaryFaceAreas = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "foamSolverWrapper.pyx":428
 * 
 *             boundaryFaceAreas = _np.zeros(nBoundaryFaces)
 *             self.cppFoamLib.get_boundary_face_areas(&boundaryFaceAreas[0], patchName)             # <<<<<<<<<<<<<<
 * 
 *             return boundaryFaceAreas
 */
  __pyx_t_13 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_pybuffernd_boundaryFaceAreas.diminfo[0].shape;
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_boundaryFaceAreas.diminfo[0].shape)) __pyx_t_9 = 0;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 428, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_patchName); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 428, __pyx_L1_error)
  __pyx_v_self->cppFoamLib->get_boundary_face_areas((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_boundaryFaceAreas.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_boundaryFaceAreas.diminfo[0].strides))), __pyx_t_6);

  /* "foamSolverWrapper.pyx":430
 *             self.cppFoamLib.get_boundary_face_areas(&boundaryFaceAreas[0], patchName)
 * 
 *             return boundaryFaceAreas             # <<<<<<<<<<<<<<
 * 
 *       def get_boundary_face_normals(self, patchName="numericalBoundary"):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_boundaryFaceAreas));
  __pyx_r = ((PyObject *)__pyx_v_boundaryFaceAreas);
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":406
 *             return bondFaceCenterCoordinates
 * 
 *       def get_boundary_face_areas(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the areas of the boundary faces for a given patch.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_boundaryFaceAreas.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_boundary_face_areas", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_boundaryFaceAreas.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_boundaryFaceAreas);
  __Pyx_XDECREF(__pyx_v_patchName);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":432
 *             return boundaryFaceAreas
 * 
 *       def get_boundary_face_normals(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the normals of the boundary faces for a given patch.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_41get_boundary_face_normals(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_40get_boundary_face_normals[] = "pyFoamSolver.get_boundary_face_normals(self, patchName=u'numericalBoundary')\nFile: foamSolverWrapper.pyx (starting at line 432)\n\n            Returns the normals of the boundary faces for a given patch.\n\n            Parameters\n            ----------\n            patchName : str, optional\n                  Name of the OpenFOAM boundary patch. Default is \"numericalBoundary\".\n\n            Returns\n            -------\n            ndarray (nBoundaryFaces, 3)\n                  Numpy array containing the normals of the boundary faces.\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_41get_boundary_face_normals = {"get_boundary_face_normals", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_41get_boundary_face_normals, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_40get_boundary_face_normals};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_41get_boundary_face_normals(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_patchName = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_boundary_face_normals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_patchName,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_u_numericalBoundary);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_patchName);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_boundary_face_normals") < 0)) __PYX_ERR(0, 432, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_patchName = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_boundary_face_normals", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 432, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_boundary_face_normals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_40get_boundary_face_normals(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self), __pyx_v_patchName);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_40get_boundary_face_normals(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName) {
  PyObject *__pyx_v_nBoundaryFaces = NULL;
  PyArrayObject *__pyx_v_bondFaceNormals = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_bondFaceNormals;
  __Pyx_Buffer __pyx_pybuffer_bondFaceNormals;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_boundary_face_normals", 0);
  __Pyx_INCREF(__pyx_v_patchName);
  __pyx_pybuffer_bondFaceNormals.pybuffer.buf = NULL;
  __pyx_pybuffer_bondFaceNormals.refcount = 0;
  __pyx_pybuffernd_bondFaceNormals.data = NULL;
  __pyx_pybuffernd_bondFaceNormals.rcbuffer = &__pyx_pybuffer_bondFaceNormals;

  /* "foamSolverWrapper.pyx":446
 *                   Numpy array containing the normals of the boundary faces.
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_patchName); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foamSolverWrapper.pyx":447
 *             """
 *             if isinstance(patchName, str):
 *                   patchName = patchName.encode('utf-8')             # <<<<<<<<<<<<<<
 * 
 *             nBoundaryFaces = self.cppFoamLib.get_number_of_boundary_faces(patchName)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_patchName, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_u_utf_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_utf_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_patchName, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "foamSolverWrapper.pyx":446
 *                   Numpy array containing the normals of the boundary faces.
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  }

  /* "foamSolverWrapper.pyx":449
 *                   patchName = patchName.encode('utf-8')
 * 
 *             nBoundaryFaces = self.cppFoamLib.get_number_of_boundary_faces(patchName)             # <<<<<<<<<<<<<<
 * 
 *             cdef _np.ndarray[_np.float64_t, ndim=1] bondFaceNormals
 */
  __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_patchName); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 449, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->cppFoamLib->get_number_of_boundary_faces(__pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_nBoundaryFaces = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "foamSolverWrapper.pyx":453
 *             cdef _np.ndarray[_np.float64_t, ndim=1] bondFaceNormals
 * 
 *             bondFaceNormals = _np.zeros(nBoundaryFaces*3)             # <<<<<<<<<<<<<<
 *             self.cppFoamLib.get_boundary_face_normals(&bondFaceNormals[0], patchName)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_nBoundaryFaces, __pyx_int_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 453, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_bondFaceNormals.rcbuffer->pybuffer);
    __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_bondFaceNormals.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_9 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_bondFaceNormals.rcbuffer->pybuffer, (PyObject*)__pyx_v_bondFaceNormals, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
    }
    __pyx_pybuffernd_bondFaceNormals.diminfo[0].strides = __pyx_pybuffernd_bondFaceNormals.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_bondFaceNormals.diminfo[0].shape = __pyx_pybuffernd_bondFaceNormals.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 453, __pyx_L1_error)
  }
  __pyx_t_8 = 0;
  __pyx_v_bondFaceNormals = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "foamSolverWrapper.pyx":454
 * 
 *             bondFaceNormals = _np.zeros(nBoundaryFaces*3)
 *             self.cppFoamLib.get_boundary_face_normals(&bondFaceNormals[0], patchName)             # <<<<<<<<<<<<<<
 * 
 *             return bondFaceNormals.reshape(nBoundaryFaces, 3)
 */
  __pyx_t_13 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_pybuffernd_bondFaceNormals.diminfo[0].shape;
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_bondFaceNormals.diminfo[0].shape)) __pyx_t_9 = 0;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 454, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_patchName); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 454, __pyx_L1_error)
  __pyx_v_self->cppFoamLib->get_boundary_face_normals((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_bondFaceNormals.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_bondFaceNormals.diminfo[0].strides))), __pyx_t_6);

  /* "foamSolverWrapper.pyx":456
 *             self.cppFoamLib.get_boundary_face_normals(&bondFaceNormals[0], patchName)
 * 
 *             return bondFaceNormals.reshape(nBoundaryFaces, 3)             # <<<<<<<<<<<<<<
 * 
 *       def get_boundary_cell_center_coordinates(self, patchName="numericalBoundary"):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_bondFaceNormals), __pyx_n_s_reshape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_nBoundaryFaces, __pyx_int_3};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 456, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_nBoundaryFaces, __pyx_int_3};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 456, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_nBoundaryFaces);
    __Pyx_GIVEREF(__pyx_v_nBoundaryFaces);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_9, __pyx_v_nBoundaryFaces);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_9, __pyx_int_3);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":432
 *             return boundaryFaceAreas
 * 
 *       def get_boundary_face_normals(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the normals of the boundary faces for a given patch.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_bondFaceNormals.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_boundary_face_normals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_bondFaceNormals.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_nBoundaryFaces);
  __Pyx_XDECREF((PyObject *)__pyx_v_bondFaceNormals);
  __Pyx_XDECREF(__pyx_v_patchName);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":458
 *             return bondFaceNormals.reshape(nBoundaryFaces, 3)
 * 
 *       def get_boundary_cell_center_coordinates(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the coordinates of the boundary cell centers for a given patch.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_43get_boundary_cell_center_coordinates(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_42get_boundary_cell_center_coordinates[] = "pyFoamSolver.get_boundary_cell_center_coordinates(self, patchName=u'numericalBoundary')\nFile: foamSolverWrapper.pyx (starting at line 458)\n\n            Returns the coordinates of the boundary cell centers for a given patch.\n\n            Parameters\n            ----------\n            patchName : str, optional\n                  Name of the OpenFOAM boundary patch. Default is \"numericalBoundary\".\n\n            Returns\n            -------\n            ndarray (nBoundaryFaces, 3)\n                  Numpy array containing the coordinates of the boundary cell centers.\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_43get_boundary_cell_center_coordinates = {"get_boundary_cell_center_coordinates", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_43get_boundary_cell_center_coordinates, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_42get_boundary_cell_center_coordinates};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_43get_boundary_cell_center_coordinates(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_patchName = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_boundary_cell_center_coordinates (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_patchName,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_u_numericalBoundary);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_patchName);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_boundary_cell_center_coordinates") < 0)) __PYX_ERR(0, 458, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_patchName = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_boundary_cell_center_coordinates", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 458, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_boundary_cell_center_coordinates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_42get_boundary_cell_center_coordinates(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self), __pyx_v_patchName);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_42get_boundary_cell_center_coordinates(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName) {
  PyObject *__pyx_v_nBoundaryFaces = NULL;
  PyArrayObject *__pyx_v_cellXYZ = 0;
  PyObject *__pyx_v_bondCellCenterCoordinates = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cellXYZ;
  __Pyx_Buffer __pyx_pybuffer_cellXYZ;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_boundary_cell_center_coordinates", 0);
  __Pyx_INCREF(__pyx_v_patchName);
  __pyx_pybuffer_cellXYZ.pybuffer.buf = NULL;
  __pyx_pybuffer_cellXYZ.refcount = 0;
  __pyx_pybuffernd_cellXYZ.data = NULL;
  __pyx_pybuffernd_cellXYZ.rcbuffer = &__pyx_pybuffer_cellXYZ;

  /* "foamSolverWrapper.pyx":472
 *                   Numpy array containing the coordinates of the boundary cell centers.
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_patchName); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foamSolverWrapper.pyx":473
 *             """
 *             if isinstance(patchName, str):
 *                   patchName = patchName.encode('utf-8')             # <<<<<<<<<<<<<<
 * 
 *             nBoundaryFaces = self.cppFoamLib.get_number_of_boundary_faces(patchName)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_patchName, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_u_utf_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_utf_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_patchName, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "foamSolverWrapper.pyx":472
 *                   Numpy array containing the coordinates of the boundary cell centers.
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  }

  /* "foamSolverWrapper.pyx":475
 *                   patchName = patchName.encode('utf-8')
 * 
 *             nBoundaryFaces = self.cppFoamLib.get_number_of_boundary_faces(patchName)             # <<<<<<<<<<<<<<
 * 
 *             cdef _np.ndarray[_np.float64_t, ndim=1] cellXYZ
 */
  __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_patchName); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->cppFoamLib->get_number_of_boundary_faces(__pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_nBoundaryFaces = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "foamSolverWrapper.pyx":479
 *             cdef _np.ndarray[_np.float64_t, ndim=1] cellXYZ
 * 
 *             cellXYZ = _np.zeros(nBoundaryFaces*3)             # <<<<<<<<<<<<<<
 *             self.cppFoamLib.get_boundary_cell_center_coordinates(&cellXYZ[0], patchName)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_nBoundaryFaces, __pyx_int_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 479, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cellXYZ.rcbuffer->pybuffer);
    __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cellXYZ.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_9 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cellXYZ.rcbuffer->pybuffer, (PyObject*)__pyx_v_cellXYZ, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
    }
    __pyx_pybuffernd_cellXYZ.diminfo[0].strides = __pyx_pybuffernd_cellXYZ.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cellXYZ.diminfo[0].shape = __pyx_pybuffernd_cellXYZ.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 479, __pyx_L1_error)
  }
  __pyx_t_8 = 0;
  __pyx_v_cellXYZ = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "foamSolverWrapper.pyx":480
 * 
 *             cellXYZ = _np.zeros(nBoundaryFaces*3)
 *             self.cppFoamLib.get_boundary_cell_center_coordinates(&cellXYZ[0], patchName)             # <<<<<<<<<<<<<<
 * 
 *             bondCellCenterCoordinates = cellXYZ.reshape(nBoundaryFaces, 3)
 */
  __pyx_t_13 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_pybuffernd_cellXYZ.diminfo[0].shape;
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_cellXYZ.diminfo[0].shape)) __pyx_t_9 = 0;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 480, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_patchName); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 480, __pyx_L1_error)
  __pyx_v_self->cppFoamLib->get_boundary_cell_center_coordinates((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_cellXYZ.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_cellXYZ.diminfo[0].strides))), __pyx_t_6);

  /* "foamSolverWrapper.pyx":482
 *             self.cppFoamLib.get_boundary_cell_center_coordinates(&cellXYZ[0], patchName)
 * 
 *             bondCellCenterCoordinates = cellXYZ.reshape(nBoundaryFaces, 3)             # <<<<<<<<<<<<<<
 * 
 *             return bondCellCenterCoordinates
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_cellXYZ), __pyx_n_s_reshape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_nBoundaryFaces, __pyx_int_3};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 482, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_nBoundaryFaces, __pyx_int_3};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 482, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 482, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_nBoundaryFaces);
    __Pyx_GIVEREF(__pyx_v_nBoundaryFaces);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_9, __pyx_v_nBoundaryFaces);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_9, __pyx_int_3);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 482, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_bondCellCenterCoordinates = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "foamSolverWrapper.pyx":484
 *             bondCellCenterCoordinates = cellXYZ.reshape(nBoundaryFaces, 3)
 * 
 *             return bondCellCenterCoordinates             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_bondCellCenterCoordinates);
  __pyx_r = __pyx_v_bondCellCenterCoordinates;
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":458
 *             return bondFaceNormals.reshape(nBoundaryFaces, 3)
 * 
 *       def get_boundary_cell_center_coordinates(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the coordinates of the boundary cell centers for a given patch.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cellXYZ.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_boundary_cell_center_coordinates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cellXYZ.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_nBoundaryFaces);
  __Pyx_XDECREF((PyObject *)__pyx_v_cellXYZ);
  __Pyx_XDECREF(__pyx_v_bondCellCenterCoordinates);
  __Pyx_XDECREF(__pyx_v_patchName);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":488
 * 
 *       # Field Access Methods
 *       def get_velocity_field(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the velocity field as a NumPy array.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_45get_velocity_field(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_44get_velocity_field[] = "pyFoamSolver.get_velocity_field(self)\nFile: foamSolverWrapper.pyx (starting at line 488)\n\n            Returns the velocity field as a NumPy array.\n\n            Returns\n            -------\n            velocity : ndarray (3 * nCells,)\n                  Velocity field as a flattened NumPy array (vx, vy, vz).\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_45get_velocity_field = {"get_velocity_field", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_45get_velocity_field, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_44get_velocity_field};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_45get_velocity_field(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_velocity_field (wrapper)", 0);
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_44get_velocity_field(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_44get_velocity_field(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self) {
  PyArrayObject *__pyx_v_velocity = 0;
  PyObject *__pyx_v_num_cells = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_velocity;
  __Pyx_Buffer __pyx_pybuffer_velocity;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_velocity_field", 0);
  __pyx_pybuffer_velocity.pybuffer.buf = NULL;
  __pyx_pybuffer_velocity.refcount = 0;
  __pyx_pybuffernd_velocity.data = NULL;
  __pyx_pybuffernd_velocity.rcbuffer = &__pyx_pybuffer_velocity;

  /* "foamSolverWrapper.pyx":498
 *             """
 *             cdef _np.ndarray[_np.float64_t, ndim=1] velocity
 *             num_cells = self.get_number_of_cells()             # <<<<<<<<<<<<<<
 *             velocity = _np.zeros(3 * num_cells, dtype=_np.float64)
 *             self.cppFoamLib.get_velocity_field(&velocity[0])
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_number_of_cells); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_num_cells = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":499
 *             cdef _np.ndarray[_np.float64_t, ndim=1] velocity
 *             num_cells = self.get_number_of_cells()
 *             velocity = _np.zeros(3 * num_cells, dtype=_np.float64)             # <<<<<<<<<<<<<<
 *             self.cppFoamLib.get_velocity_field(&velocity[0])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_int_3, __pyx_v_num_cells); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 499, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_velocity.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_velocity.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_velocity.rcbuffer->pybuffer, (PyObject*)__pyx_v_velocity, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
      __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
    }
    __pyx_pybuffernd_velocity.diminfo[0].strides = __pyx_pybuffernd_velocity.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_velocity.diminfo[0].shape = __pyx_pybuffernd_velocity.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 499, __pyx_L1_error)
  }
  __pyx_t_6 = 0;
  __pyx_v_velocity = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "foamSolverWrapper.pyx":500
 *             num_cells = self.get_number_of_cells()
 *             velocity = _np.zeros(3 * num_cells, dtype=_np.float64)
 *             self.cppFoamLib.get_velocity_field(&velocity[0])             # <<<<<<<<<<<<<<
 * 
 *             return velocity
 */
  __pyx_t_11 = 0;
  __pyx_t_7 = -1;
  if (__pyx_t_11 < 0) {
    __pyx_t_11 += __pyx_pybuffernd_velocity.diminfo[0].shape;
    if (unlikely(__pyx_t_11 < 0)) __pyx_t_7 = 0;
  } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_velocity.diminfo[0].shape)) __pyx_t_7 = 0;
  if (unlikely(__pyx_t_7 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_7);
    __PYX_ERR(0, 500, __pyx_L1_error)
  }
  __pyx_v_self->cppFoamLib->get_velocity_field((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_velocity.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_velocity.diminfo[0].strides))));

  /* "foamSolverWrapper.pyx":502
 *             self.cppFoamLib.get_velocity_field(&velocity[0])
 * 
 *             return velocity             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_velocity));
  __pyx_r = ((PyObject *)__pyx_v_velocity);
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":488
 * 
 *       # Field Access Methods
 *       def get_velocity_field(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the velocity field as a NumPy array.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_velocity.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_velocity_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_velocity.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_velocity);
  __Pyx_XDECREF(__pyx_v_num_cells);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":506
 * 
 * 
 *       def get_velocity_boundary_field(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the velocity boundary field.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_47get_velocity_boundary_field(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_46get_velocity_boundary_field[] = "pyFoamSolver.get_velocity_boundary_field(self, patchName=u'numericalBoundary')\nFile: foamSolverWrapper.pyx (starting at line 506)\n\n            Retrieve the velocity boundary field.\n\n            Parameters\n            ----------\n            patchName : str, optional\n                  Name of the OpenFOAM boundary patch (default: \"numericalBoundary\").\n\n            Returns\n            -------\n            velocity : ndarray (3 * nBoundaryFaces,)\n                  Velocity boundary field as a flattened NumPy array (vxb, vyb, vzb).\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_47get_velocity_boundary_field = {"get_velocity_boundary_field", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_47get_velocity_boundary_field, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_46get_velocity_boundary_field};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_47get_velocity_boundary_field(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_patchName = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_velocity_boundary_field (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_patchName,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_u_numericalBoundary);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_patchName);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_velocity_boundary_field") < 0)) __PYX_ERR(0, 506, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_patchName = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_velocity_boundary_field", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 506, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_velocity_boundary_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_46get_velocity_boundary_field(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self), __pyx_v_patchName);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_46get_velocity_boundary_field(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName) {
  PyArrayObject *__pyx_v_velocity = 0;
  PyObject *__pyx_v_num_boundary_faces = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_velocity;
  __Pyx_Buffer __pyx_pybuffer_velocity;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_velocity_boundary_field", 0);
  __Pyx_INCREF(__pyx_v_patchName);
  __pyx_pybuffer_velocity.pybuffer.buf = NULL;
  __pyx_pybuffer_velocity.refcount = 0;
  __pyx_pybuffernd_velocity.data = NULL;
  __pyx_pybuffernd_velocity.rcbuffer = &__pyx_pybuffer_velocity;

  /* "foamSolverWrapper.pyx":520
 *                   Velocity boundary field as a flattened NumPy array (vxb, vyb, vzb).
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_patchName); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foamSolverWrapper.pyx":521
 *             """
 *             if isinstance(patchName, str):
 *                   patchName = patchName.encode('utf-8')             # <<<<<<<<<<<<<<
 * 
 *             cdef _np.ndarray[_np.float64_t, ndim=1] velocity
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_patchName, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 521, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_u_utf_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_utf_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 521, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_patchName, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "foamSolverWrapper.pyx":520
 *                   Velocity boundary field as a flattened NumPy array (vxb, vyb, vzb).
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  }

  /* "foamSolverWrapper.pyx":525
 *             cdef _np.ndarray[_np.float64_t, ndim=1] velocity
 * 
 *             num_boundary_faces = self.get_number_of_boundary_faces(patchName)  # Assumes this method exists             # <<<<<<<<<<<<<<
 *             velocity = _np.zeros(3 * num_boundary_faces, dtype=_np.float64)
 *             self.cppFoamLib.get_velocity_boundary_field(&velocity[0], patchName)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_number_of_boundary_faces); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_patchName) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_patchName);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_num_boundary_faces = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "foamSolverWrapper.pyx":526
 * 
 *             num_boundary_faces = self.get_number_of_boundary_faces(patchName)  # Assumes this method exists
 *             velocity = _np.zeros(3 * num_boundary_faces, dtype=_np.float64)             # <<<<<<<<<<<<<<
 *             self.cppFoamLib.get_velocity_boundary_field(&velocity[0], patchName)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Multiply(__pyx_int_3, __pyx_v_num_boundary_faces); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_float64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 526, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_7);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_velocity.rcbuffer->pybuffer);
    __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_velocity.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_9 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_velocity.rcbuffer->pybuffer, (PyObject*)__pyx_v_velocity, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
    }
    __pyx_pybuffernd_velocity.diminfo[0].strides = __pyx_pybuffernd_velocity.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_velocity.diminfo[0].shape = __pyx_pybuffernd_velocity.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 526, __pyx_L1_error)
  }
  __pyx_t_8 = 0;
  __pyx_v_velocity = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "foamSolverWrapper.pyx":527
 *             num_boundary_faces = self.get_number_of_boundary_faces(patchName)  # Assumes this method exists
 *             velocity = _np.zeros(3 * num_boundary_faces, dtype=_np.float64)
 *             self.cppFoamLib.get_velocity_boundary_field(&velocity[0], patchName)             # <<<<<<<<<<<<<<
 * 
 *             return velocity
 */
  __pyx_t_13 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_pybuffernd_velocity.diminfo[0].shape;
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_velocity.diminfo[0].shape)) __pyx_t_9 = 0;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 527, __pyx_L1_error)
  }
  __pyx_t_14 = __Pyx_PyObject_AsWritableString(__pyx_v_patchName); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) __PYX_ERR(0, 527, __pyx_L1_error)
  __pyx_v_self->cppFoamLib->get_velocity_boundary_field((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_velocity.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_velocity.diminfo[0].strides))), __pyx_t_14);

  /* "foamSolverWrapper.pyx":529
 *             self.cppFoamLib.get_velocity_boundary_field(&velocity[0], patchName)
 * 
 *             return velocity             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_velocity));
  __pyx_r = ((PyObject *)__pyx_v_velocity);
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":506
 * 
 * 
 *       def get_velocity_boundary_field(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the velocity boundary field.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_velocity.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_velocity_boundary_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_velocity.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_velocity);
  __Pyx_XDECREF(__pyx_v_num_boundary_faces);
  __Pyx_XDECREF(__pyx_v_patchName);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":532
 * 
 * 
 *       def get_pressure_field(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the pressure field.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_49get_pressure_field(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_48get_pressure_field[] = "pyFoamSolver.get_pressure_field(self)\nFile: foamSolverWrapper.pyx (starting at line 532)\n\n            Returns the pressure field.\n\n            Returns\n            -------\n            pressure : ndarray (nCells,)\n                  Pressure field as a NumPy array.\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_49get_pressure_field = {"get_pressure_field", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_49get_pressure_field, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_48get_pressure_field};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_49get_pressure_field(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_pressure_field (wrapper)", 0);
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_48get_pressure_field(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_48get_pressure_field(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self) {
  PyArrayObject *__pyx_v_pressure = 0;
  PyObject *__pyx_v_num_cells = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pressure;
  __Pyx_Buffer __pyx_pybuffer_pressure;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_pressure_field", 0);
  __pyx_pybuffer_pressure.pybuffer.buf = NULL;
  __pyx_pybuffer_pressure.refcount = 0;
  __pyx_pybuffernd_pressure.data = NULL;
  __pyx_pybuffernd_pressure.rcbuffer = &__pyx_pybuffer_pressure;

  /* "foamSolverWrapper.pyx":543
 *             cdef _np.ndarray[_np.float64_t, ndim=1] pressure
 * 
 *             num_cells = self.get_number_of_cells()             # <<<<<<<<<<<<<<
 *             pressure = _np.zeros(num_cells, dtype=_np.float64)
 *             self.cppFoamLib.get_pressure_field(&pressure[0])
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_number_of_cells); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_num_cells = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":544
 * 
 *             num_cells = self.get_number_of_cells()
 *             pressure = _np.zeros(num_cells, dtype=_np.float64)             # <<<<<<<<<<<<<<
 *             self.cppFoamLib.get_pressure_field(&pressure[0])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_num_cells);
  __Pyx_GIVEREF(__pyx_v_num_cells);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_num_cells);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 544, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pressure.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pressure.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pressure.rcbuffer->pybuffer, (PyObject*)__pyx_v_pressure, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
      __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
    }
    __pyx_pybuffernd_pressure.diminfo[0].strides = __pyx_pybuffernd_pressure.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pressure.diminfo[0].shape = __pyx_pybuffernd_pressure.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 544, __pyx_L1_error)
  }
  __pyx_t_6 = 0;
  __pyx_v_pressure = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "foamSolverWrapper.pyx":545
 *             num_cells = self.get_number_of_cells()
 *             pressure = _np.zeros(num_cells, dtype=_np.float64)
 *             self.cppFoamLib.get_pressure_field(&pressure[0])             # <<<<<<<<<<<<<<
 * 
 *             return pressure
 */
  __pyx_t_11 = 0;
  __pyx_t_7 = -1;
  if (__pyx_t_11 < 0) {
    __pyx_t_11 += __pyx_pybuffernd_pressure.diminfo[0].shape;
    if (unlikely(__pyx_t_11 < 0)) __pyx_t_7 = 0;
  } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_pressure.diminfo[0].shape)) __pyx_t_7 = 0;
  if (unlikely(__pyx_t_7 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_7);
    __PYX_ERR(0, 545, __pyx_L1_error)
  }
  __pyx_v_self->cppFoamLib->get_pressure_field((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_pressure.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_pressure.diminfo[0].strides))));

  /* "foamSolverWrapper.pyx":547
 *             self.cppFoamLib.get_pressure_field(&pressure[0])
 * 
 *             return pressure             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_pressure));
  __pyx_r = ((PyObject *)__pyx_v_pressure);
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":532
 * 
 * 
 *       def get_pressure_field(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the pressure field.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pressure.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_pressure_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pressure.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pressure);
  __Pyx_XDECREF(__pyx_v_num_cells);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":550
 * 
 * 
 *       def get_velocity_gradient(self):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the velocity gradient field.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_51get_velocity_gradient(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_50get_velocity_gradient[] = "pyFoamSolver.get_velocity_gradient(self)\nFile: foamSolverWrapper.pyx (starting at line 550)\n\n            Retrieve the velocity gradient field.\n\n            This version eliminates the need for passing an external ndarray as a parameter\n            by managing the storage internally.\n\n            Returns\n            -------\n            ndarray (9 * nCells,)\n                  The velocity gradient field.\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_51get_velocity_gradient = {"get_velocity_gradient", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_51get_velocity_gradient, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_50get_velocity_gradient};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_51get_velocity_gradient(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_velocity_gradient (wrapper)", 0);
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_50get_velocity_gradient(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_50get_velocity_gradient(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self) {
  PyArrayObject *__pyx_v_velocity_gradient = 0;
  PyObject *__pyx_v_num_cells = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_velocity_gradient;
  __Pyx_Buffer __pyx_pybuffer_velocity_gradient;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_velocity_gradient", 0);
  __pyx_pybuffer_velocity_gradient.pybuffer.buf = NULL;
  __pyx_pybuffer_velocity_gradient.refcount = 0;
  __pyx_pybuffernd_velocity_gradient.data = NULL;
  __pyx_pybuffernd_velocity_gradient.rcbuffer = &__pyx_pybuffer_velocity_gradient;

  /* "foamSolverWrapper.pyx":564
 *             cdef _np.ndarray[_np.float64_t, ndim=1] velocity_gradient
 * 
 *             num_cells = self.get_number_of_cells()             # <<<<<<<<<<<<<<
 *             velocity_gradient = _np.zeros(num_cells * 9, dtype=_np.float64)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_number_of_cells); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_num_cells = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":565
 * 
 *             num_cells = self.get_number_of_cells()
 *             velocity_gradient = _np.zeros(num_cells * 9, dtype=_np.float64)             # <<<<<<<<<<<<<<
 * 
 *             # Fetch the velocity gradient field from the C++ library and store it in the array.
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_num_cells, __pyx_int_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 565, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_velocity_gradient.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_velocity_gradient.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_velocity_gradient.rcbuffer->pybuffer, (PyObject*)__pyx_v_velocity_gradient, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
      __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
    }
    __pyx_pybuffernd_velocity_gradient.diminfo[0].strides = __pyx_pybuffernd_velocity_gradient.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_velocity_gradient.diminfo[0].shape = __pyx_pybuffernd_velocity_gradient.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 565, __pyx_L1_error)
  }
  __pyx_t_6 = 0;
  __pyx_v_velocity_gradient = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "foamSolverWrapper.pyx":568
 * 
 *             # Fetch the velocity gradient field from the C++ library and store it in the array.
 *             self.cppFoamLib.get_velocity_gradient(&velocity_gradient[0])             # <<<<<<<<<<<<<<
 * 
 *             # Return the gradient to the caller
 */
  __pyx_t_11 = 0;
  __pyx_t_7 = -1;
  if (__pyx_t_11 < 0) {
    __pyx_t_11 += __pyx_pybuffernd_velocity_gradient.diminfo[0].shape;
    if (unlikely(__pyx_t_11 < 0)) __pyx_t_7 = 0;
  } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_velocity_gradient.diminfo[0].shape)) __pyx_t_7 = 0;
  if (unlikely(__pyx_t_7 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_7);
    __PYX_ERR(0, 568, __pyx_L1_error)
  }
  __pyx_v_self->cppFoamLib->get_velocity_gradient((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_velocity_gradient.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_velocity_gradient.diminfo[0].strides))));

  /* "foamSolverWrapper.pyx":571
 * 
 *             # Return the gradient to the caller
 *             return velocity_gradient             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_velocity_gradient));
  __pyx_r = ((PyObject *)__pyx_v_velocity_gradient);
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":550
 * 
 * 
 *       def get_velocity_gradient(self):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the velocity gradient field.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_velocity_gradient.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_velocity_gradient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_velocity_gradient.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_velocity_gradient);
  __Pyx_XDECREF(__pyx_v_num_cells);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":574
 * 
 * 
 *       def get_velocity_gradient_boundary_field(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the velocity gradient boundary field.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_53get_velocity_gradient_boundary_field(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_52get_velocity_gradient_boundary_field[] = "pyFoamSolver.get_velocity_gradient_boundary_field(self, patchName=u'numericalBoundary')\nFile: foamSolverWrapper.pyx (starting at line 574)\n\n            Retrieve the velocity gradient boundary field.\n\n            Parameters\n            ----------\n            patchName : str, optional\n                  Name of the OpenFOAM boundary patch (default: \"numericalBoundary\").\n\n            Returns\n            -------\n            velocityGradient : ndarray (9 * nBoundaryFaces,)\n                  Velocity gradient boundary field as a flattened NumPy array.\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_53get_velocity_gradient_boundary_field = {"get_velocity_gradient_boundary_field", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_53get_velocity_gradient_boundary_field, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_52get_velocity_gradient_boundary_field};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_53get_velocity_gradient_boundary_field(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_patchName = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_velocity_gradient_boundary_field (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_patchName,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_u_numericalBoundary);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_patchName);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_velocity_gradient_boundary_field") < 0)) __PYX_ERR(0, 574, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_patchName = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_velocity_gradient_boundary_field", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 574, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_velocity_gradient_boundary_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_52get_velocity_gradient_boundary_field(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self), __pyx_v_patchName);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_52get_velocity_gradient_boundary_field(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName) {
  PyArrayObject *__pyx_v_velocity_gradient = 0;
  PyObject *__pyx_v_num_boundary_faces = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_velocity_gradient;
  __Pyx_Buffer __pyx_pybuffer_velocity_gradient;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_velocity_gradient_boundary_field", 0);
  __Pyx_INCREF(__pyx_v_patchName);
  __pyx_pybuffer_velocity_gradient.pybuffer.buf = NULL;
  __pyx_pybuffer_velocity_gradient.refcount = 0;
  __pyx_pybuffernd_velocity_gradient.data = NULL;
  __pyx_pybuffernd_velocity_gradient.rcbuffer = &__pyx_pybuffer_velocity_gradient;

  /* "foamSolverWrapper.pyx":588
 *                   Velocity gradient boundary field as a flattened NumPy array.
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_patchName); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foamSolverWrapper.pyx":589
 *             """
 *             if isinstance(patchName, str):
 *                   patchName = patchName.encode('utf-8')             # <<<<<<<<<<<<<<
 * 
 *             cdef _np.ndarray[_np.float64_t, ndim=1] velocity_gradient
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_patchName, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 589, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_u_utf_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_utf_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 589, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_patchName, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "foamSolverWrapper.pyx":588
 *                   Velocity gradient boundary field as a flattened NumPy array.
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  }

  /* "foamSolverWrapper.pyx":593
 *             cdef _np.ndarray[_np.float64_t, ndim=1] velocity_gradient
 * 
 *             num_boundary_faces = self.get_number_of_boundary_faces(patchName)             # <<<<<<<<<<<<<<
 *             velocity_gradient =_np.zeros(9 * num_boundary_faces, dtype=_np.float64)
 *             self.cppFoamLib.get_velocity_gradient_boundary_field(&velocity_gradient[0], patchName)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_number_of_boundary_faces); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_patchName) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_patchName);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_num_boundary_faces = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "foamSolverWrapper.pyx":594
 * 
 *             num_boundary_faces = self.get_number_of_boundary_faces(patchName)
 *             velocity_gradient =_np.zeros(9 * num_boundary_faces, dtype=_np.float64)             # <<<<<<<<<<<<<<
 *             self.cppFoamLib.get_velocity_gradient_boundary_field(&velocity_gradient[0], patchName)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Multiply(__pyx_int_9, __pyx_v_num_boundary_faces); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_float64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 594, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_7);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_velocity_gradient.rcbuffer->pybuffer);
    __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_velocity_gradient.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_9 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_velocity_gradient.rcbuffer->pybuffer, (PyObject*)__pyx_v_velocity_gradient, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
    }
    __pyx_pybuffernd_velocity_gradient.diminfo[0].strides = __pyx_pybuffernd_velocity_gradient.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_velocity_gradient.diminfo[0].shape = __pyx_pybuffernd_velocity_gradient.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 594, __pyx_L1_error)
  }
  __pyx_t_8 = 0;
  __pyx_v_velocity_gradient = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "foamSolverWrapper.pyx":595
 *             num_boundary_faces = self.get_number_of_boundary_faces(patchName)
 *             velocity_gradient =_np.zeros(9 * num_boundary_faces, dtype=_np.float64)
 *             self.cppFoamLib.get_velocity_gradient_boundary_field(&velocity_gradient[0], patchName)             # <<<<<<<<<<<<<<
 * 
 *             return velocity_gradient
 */
  __pyx_t_13 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_pybuffernd_velocity_gradient.diminfo[0].shape;
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_velocity_gradient.diminfo[0].shape)) __pyx_t_9 = 0;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 595, __pyx_L1_error)
  }
  __pyx_t_14 = __Pyx_PyObject_AsWritableString(__pyx_v_patchName); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) __PYX_ERR(0, 595, __pyx_L1_error)
  __pyx_v_self->cppFoamLib->get_velocity_gradient_boundary_field((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_velocity_gradient.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_velocity_gradient.diminfo[0].strides))), __pyx_t_14);

  /* "foamSolverWrapper.pyx":597
 *             self.cppFoamLib.get_velocity_gradient_boundary_field(&velocity_gradient[0], patchName)
 * 
 *             return velocity_gradient             # <<<<<<<<<<<<<<
 * 
 *       def get_pressure_gradient_field(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_velocity_gradient));
  __pyx_r = ((PyObject *)__pyx_v_velocity_gradient);
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":574
 * 
 * 
 *       def get_velocity_gradient_boundary_field(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the velocity gradient boundary field.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_velocity_gradient.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_velocity_gradient_boundary_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_velocity_gradient.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_velocity_gradient);
  __Pyx_XDECREF(__pyx_v_num_boundary_faces);
  __Pyx_XDECREF(__pyx_v_patchName);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":599
 *             return velocity_gradient
 * 
 *       def get_pressure_gradient_field(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the pressure gradient field.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_55get_pressure_gradient_field(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_54get_pressure_gradient_field[] = "pyFoamSolver.get_pressure_gradient_field(self)\nFile: foamSolverWrapper.pyx (starting at line 599)\n\n            Returns the pressure gradient field.\n\n            Returns\n            -------\n            pressureGradient : ndarray (3 * nCells,)\n                  Pressure gradient field as a flattened NumPy array.\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_55get_pressure_gradient_field = {"get_pressure_gradient_field", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_55get_pressure_gradient_field, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_54get_pressure_gradient_field};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_55get_pressure_gradient_field(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_pressure_gradient_field (wrapper)", 0);
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_54get_pressure_gradient_field(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_54get_pressure_gradient_field(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self) {
  PyArrayObject *__pyx_v_pressure_gradient = 0;
  PyObject *__pyx_v_num_cells = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pressure_gradient;
  __Pyx_Buffer __pyx_pybuffer_pressure_gradient;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_pressure_gradient_field", 0);
  __pyx_pybuffer_pressure_gradient.pybuffer.buf = NULL;
  __pyx_pybuffer_pressure_gradient.refcount = 0;
  __pyx_pybuffernd_pressure_gradient.data = NULL;
  __pyx_pybuffernd_pressure_gradient.rcbuffer = &__pyx_pybuffer_pressure_gradient;

  /* "foamSolverWrapper.pyx":609
 *             """
 *             cdef _np.ndarray[_np.float64_t, ndim=1] pressure_gradient
 *             num_cells = self.get_number_of_cells()             # <<<<<<<<<<<<<<
 *             pressure_gradient =_np.zeros(3 * num_cells, dtype=_np.float64)
 *             self.cppFoamLib.get_pressure_gradient_field(&pressure_gradient[0])
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_number_of_cells); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_num_cells = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":610
 *             cdef _np.ndarray[_np.float64_t, ndim=1] pressure_gradient
 *             num_cells = self.get_number_of_cells()
 *             pressure_gradient =_np.zeros(3 * num_cells, dtype=_np.float64)             # <<<<<<<<<<<<<<
 *             self.cppFoamLib.get_pressure_gradient_field(&pressure_gradient[0])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_int_3, __pyx_v_num_cells); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 610, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pressure_gradient.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pressure_gradient.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pressure_gradient.rcbuffer->pybuffer, (PyObject*)__pyx_v_pressure_gradient, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
      __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
    }
    __pyx_pybuffernd_pressure_gradient.diminfo[0].strides = __pyx_pybuffernd_pressure_gradient.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pressure_gradient.diminfo[0].shape = __pyx_pybuffernd_pressure_gradient.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 610, __pyx_L1_error)
  }
  __pyx_t_6 = 0;
  __pyx_v_pressure_gradient = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "foamSolverWrapper.pyx":611
 *             num_cells = self.get_number_of_cells()
 *             pressure_gradient =_np.zeros(3 * num_cells, dtype=_np.float64)
 *             self.cppFoamLib.get_pressure_gradient_field(&pressure_gradient[0])             # <<<<<<<<<<<<<<
 * 
 *             return pressure_gradient
 */
  __pyx_t_11 = 0;
  __pyx_t_7 = -1;
  if (__pyx_t_11 < 0) {
    __pyx_t_11 += __pyx_pybuffernd_pressure_gradient.diminfo[0].shape;
    if (unlikely(__pyx_t_11 < 0)) __pyx_t_7 = 0;
  } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_pressure_gradient.diminfo[0].shape)) __pyx_t_7 = 0;
  if (unlikely(__pyx_t_7 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_7);
    __PYX_ERR(0, 611, __pyx_L1_error)
  }
  __pyx_v_self->cppFoamLib->get_pressure_gradient_field((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_pressure_gradient.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_pressure_gradient.diminfo[0].strides))));

  /* "foamSolverWrapper.pyx":613
 *             self.cppFoamLib.get_pressure_gradient_field(&pressure_gradient[0])
 * 
 *             return pressure_gradient             # <<<<<<<<<<<<<<
 * 
 *       def get_pressure_boundary_field(self, patchName="numericalBoundary"):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_pressure_gradient));
  __pyx_r = ((PyObject *)__pyx_v_pressure_gradient);
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":599
 *             return velocity_gradient
 * 
 *       def get_pressure_gradient_field(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the pressure gradient field.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pressure_gradient.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_pressure_gradient_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pressure_gradient.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pressure_gradient);
  __Pyx_XDECREF(__pyx_v_num_cells);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":615
 *             return pressure_gradient
 * 
 *       def get_pressure_boundary_field(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the pressure boundary field.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_57get_pressure_boundary_field(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_56get_pressure_boundary_field[] = "pyFoamSolver.get_pressure_boundary_field(self, patchName=u'numericalBoundary')\nFile: foamSolverWrapper.pyx (starting at line 615)\n\n            Retrieve the pressure boundary field.\n\n            Parameters\n            ----------\n            patchName : str, optional\n                  Name of the OpenFOAM boundary patch (default: \"numericalBoundary\").\n\n            Returns\n            -------\n            pressure : ndarray (nBoundaryFaces,)\n                  Pressure boundary field as a NumPy array.\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_57get_pressure_boundary_field = {"get_pressure_boundary_field", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_57get_pressure_boundary_field, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_56get_pressure_boundary_field};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_57get_pressure_boundary_field(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_patchName = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_pressure_boundary_field (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_patchName,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_u_numericalBoundary);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_patchName);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_pressure_boundary_field") < 0)) __PYX_ERR(0, 615, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_patchName = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_pressure_boundary_field", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 615, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_pressure_boundary_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_56get_pressure_boundary_field(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self), __pyx_v_patchName);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_56get_pressure_boundary_field(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName) {
  PyArrayObject *__pyx_v_pressure = 0;
  PyObject *__pyx_v_num_boundary_faces = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pressure;
  __Pyx_Buffer __pyx_pybuffer_pressure;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_pressure_boundary_field", 0);
  __Pyx_INCREF(__pyx_v_patchName);
  __pyx_pybuffer_pressure.pybuffer.buf = NULL;
  __pyx_pybuffer_pressure.refcount = 0;
  __pyx_pybuffernd_pressure.data = NULL;
  __pyx_pybuffernd_pressure.rcbuffer = &__pyx_pybuffer_pressure;

  /* "foamSolverWrapper.pyx":629
 *                   Pressure boundary field as a NumPy array.
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_patchName); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foamSolverWrapper.pyx":630
 *             """
 *             if isinstance(patchName, str):
 *                   patchName = patchName.encode('utf-8')             # <<<<<<<<<<<<<<
 * 
 *             cdef _np.ndarray[_np.float64_t, ndim=1] pressure
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_patchName, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 630, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_u_utf_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_utf_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 630, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_patchName, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "foamSolverWrapper.pyx":629
 *                   Pressure boundary field as a NumPy array.
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  }

  /* "foamSolverWrapper.pyx":633
 * 
 *             cdef _np.ndarray[_np.float64_t, ndim=1] pressure
 *             num_boundary_faces = self.get_number_of_boundary_faces(patchName)             # <<<<<<<<<<<<<<
 *             pressure =_np.zeros(num_boundary_faces, dtype=_np.float64)
 *             self.cppFoamLib.get_pressure_boundary_field(&pressure[0], patchName)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_number_of_boundary_faces); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_patchName) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_patchName);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_num_boundary_faces = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "foamSolverWrapper.pyx":634
 *             cdef _np.ndarray[_np.float64_t, ndim=1] pressure
 *             num_boundary_faces = self.get_number_of_boundary_faces(patchName)
 *             pressure =_np.zeros(num_boundary_faces, dtype=_np.float64)             # <<<<<<<<<<<<<<
 *             self.cppFoamLib.get_pressure_boundary_field(&pressure[0], patchName)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_num_boundary_faces);
  __Pyx_GIVEREF(__pyx_v_num_boundary_faces);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_num_boundary_faces);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_float64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 634, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_7);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pressure.rcbuffer->pybuffer);
    __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pressure.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_9 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pressure.rcbuffer->pybuffer, (PyObject*)__pyx_v_pressure, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
    }
    __pyx_pybuffernd_pressure.diminfo[0].strides = __pyx_pybuffernd_pressure.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pressure.diminfo[0].shape = __pyx_pybuffernd_pressure.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 634, __pyx_L1_error)
  }
  __pyx_t_8 = 0;
  __pyx_v_pressure = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "foamSolverWrapper.pyx":635
 *             num_boundary_faces = self.get_number_of_boundary_faces(patchName)
 *             pressure =_np.zeros(num_boundary_faces, dtype=_np.float64)
 *             self.cppFoamLib.get_pressure_boundary_field(&pressure[0], patchName)             # <<<<<<<<<<<<<<
 * 
 *             return pressure
 */
  __pyx_t_13 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_pybuffernd_pressure.diminfo[0].shape;
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_pressure.diminfo[0].shape)) __pyx_t_9 = 0;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 635, __pyx_L1_error)
  }
  __pyx_t_14 = __Pyx_PyObject_AsWritableString(__pyx_v_patchName); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) __PYX_ERR(0, 635, __pyx_L1_error)
  __pyx_v_self->cppFoamLib->get_pressure_boundary_field((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_pressure.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_pressure.diminfo[0].strides))), __pyx_t_14);

  /* "foamSolverWrapper.pyx":637
 *             self.cppFoamLib.get_pressure_boundary_field(&pressure[0], patchName)
 * 
 *             return pressure             # <<<<<<<<<<<<<<
 * 
 *       def get_pressure_gradient_boundary_field(self, patchName="numericalBoundary"):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_pressure));
  __pyx_r = ((PyObject *)__pyx_v_pressure);
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":615
 *             return pressure_gradient
 * 
 *       def get_pressure_boundary_field(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the pressure boundary field.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pressure.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_pressure_boundary_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pressure.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pressure);
  __Pyx_XDECREF(__pyx_v_num_boundary_faces);
  __Pyx_XDECREF(__pyx_v_patchName);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":639
 *             return pressure
 * 
 *       def get_pressure_gradient_boundary_field(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the pressure gradient boundary field.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_59get_pressure_gradient_boundary_field(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_58get_pressure_gradient_boundary_field[] = "pyFoamSolver.get_pressure_gradient_boundary_field(self, patchName=u'numericalBoundary')\nFile: foamSolverWrapper.pyx (starting at line 639)\n\n            Retrieve the pressure gradient boundary field.\n\n            Parameters\n            ----------\n            patchName : str, optional\n                  Name of the OpenFOAM boundary patch (default: \"numericalBoundary\").\n\n            Returns\n            -------\n            pressureGradient : ndarray (3 * nBoundaryFaces,)\n                  Pressure gradient boundary field as a flattened NumPy array.\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_59get_pressure_gradient_boundary_field = {"get_pressure_gradient_boundary_field", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_59get_pressure_gradient_boundary_field, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_58get_pressure_gradient_boundary_field};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_59get_pressure_gradient_boundary_field(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_patchName = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_pressure_gradient_boundary_field (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_patchName,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_u_numericalBoundary);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_patchName);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_pressure_gradient_boundary_field") < 0)) __PYX_ERR(0, 639, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_patchName = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_pressure_gradient_boundary_field", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 639, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_pressure_gradient_boundary_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_58get_pressure_gradient_boundary_field(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self), __pyx_v_patchName);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_58get_pressure_gradient_boundary_field(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName) {
  PyArrayObject *__pyx_v_pressure_gradient = 0;
  PyObject *__pyx_v_num_boundary_faces = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pressure_gradient;
  __Pyx_Buffer __pyx_pybuffer_pressure_gradient;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_pressure_gradient_boundary_field", 0);
  __Pyx_INCREF(__pyx_v_patchName);
  __pyx_pybuffer_pressure_gradient.pybuffer.buf = NULL;
  __pyx_pybuffer_pressure_gradient.refcount = 0;
  __pyx_pybuffernd_pressure_gradient.data = NULL;
  __pyx_pybuffernd_pressure_gradient.rcbuffer = &__pyx_pybuffer_pressure_gradient;

  /* "foamSolverWrapper.pyx":653
 *                   Pressure gradient boundary field as a flattened NumPy array.
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_patchName); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foamSolverWrapper.pyx":654
 *             """
 *             if isinstance(patchName, str):
 *                   patchName = patchName.encode('utf-8')             # <<<<<<<<<<<<<<
 * 
 *             cdef _np.ndarray[_np.float64_t, ndim=1] pressure_gradient
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_patchName, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 654, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_u_utf_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_utf_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 654, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_patchName, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "foamSolverWrapper.pyx":653
 *                   Pressure gradient boundary field as a flattened NumPy array.
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  }

  /* "foamSolverWrapper.pyx":657
 * 
 *             cdef _np.ndarray[_np.float64_t, ndim=1] pressure_gradient
 *             num_boundary_faces = self.get_number_of_boundary_faces(patchName)             # <<<<<<<<<<<<<<
 *             pressure_gradient =_np.zeros(3 * num_boundary_faces, dtype=_np.float64)
 *             self.cppFoamLib.get_pressure_gradient_boundary_field(&pressure_gradient[0], patchName)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_number_of_boundary_faces); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_patchName) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_patchName);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_num_boundary_faces = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "foamSolverWrapper.pyx":658
 *             cdef _np.ndarray[_np.float64_t, ndim=1] pressure_gradient
 *             num_boundary_faces = self.get_number_of_boundary_faces(patchName)
 *             pressure_gradient =_np.zeros(3 * num_boundary_faces, dtype=_np.float64)             # <<<<<<<<<<<<<<
 *             self.cppFoamLib.get_pressure_gradient_boundary_field(&pressure_gradient[0], patchName)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Multiply(__pyx_int_3, __pyx_v_num_boundary_faces); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_float64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 658, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_7);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pressure_gradient.rcbuffer->pybuffer);
    __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pressure_gradient.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_9 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pressure_gradient.rcbuffer->pybuffer, (PyObject*)__pyx_v_pressure_gradient, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
    }
    __pyx_pybuffernd_pressure_gradient.diminfo[0].strides = __pyx_pybuffernd_pressure_gradient.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pressure_gradient.diminfo[0].shape = __pyx_pybuffernd_pressure_gradient.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 658, __pyx_L1_error)
  }
  __pyx_t_8 = 0;
  __pyx_v_pressure_gradient = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "foamSolverWrapper.pyx":659
 *             num_boundary_faces = self.get_number_of_boundary_faces(patchName)
 *             pressure_gradient =_np.zeros(3 * num_boundary_faces, dtype=_np.float64)
 *             self.cppFoamLib.get_pressure_gradient_boundary_field(&pressure_gradient[0], patchName)             # <<<<<<<<<<<<<<
 * 
 *             return pressure_gradient
 */
  __pyx_t_13 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_pybuffernd_pressure_gradient.diminfo[0].shape;
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_pressure_gradient.diminfo[0].shape)) __pyx_t_9 = 0;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 659, __pyx_L1_error)
  }
  __pyx_t_14 = __Pyx_PyObject_AsWritableString(__pyx_v_patchName); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) __PYX_ERR(0, 659, __pyx_L1_error)
  __pyx_v_self->cppFoamLib->get_pressure_gradient_boundary_field((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_pressure_gradient.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_pressure_gradient.diminfo[0].strides))), __pyx_t_14);

  /* "foamSolverWrapper.pyx":661
 *             self.cppFoamLib.get_pressure_gradient_boundary_field(&pressure_gradient[0], patchName)
 * 
 *             return pressure_gradient             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_pressure_gradient));
  __pyx_r = ((PyObject *)__pyx_v_pressure_gradient);
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":639
 *             return pressure
 * 
 *       def get_pressure_gradient_boundary_field(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the pressure gradient boundary field.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pressure_gradient.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_pressure_gradient_boundary_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pressure_gradient.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pressure_gradient);
  __Pyx_XDECREF(__pyx_v_num_boundary_faces);
  __Pyx_XDECREF(__pyx_v_patchName);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":664
 * 
 * 
 *       def get_vorticity_field(self):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the vorticity gradient field.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_61get_vorticity_field(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_60get_vorticity_field[] = "pyFoamSolver.get_vorticity_field(self)\nFile: foamSolverWrapper.pyx (starting at line 664)\n\n            Retrieve the vorticity gradient field.\n\n            This version eliminates the need for passing an external ndarray as a parameter\n            by managing the storage internally.\n\n            Returns\n            -------\n            ndarray (9 * nCells,)\n                  The vorticity gradient field.\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_61get_vorticity_field = {"get_vorticity_field", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_61get_vorticity_field, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_60get_vorticity_field};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_61get_vorticity_field(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_vorticity_field (wrapper)", 0);
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_60get_vorticity_field(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_60get_vorticity_field(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self) {
  PyArrayObject *__pyx_v_vorticity = 0;
  PyObject *__pyx_v_num_cells = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_vorticity;
  __Pyx_Buffer __pyx_pybuffer_vorticity;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_vorticity_field", 0);
  __pyx_pybuffer_vorticity.pybuffer.buf = NULL;
  __pyx_pybuffer_vorticity.refcount = 0;
  __pyx_pybuffernd_vorticity.data = NULL;
  __pyx_pybuffernd_vorticity.rcbuffer = &__pyx_pybuffer_vorticity;

  /* "foamSolverWrapper.pyx":678
 *             cdef _np.ndarray[_np.float64_t, ndim=1] vorticity
 * 
 *             num_cells = self.get_number_of_cells()             # <<<<<<<<<<<<<<
 *             vorticity = _np.zeros(num_cells * 3, dtype=_np.float64)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_number_of_cells); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_num_cells = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":679
 * 
 *             num_cells = self.get_number_of_cells()
 *             vorticity = _np.zeros(num_cells * 3, dtype=_np.float64)             # <<<<<<<<<<<<<<
 * 
 *             # Fetch the vorticity gradient field from the C++ library and store it in the array.
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_num_cells, __pyx_int_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 679, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_vorticity.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_vorticity.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_vorticity.rcbuffer->pybuffer, (PyObject*)__pyx_v_vorticity, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
      __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
    }
    __pyx_pybuffernd_vorticity.diminfo[0].strides = __pyx_pybuffernd_vorticity.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_vorticity.diminfo[0].shape = __pyx_pybuffernd_vorticity.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 679, __pyx_L1_error)
  }
  __pyx_t_6 = 0;
  __pyx_v_vorticity = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "foamSolverWrapper.pyx":682
 * 
 *             # Fetch the vorticity gradient field from the C++ library and store it in the array.
 *             self.cppFoamLib.get_vorticity_field(&vorticity[0])             # <<<<<<<<<<<<<<
 * 
 *             # Return the gradient to the caller
 */
  __pyx_t_11 = 0;
  __pyx_t_7 = -1;
  if (__pyx_t_11 < 0) {
    __pyx_t_11 += __pyx_pybuffernd_vorticity.diminfo[0].shape;
    if (unlikely(__pyx_t_11 < 0)) __pyx_t_7 = 0;
  } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_vorticity.diminfo[0].shape)) __pyx_t_7 = 0;
  if (unlikely(__pyx_t_7 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_7);
    __PYX_ERR(0, 682, __pyx_L1_error)
  }
  __pyx_v_self->cppFoamLib->get_vorticity_field((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_vorticity.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_vorticity.diminfo[0].strides))));

  /* "foamSolverWrapper.pyx":685
 * 
 *             # Return the gradient to the caller
 *             return vorticity             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_vorticity));
  __pyx_r = ((PyObject *)__pyx_v_vorticity);
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":664
 * 
 * 
 *       def get_vorticity_field(self):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the vorticity gradient field.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_vorticity.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_vorticity_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_vorticity.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vorticity);
  __Pyx_XDECREF(__pyx_v_num_cells);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":688
 * 
 * 
 *       def get_vorticity_boundary_field(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the vorticity boundary field.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_63get_vorticity_boundary_field(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_62get_vorticity_boundary_field[] = "pyFoamSolver.get_vorticity_boundary_field(self, patchName=u'numericalBoundary')\nFile: foamSolverWrapper.pyx (starting at line 688)\n\n            Retrieve the vorticity boundary field.\n\n            Parameters\n            ----------\n            patchName : str, optional\n                  Name of the OpenFOAM boundary patch (default: \"numericalBoundary\").\n\n            Returns\n            -------\n            vorticity : ndarray (3 * nBoundaryFaces,)\n                  Velocity gradient boundary field as a flattened NumPy array.\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_63get_vorticity_boundary_field = {"get_vorticity_boundary_field", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_63get_vorticity_boundary_field, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_62get_vorticity_boundary_field};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_63get_vorticity_boundary_field(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_patchName = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_vorticity_boundary_field (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_patchName,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_u_numericalBoundary);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_patchName);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_vorticity_boundary_field") < 0)) __PYX_ERR(0, 688, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_patchName = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_vorticity_boundary_field", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 688, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_vorticity_boundary_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_62get_vorticity_boundary_field(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self), __pyx_v_patchName);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_62get_vorticity_boundary_field(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_patchName) {
  PyArrayObject *__pyx_v_vorticity = 0;
  PyObject *__pyx_v_num_boundary_faces = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_vorticity;
  __Pyx_Buffer __pyx_pybuffer_vorticity;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_vorticity_boundary_field", 0);
  __Pyx_INCREF(__pyx_v_patchName);
  __pyx_pybuffer_vorticity.pybuffer.buf = NULL;
  __pyx_pybuffer_vorticity.refcount = 0;
  __pyx_pybuffernd_vorticity.data = NULL;
  __pyx_pybuffernd_vorticity.rcbuffer = &__pyx_pybuffer_vorticity;

  /* "foamSolverWrapper.pyx":702
 *                   Velocity gradient boundary field as a flattened NumPy array.
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_patchName); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foamSolverWrapper.pyx":703
 *             """
 *             if isinstance(patchName, str):
 *                   patchName = patchName.encode('utf-8')             # <<<<<<<<<<<<<<
 * 
 *             cdef _np.ndarray[_np.float64_t, ndim=1] vorticity
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_patchName, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_u_utf_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_utf_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_patchName, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "foamSolverWrapper.pyx":702
 *                   Velocity gradient boundary field as a flattened NumPy array.
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  }

  /* "foamSolverWrapper.pyx":707
 *             cdef _np.ndarray[_np.float64_t, ndim=1] vorticity
 * 
 *             num_boundary_faces = self.get_number_of_boundary_faces(patchName)             # <<<<<<<<<<<<<<
 *             vorticity =_np.zeros(3 * num_boundary_faces, dtype=_np.float64)
 *             self.cppFoamLib.get_vorticity_boundary_field(&vorticity[0], patchName)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_number_of_boundary_faces); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_patchName) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_patchName);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_num_boundary_faces = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "foamSolverWrapper.pyx":708
 * 
 *             num_boundary_faces = self.get_number_of_boundary_faces(patchName)
 *             vorticity =_np.zeros(3 * num_boundary_faces, dtype=_np.float64)             # <<<<<<<<<<<<<<
 *             self.cppFoamLib.get_vorticity_boundary_field(&vorticity[0], patchName)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Multiply(__pyx_int_3, __pyx_v_num_boundary_faces); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_float64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 708, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_7);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_vorticity.rcbuffer->pybuffer);
    __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_vorticity.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_9 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_vorticity.rcbuffer->pybuffer, (PyObject*)__pyx_v_vorticity, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
    }
    __pyx_pybuffernd_vorticity.diminfo[0].strides = __pyx_pybuffernd_vorticity.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_vorticity.diminfo[0].shape = __pyx_pybuffernd_vorticity.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 708, __pyx_L1_error)
  }
  __pyx_t_8 = 0;
  __pyx_v_vorticity = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "foamSolverWrapper.pyx":709
 *             num_boundary_faces = self.get_number_of_boundary_faces(patchName)
 *             vorticity =_np.zeros(3 * num_boundary_faces, dtype=_np.float64)
 *             self.cppFoamLib.get_vorticity_boundary_field(&vorticity[0], patchName)             # <<<<<<<<<<<<<<
 * 
 *             return vorticity
 */
  __pyx_t_13 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_pybuffernd_vorticity.diminfo[0].shape;
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_vorticity.diminfo[0].shape)) __pyx_t_9 = 0;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 709, __pyx_L1_error)
  }
  __pyx_t_14 = __Pyx_PyObject_AsWritableString(__pyx_v_patchName); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) __PYX_ERR(0, 709, __pyx_L1_error)
  __pyx_v_self->cppFoamLib->get_vorticity_boundary_field((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_vorticity.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_vorticity.diminfo[0].strides))), __pyx_t_14);

  /* "foamSolverWrapper.pyx":711
 *             self.cppFoamLib.get_vorticity_boundary_field(&vorticity[0], patchName)
 * 
 *             return vorticity             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_vorticity));
  __pyx_r = ((PyObject *)__pyx_v_vorticity);
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":688
 * 
 * 
 *       def get_vorticity_boundary_field(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the vorticity boundary field.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_vorticity.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_vorticity_boundary_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_vorticity.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vorticity);
  __Pyx_XDECREF(__pyx_v_num_boundary_faces);
  __Pyx_XDECREF(__pyx_v_patchName);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":718
 *       # ================================================== #
 * 
 *       def set_time_step(self, deltaT):             # <<<<<<<<<<<<<<
 *             """
 *             Set the desired time-step size.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_65set_time_step(PyObject *__pyx_v_self, PyObject *__pyx_v_deltaT); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_64set_time_step[] = "pyFoamSolver.set_time_step(self, deltaT)\nFile: foamSolverWrapper.pyx (starting at line 718)\n \n            Set the desired time-step size.\n\n            Parameters\n            ----------\n            deltaT : float\n                  Desired time-step size in seconds.\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_65set_time_step = {"set_time_step", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_65set_time_step, METH_O, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_64set_time_step};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_65set_time_step(PyObject *__pyx_v_self, PyObject *__pyx_v_deltaT) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_time_step (wrapper)", 0);
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_64set_time_step(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self), ((PyObject *)__pyx_v_deltaT));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_64set_time_step(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_deltaT) {
  double __pyx_v_timeStep;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_time_step", 0);

  /* "foamSolverWrapper.pyx":728
 *             """
 *             cdef double timeStep
 *             timeStep = deltaT             # <<<<<<<<<<<<<<
 *             self.cppFoamLib.set_time_step(&timeStep)
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_deltaT); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 728, __pyx_L1_error)
  __pyx_v_timeStep = __pyx_t_1;

  /* "foamSolverWrapper.pyx":729
 *             cdef double timeStep
 *             timeStep = deltaT
 *             self.cppFoamLib.set_time_step(&timeStep)             # <<<<<<<<<<<<<<
 * 
 *       def set_dirichlet_velocity_boundary_condition(self, vxBoundary, vyBoundary, vzBoundary, patchName="numericalBoundary"):
 */
  __pyx_v_self->cppFoamLib->set_time_step((&__pyx_v_timeStep));

  /* "foamSolverWrapper.pyx":718
 *       # ================================================== #
 * 
 *       def set_time_step(self, deltaT):             # <<<<<<<<<<<<<<
 *             """
 *             Set the desired time-step size.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.set_time_step", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":731
 *             self.cppFoamLib.set_time_step(&timeStep)
 * 
 *       def set_dirichlet_velocity_boundary_condition(self, vxBoundary, vyBoundary, vzBoundary, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Set Dirichlet velocity boundary conditions.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_67set_dirichlet_velocity_boundary_condition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_66set_dirichlet_velocity_boundary_condition[] = "pyFoamSolver.set_dirichlet_velocity_boundary_condition(self, vxBoundary, vyBoundary, vzBoundary, patchName=u'numericalBoundary')\nFile: foamSolverWrapper.pyx (starting at line 731)\n \n            Set Dirichlet velocity boundary conditions.\n\n            Parameters\n            ----------\n            vxBoundary : ndarray (3 * nBoundaryFaces,)\n                  x-velocity component at the patch \"numericalBoundary\".\n            vyBoundary : ndarray (3 * nBoundaryFaces,)\n                  y-velocity component at the patch \"numericalBoundary\".\n            vzBoundary : ndarray (3 * nBoundaryFaces,)\n                  z-velocity component at the patch \"numericalBoundary\".\n            patchName : str, optional\n                  Name of the OpenFOAM boundary patch (default: \"numericalBoundary\").\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_67set_dirichlet_velocity_boundary_condition = {"set_dirichlet_velocity_boundary_condition", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_67set_dirichlet_velocity_boundary_condition, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_66set_dirichlet_velocity_boundary_condition};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_67set_dirichlet_velocity_boundary_condition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vxBoundary = 0;
  PyObject *__pyx_v_vyBoundary = 0;
  PyObject *__pyx_v_vzBoundary = 0;
  PyObject *__pyx_v_patchName = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_dirichlet_velocity_boundary_condition (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vxBoundary,&__pyx_n_s_vyBoundary,&__pyx_n_s_vzBoundary,&__pyx_n_s_patchName,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_u_numericalBoundary);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vxBoundary)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vyBoundary)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_dirichlet_velocity_boundary_condition", 0, 3, 4, 1); __PYX_ERR(0, 731, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vzBoundary)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_dirichlet_velocity_boundary_condition", 0, 3, 4, 2); __PYX_ERR(0, 731, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_patchName);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_dirichlet_velocity_boundary_condition") < 0)) __PYX_ERR(0, 731, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_vxBoundary = values[0];
    __pyx_v_vyBoundary = values[1];
    __pyx_v_vzBoundary = values[2];
    __pyx_v_patchName = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_dirichlet_velocity_boundary_condition", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 731, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.set_dirichlet_velocity_boundary_condition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_66set_dirichlet_velocity_boundary_condition(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self), __pyx_v_vxBoundary, __pyx_v_vyBoundary, __pyx_v_vzBoundary, __pyx_v_patchName);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_66set_dirichlet_velocity_boundary_condition(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_vxBoundary, PyObject *__pyx_v_vyBoundary, PyObject *__pyx_v_vzBoundary, PyObject *__pyx_v_patchName) {
  PyObject *__pyx_v_nx = NULL;
  PyObject *__pyx_v_ny = NULL;
  PyObject *__pyx_v_nz = NULL;
  PyArrayObject *__pyx_v_velocityBC = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_velocityBC;
  __Pyx_Buffer __pyx_pybuffer_velocityBC;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyArrayObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  char *__pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_dirichlet_velocity_boundary_condition", 0);
  __Pyx_INCREF(__pyx_v_vxBoundary);
  __Pyx_INCREF(__pyx_v_vyBoundary);
  __Pyx_INCREF(__pyx_v_vzBoundary);
  __Pyx_INCREF(__pyx_v_patchName);
  __pyx_pybuffer_velocityBC.pybuffer.buf = NULL;
  __pyx_pybuffer_velocityBC.refcount = 0;
  __pyx_pybuffernd_velocityBC.data = NULL;
  __pyx_pybuffernd_velocityBC.rcbuffer = &__pyx_pybuffer_velocityBC;

  /* "foamSolverWrapper.pyx":746
 *                   Name of the OpenFOAM boundary patch (default: "numericalBoundary").
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 *             assert vxBoundary.shape == vyBoundary.shape
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_patchName); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foamSolverWrapper.pyx":747
 *             """
 *             if isinstance(patchName, str):
 *                   patchName = patchName.encode('utf-8')             # <<<<<<<<<<<<<<
 *             assert vxBoundary.shape == vyBoundary.shape
 *             assert vxBoundary.shape == vzBoundary.shape
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_patchName, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_u_utf_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_utf_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_patchName, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "foamSolverWrapper.pyx":746
 *                   Name of the OpenFOAM boundary patch (default: "numericalBoundary").
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 *             assert vxBoundary.shape == vyBoundary.shape
 */
  }

  /* "foamSolverWrapper.pyx":748
 *             if isinstance(patchName, str):
 *                   patchName = patchName.encode('utf-8')
 *             assert vxBoundary.shape == vyBoundary.shape             # <<<<<<<<<<<<<<
 *             assert vxBoundary.shape == vzBoundary.shape
 *             nx = vxBoundary.shape[0]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_vxBoundary, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 748, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_vyBoundary, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 748, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 748, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 748, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 748, __pyx_L1_error)
    }
  }
  #endif

  /* "foamSolverWrapper.pyx":749
 *                   patchName = patchName.encode('utf-8')
 *             assert vxBoundary.shape == vyBoundary.shape
 *             assert vxBoundary.shape == vzBoundary.shape             # <<<<<<<<<<<<<<
 *             nx = vxBoundary.shape[0]
 *             ny = vyBoundary.shape[0]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_vxBoundary, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 749, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_vzBoundary, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 749, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 749, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 749, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 749, __pyx_L1_error)
    }
  }
  #endif

  /* "foamSolverWrapper.pyx":750
 *             assert vxBoundary.shape == vyBoundary.shape
 *             assert vxBoundary.shape == vzBoundary.shape
 *             nx = vxBoundary.shape[0]             # <<<<<<<<<<<<<<
 *             ny = vyBoundary.shape[0]
 *             nz = vzBoundary.shape[0]
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_vxBoundary, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_nx = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "foamSolverWrapper.pyx":751
 *             assert vxBoundary.shape == vzBoundary.shape
 *             nx = vxBoundary.shape[0]
 *             ny = vyBoundary.shape[0]             # <<<<<<<<<<<<<<
 *             nz = vzBoundary.shape[0]
 *             vxBoundary = vxBoundary.reshape(nx, 1)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_vyBoundary, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_ny = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "foamSolverWrapper.pyx":752
 *             nx = vxBoundary.shape[0]
 *             ny = vyBoundary.shape[0]
 *             nz = vzBoundary.shape[0]             # <<<<<<<<<<<<<<
 *             vxBoundary = vxBoundary.reshape(nx, 1)
 *             vyBoundary = vyBoundary.reshape(ny, 1)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_vzBoundary, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_nz = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "foamSolverWrapper.pyx":753
 *             ny = vyBoundary.shape[0]
 *             nz = vzBoundary.shape[0]
 *             vxBoundary = vxBoundary.reshape(nx, 1)             # <<<<<<<<<<<<<<
 *             vyBoundary = vyBoundary.reshape(ny, 1)
 *             vzBoundary = vzBoundary.reshape(nz, 1)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_vxBoundary, __pyx_n_s_reshape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_nx, __pyx_int_1};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 753, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_nx, __pyx_int_1};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 753, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_nx);
    __Pyx_GIVEREF(__pyx_v_nx);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_nx);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_int_1);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_vxBoundary, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "foamSolverWrapper.pyx":754
 *             nz = vzBoundary.shape[0]
 *             vxBoundary = vxBoundary.reshape(nx, 1)
 *             vyBoundary = vyBoundary.reshape(ny, 1)             # <<<<<<<<<<<<<<
 *             vzBoundary = vzBoundary.reshape(nz, 1)
 *             cdef _np.ndarray[_np.float64_t, ndim=1] velocityBC
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_vyBoundary, __pyx_n_s_reshape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_ny, __pyx_int_1};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 754, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_ny, __pyx_int_1};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 754, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_v_ny);
    __Pyx_GIVEREF(__pyx_v_ny);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_6, __pyx_v_ny);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_6, __pyx_int_1);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_vyBoundary, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "foamSolverWrapper.pyx":755
 *             vxBoundary = vxBoundary.reshape(nx, 1)
 *             vyBoundary = vyBoundary.reshape(ny, 1)
 *             vzBoundary = vzBoundary.reshape(nz, 1)             # <<<<<<<<<<<<<<
 *             cdef _np.ndarray[_np.float64_t, ndim=1] velocityBC
 *             velocityBC = _np.hstack((vxBoundary, vyBoundary, vzBoundary)).copy().ravel()
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_vzBoundary, __pyx_n_s_reshape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_nz, __pyx_int_1};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 755, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_nz, __pyx_int_1};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 755, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 755, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_nz);
    __Pyx_GIVEREF(__pyx_v_nz);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_nz);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_int_1);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 755, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_vzBoundary, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "foamSolverWrapper.pyx":757
 *             vzBoundary = vzBoundary.reshape(nz, 1)
 *             cdef _np.ndarray[_np.float64_t, ndim=1] velocityBC
 *             velocityBC = _np.hstack((vxBoundary, vyBoundary, vzBoundary)).copy().ravel()             # <<<<<<<<<<<<<<
 *             self.cppFoamLib.set_dirichlet_velocity_boundary_condition(&velocityBC[0], patchName)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_hstack); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_vxBoundary);
  __Pyx_GIVEREF(__pyx_v_vxBoundary);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_vxBoundary);
  __Pyx_INCREF(__pyx_v_vyBoundary);
  __Pyx_GIVEREF(__pyx_v_vyBoundary);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_vyBoundary);
  __Pyx_INCREF(__pyx_v_vzBoundary);
  __Pyx_GIVEREF(__pyx_v_vzBoundary);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_vzBoundary);
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_7 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_copy); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_ravel); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 757, __pyx_L1_error)
  __pyx_t_10 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_velocityBC.rcbuffer->pybuffer);
    __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_velocityBC.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_6 < 0)) {
      PyErr_Fetch(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_velocityBC.rcbuffer->pybuffer, (PyObject*)__pyx_v_velocityBC, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_13);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      }
      __pyx_t_11 = __pyx_t_12 = __pyx_t_13 = 0;
    }
    __pyx_pybuffernd_velocityBC.diminfo[0].strides = __pyx_pybuffernd_velocityBC.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_velocityBC.diminfo[0].shape = __pyx_pybuffernd_velocityBC.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 757, __pyx_L1_error)
  }
  __pyx_t_10 = 0;
  __pyx_v_velocityBC = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "foamSolverWrapper.pyx":758
 *             cdef _np.ndarray[_np.float64_t, ndim=1] velocityBC
 *             velocityBC = _np.hstack((vxBoundary, vyBoundary, vzBoundary)).copy().ravel()
 *             self.cppFoamLib.set_dirichlet_velocity_boundary_condition(&velocityBC[0], patchName)             # <<<<<<<<<<<<<<
 * 
 *       def set_dirichlet_pressure_boundary_condition(self, pBoundary, patchName="numericalBoundary"):
 */
  __pyx_t_14 = 0;
  __pyx_t_6 = -1;
  if (__pyx_t_14 < 0) {
    __pyx_t_14 += __pyx_pybuffernd_velocityBC.diminfo[0].shape;
    if (unlikely(__pyx_t_14 < 0)) __pyx_t_6 = 0;
  } else if (unlikely(__pyx_t_14 >= __pyx_pybuffernd_velocityBC.diminfo[0].shape)) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    __PYX_ERR(0, 758, __pyx_L1_error)
  }
  __pyx_t_15 = __Pyx_PyObject_AsWritableString(__pyx_v_patchName); if (unlikely((!__pyx_t_15) && PyErr_Occurred())) __PYX_ERR(0, 758, __pyx_L1_error)
  __pyx_v_self->cppFoamLib->set_dirichlet_velocity_boundary_condition((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_velocityBC.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_velocityBC.diminfo[0].strides))), __pyx_t_15);

  /* "foamSolverWrapper.pyx":731
 *             self.cppFoamLib.set_time_step(&timeStep)
 * 
 *       def set_dirichlet_velocity_boundary_condition(self, vxBoundary, vyBoundary, vzBoundary, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Set Dirichlet velocity boundary conditions.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_velocityBC.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.set_dirichlet_velocity_boundary_condition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_velocityBC.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_nx);
  __Pyx_XDECREF(__pyx_v_ny);
  __Pyx_XDECREF(__pyx_v_nz);
  __Pyx_XDECREF((PyObject *)__pyx_v_velocityBC);
  __Pyx_XDECREF(__pyx_v_vxBoundary);
  __Pyx_XDECREF(__pyx_v_vyBoundary);
  __Pyx_XDECREF(__pyx_v_vzBoundary);
  __Pyx_XDECREF(__pyx_v_patchName);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":760
 *             self.cppFoamLib.set_dirichlet_velocity_boundary_condition(&velocityBC[0], patchName)
 * 
 *       def set_dirichlet_pressure_boundary_condition(self, pBoundary, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Set Dirichlet pressure boundary conditions.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_69set_dirichlet_pressure_boundary_condition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_68set_dirichlet_pressure_boundary_condition[] = "pyFoamSolver.set_dirichlet_pressure_boundary_condition(self, pBoundary, patchName=u'numericalBoundary')\nFile: foamSolverWrapper.pyx (starting at line 760)\n\n            Set Dirichlet pressure boundary conditions.\n\n            Parameters\n            ----------\n            pBoundary : ndarray (nCells,)\n                  Pressure field at the patch \"numericalBoundary\".\n            patchName : str, optional\n                  Name of the OpenFOAM boundary patch (default: \"numericalBoundary\").\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_69set_dirichlet_pressure_boundary_condition = {"set_dirichlet_pressure_boundary_condition", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_69set_dirichlet_pressure_boundary_condition, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_68set_dirichlet_pressure_boundary_condition};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_69set_dirichlet_pressure_boundary_condition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pBoundary = 0;
  PyObject *__pyx_v_patchName = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_dirichlet_pressure_boundary_condition (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pBoundary,&__pyx_n_s_patchName,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_n_u_numericalBoundary);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pBoundary)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_patchName);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_dirichlet_pressure_boundary_condition") < 0)) __PYX_ERR(0, 760, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pBoundary = values[0];
    __pyx_v_patchName = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_dirichlet_pressure_boundary_condition", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 760, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.set_dirichlet_pressure_boundary_condition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_68set_dirichlet_pressure_boundary_condition(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self), __pyx_v_pBoundary, __pyx_v_patchName);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_68set_dirichlet_pressure_boundary_condition(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_pBoundary, PyObject *__pyx_v_patchName) {
  PyObject *__pyx_v_n = NULL;
  PyArrayObject *__pyx_v_pressureBC = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pressureBC;
  __Pyx_Buffer __pyx_pybuffer_pressureBC;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  char *__pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_dirichlet_pressure_boundary_condition", 0);
  __Pyx_INCREF(__pyx_v_pBoundary);
  __Pyx_INCREF(__pyx_v_patchName);
  __pyx_pybuffer_pressureBC.pybuffer.buf = NULL;
  __pyx_pybuffer_pressureBC.refcount = 0;
  __pyx_pybuffernd_pressureBC.data = NULL;
  __pyx_pybuffernd_pressureBC.rcbuffer = &__pyx_pybuffer_pressureBC;

  /* "foamSolverWrapper.pyx":771
 *                   Name of the OpenFOAM boundary patch (default: "numericalBoundary").
 *             """
 *             patchName = patchName.encode()             # <<<<<<<<<<<<<<
 *             n = pBoundary.shape[0]
 *             pBoundary = pBoundary.reshape(n, 1)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_patchName, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_patchName, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":772
 *             """
 *             patchName = patchName.encode()
 *             n = pBoundary.shape[0]             # <<<<<<<<<<<<<<
 *             pBoundary = pBoundary.reshape(n, 1)
 *             cdef _np.ndarray[_np.float64_t, ndim=1] pressureBC
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_pBoundary, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_n = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "foamSolverWrapper.pyx":773
 *             patchName = patchName.encode()
 *             n = pBoundary.shape[0]
 *             pBoundary = pBoundary.reshape(n, 1)             # <<<<<<<<<<<<<<
 *             cdef _np.ndarray[_np.float64_t, ndim=1] pressureBC
 *             pressureBC = pBoundary.copy().ravel()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_pBoundary, __pyx_n_s_reshape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_n, __pyx_int_1};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_n, __pyx_int_1};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_n);
    __Pyx_GIVEREF(__pyx_v_n);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_n);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_int_1);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_pBoundary, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "foamSolverWrapper.pyx":775
 *             pBoundary = pBoundary.reshape(n, 1)
 *             cdef _np.ndarray[_np.float64_t, ndim=1] pressureBC
 *             pressureBC = pBoundary.copy().ravel()             # <<<<<<<<<<<<<<
 *             self.cppFoamLib.set_dirichlet_pressure_boundary_condition(&pressureBC[0], patchName)
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_pBoundary, __pyx_n_s_copy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ravel); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 775, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pressureBC.rcbuffer->pybuffer);
    __pyx_t_4 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pressureBC.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_4 < 0)) {
      PyErr_Fetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pressureBC.rcbuffer->pybuffer, (PyObject*)__pyx_v_pressureBC, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_7); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      }
      __pyx_t_7 = __pyx_t_8 = __pyx_t_9 = 0;
    }
    __pyx_pybuffernd_pressureBC.diminfo[0].strides = __pyx_pybuffernd_pressureBC.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pressureBC.diminfo[0].shape = __pyx_pybuffernd_pressureBC.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 775, __pyx_L1_error)
  }
  __pyx_t_6 = 0;
  __pyx_v_pressureBC = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "foamSolverWrapper.pyx":776
 *             cdef _np.ndarray[_np.float64_t, ndim=1] pressureBC
 *             pressureBC = pBoundary.copy().ravel()
 *             self.cppFoamLib.set_dirichlet_pressure_boundary_condition(&pressureBC[0], patchName)             # <<<<<<<<<<<<<<
 * 
 *       def set_neumann_pressure_boundary_condition(self, dpdxBoundary, dpdyBoundary, dpdzBoundary, patchName="numericalBoundary"):
 */
  __pyx_t_10 = 0;
  __pyx_t_4 = -1;
  if (__pyx_t_10 < 0) {
    __pyx_t_10 += __pyx_pybuffernd_pressureBC.diminfo[0].shape;
    if (unlikely(__pyx_t_10 < 0)) __pyx_t_4 = 0;
  } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_pressureBC.diminfo[0].shape)) __pyx_t_4 = 0;
  if (unlikely(__pyx_t_4 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_4);
    __PYX_ERR(0, 776, __pyx_L1_error)
  }
  __pyx_t_11 = __Pyx_PyObject_AsWritableString(__pyx_v_patchName); if (unlikely((!__pyx_t_11) && PyErr_Occurred())) __PYX_ERR(0, 776, __pyx_L1_error)
  __pyx_v_self->cppFoamLib->set_dirichlet_pressure_boundary_condition((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_pressureBC.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_pressureBC.diminfo[0].strides))), __pyx_t_11);

  /* "foamSolverWrapper.pyx":760
 *             self.cppFoamLib.set_dirichlet_velocity_boundary_condition(&velocityBC[0], patchName)
 * 
 *       def set_dirichlet_pressure_boundary_condition(self, pBoundary, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Set Dirichlet pressure boundary conditions.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pressureBC.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.set_dirichlet_pressure_boundary_condition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pressureBC.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF((PyObject *)__pyx_v_pressureBC);
  __Pyx_XDECREF(__pyx_v_pBoundary);
  __Pyx_XDECREF(__pyx_v_patchName);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":778
 *             self.cppFoamLib.set_dirichlet_pressure_boundary_condition(&pressureBC[0], patchName)
 * 
 *       def set_neumann_pressure_boundary_condition(self, dpdxBoundary, dpdyBoundary, dpdzBoundary, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Set Neumann pressure boundary conditions.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_71set_neumann_pressure_boundary_condition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_70set_neumann_pressure_boundary_condition[] = "pyFoamSolver.set_neumann_pressure_boundary_condition(self, dpdxBoundary, dpdyBoundary, dpdzBoundary, patchName=u'numericalBoundary')\nFile: foamSolverWrapper.pyx (starting at line 778)\n \n            Set Neumann pressure boundary conditions.\n\n            Parameters\n            ----------\n            dpdxBoundary : ndarray (nBoundaryFaces,)\n                  dpdx at the patch \"numericalBoundary\".\n            dpdyBoundary : ndarray (nBoundaryFaces,)\n                  dpdy at the patch \"numericalBoundary\".\n            dpdzBoundary : ndarray (nBoundaryFaces,)\n                  dpdz at the patch \"numericalBoundary\".\n            patchName : str, optional\n                  Name of the OpenFOAM boundary patch (default: \"numericalBoundary\").\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_71set_neumann_pressure_boundary_condition = {"set_neumann_pressure_boundary_condition", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_71set_neumann_pressure_boundary_condition, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_70set_neumann_pressure_boundary_condition};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_71set_neumann_pressure_boundary_condition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dpdxBoundary = 0;
  PyObject *__pyx_v_dpdyBoundary = 0;
  PyObject *__pyx_v_dpdzBoundary = 0;
  PyObject *__pyx_v_patchName = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_neumann_pressure_boundary_condition (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dpdxBoundary,&__pyx_n_s_dpdyBoundary,&__pyx_n_s_dpdzBoundary,&__pyx_n_s_patchName,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_u_numericalBoundary);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dpdxBoundary)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dpdyBoundary)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_neumann_pressure_boundary_condition", 0, 3, 4, 1); __PYX_ERR(0, 778, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dpdzBoundary)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_neumann_pressure_boundary_condition", 0, 3, 4, 2); __PYX_ERR(0, 778, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_patchName);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_neumann_pressure_boundary_condition") < 0)) __PYX_ERR(0, 778, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dpdxBoundary = values[0];
    __pyx_v_dpdyBoundary = values[1];
    __pyx_v_dpdzBoundary = values[2];
    __pyx_v_patchName = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_neumann_pressure_boundary_condition", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 778, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.set_neumann_pressure_boundary_condition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_70set_neumann_pressure_boundary_condition(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self), __pyx_v_dpdxBoundary, __pyx_v_dpdyBoundary, __pyx_v_dpdzBoundary, __pyx_v_patchName);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_70set_neumann_pressure_boundary_condition(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_dpdxBoundary, PyObject *__pyx_v_dpdyBoundary, PyObject *__pyx_v_dpdzBoundary, PyObject *__pyx_v_patchName) {
  PyObject *__pyx_v_nx = NULL;
  PyObject *__pyx_v_ny = NULL;
  PyObject *__pyx_v_nz = NULL;
  PyArrayObject *__pyx_v_pressureGradientBC = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pressureGradientBC;
  __Pyx_Buffer __pyx_pybuffer_pressureGradientBC;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyArrayObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  char *__pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_neumann_pressure_boundary_condition", 0);
  __Pyx_INCREF(__pyx_v_dpdxBoundary);
  __Pyx_INCREF(__pyx_v_dpdyBoundary);
  __Pyx_INCREF(__pyx_v_dpdzBoundary);
  __Pyx_INCREF(__pyx_v_patchName);
  __pyx_pybuffer_pressureGradientBC.pybuffer.buf = NULL;
  __pyx_pybuffer_pressureGradientBC.refcount = 0;
  __pyx_pybuffernd_pressureGradientBC.data = NULL;
  __pyx_pybuffernd_pressureGradientBC.rcbuffer = &__pyx_pybuffer_pressureGradientBC;

  /* "foamSolverWrapper.pyx":793
 *                   Name of the OpenFOAM boundary patch (default: "numericalBoundary").
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 *             assert dpdxBoundary.shape == dpdyBoundary.shape
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_patchName); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foamSolverWrapper.pyx":794
 *             """
 *             if isinstance(patchName, str):
 *                   patchName = patchName.encode('utf-8')             # <<<<<<<<<<<<<<
 *             assert dpdxBoundary.shape == dpdyBoundary.shape
 *             nx = dpdxBoundary.shape[0]
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_patchName, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_u_utf_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_utf_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_patchName, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "foamSolverWrapper.pyx":793
 *                   Name of the OpenFOAM boundary patch (default: "numericalBoundary").
 *             """
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 *             assert dpdxBoundary.shape == dpdyBoundary.shape
 */
  }

  /* "foamSolverWrapper.pyx":795
 *             if isinstance(patchName, str):
 *                   patchName = patchName.encode('utf-8')
 *             assert dpdxBoundary.shape == dpdyBoundary.shape             # <<<<<<<<<<<<<<
 *             nx = dpdxBoundary.shape[0]
 *             ny = dpdyBoundary.shape[0]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dpdxBoundary, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_dpdyBoundary, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 795, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 795, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 795, __pyx_L1_error)
    }
  }
  #endif

  /* "foamSolverWrapper.pyx":796
 *                   patchName = patchName.encode('utf-8')
 *             assert dpdxBoundary.shape == dpdyBoundary.shape
 *             nx = dpdxBoundary.shape[0]             # <<<<<<<<<<<<<<
 *             ny = dpdyBoundary.shape[0]
 *             nz = dpdzBoundary.shape[0]
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_dpdxBoundary, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_nx = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "foamSolverWrapper.pyx":797
 *             assert dpdxBoundary.shape == dpdyBoundary.shape
 *             nx = dpdxBoundary.shape[0]
 *             ny = dpdyBoundary.shape[0]             # <<<<<<<<<<<<<<
 *             nz = dpdzBoundary.shape[0]
 *             dpdxBoundary = dpdxBoundary.reshape(nx, 1)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_dpdyBoundary, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_ny = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "foamSolverWrapper.pyx":798
 *             nx = dpdxBoundary.shape[0]
 *             ny = dpdyBoundary.shape[0]
 *             nz = dpdzBoundary.shape[0]             # <<<<<<<<<<<<<<
 *             dpdxBoundary = dpdxBoundary.reshape(nx, 1)
 *             dpdyBoundary = dpdyBoundary.reshape(ny, 1)
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_dpdzBoundary, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_nz = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "foamSolverWrapper.pyx":799
 *             ny = dpdyBoundary.shape[0]
 *             nz = dpdzBoundary.shape[0]
 *             dpdxBoundary = dpdxBoundary.reshape(nx, 1)             # <<<<<<<<<<<<<<
 *             dpdyBoundary = dpdyBoundary.reshape(ny, 1)
 *             dpdzBoundary = dpdzBoundary.reshape(nz, 1)
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_dpdxBoundary, __pyx_n_s_reshape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_nx, __pyx_int_1};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_nx, __pyx_int_1};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_nx);
    __Pyx_GIVEREF(__pyx_v_nx);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_nx);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_int_1);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_dpdxBoundary, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "foamSolverWrapper.pyx":800
 *             nz = dpdzBoundary.shape[0]
 *             dpdxBoundary = dpdxBoundary.reshape(nx, 1)
 *             dpdyBoundary = dpdyBoundary.reshape(ny, 1)             # <<<<<<<<<<<<<<
 *             dpdzBoundary = dpdzBoundary.reshape(nz, 1)
 *             cdef _np.ndarray[_np.float64_t, ndim=1] pressureGradientBC
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_dpdyBoundary, __pyx_n_s_reshape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_ny, __pyx_int_1};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 800, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_ny, __pyx_int_1};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 800, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 800, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_v_ny);
    __Pyx_GIVEREF(__pyx_v_ny);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_6, __pyx_v_ny);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_6, __pyx_int_1);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 800, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_dpdyBoundary, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "foamSolverWrapper.pyx":801
 *             dpdxBoundary = dpdxBoundary.reshape(nx, 1)
 *             dpdyBoundary = dpdyBoundary.reshape(ny, 1)
 *             dpdzBoundary = dpdzBoundary.reshape(nz, 1)             # <<<<<<<<<<<<<<
 *             cdef _np.ndarray[_np.float64_t, ndim=1] pressureGradientBC
 *             pressureGradientBC = _np.hstack((dpdxBoundary, dpdyBoundary, dpdzBoundary)).copy().ravel()
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_dpdzBoundary, __pyx_n_s_reshape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_nz, __pyx_int_1};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 801, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_nz, __pyx_int_1};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 801, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 801, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_nz);
    __Pyx_GIVEREF(__pyx_v_nz);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_nz);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_int_1);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 801, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_dpdzBoundary, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "foamSolverWrapper.pyx":803
 *             dpdzBoundary = dpdzBoundary.reshape(nz, 1)
 *             cdef _np.ndarray[_np.float64_t, ndim=1] pressureGradientBC
 *             pressureGradientBC = _np.hstack((dpdxBoundary, dpdyBoundary, dpdzBoundary)).copy().ravel()             # <<<<<<<<<<<<<<
 *             self.cppFoamLib.set_neumann_pressure_boundary_condition(&pressureGradientBC[0], patchName)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_hstack); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_dpdxBoundary);
  __Pyx_GIVEREF(__pyx_v_dpdxBoundary);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_dpdxBoundary);
  __Pyx_INCREF(__pyx_v_dpdyBoundary);
  __Pyx_GIVEREF(__pyx_v_dpdyBoundary);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_dpdyBoundary);
  __Pyx_INCREF(__pyx_v_dpdzBoundary);
  __Pyx_GIVEREF(__pyx_v_dpdzBoundary);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_dpdzBoundary);
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_7 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_copy); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ravel); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 803, __pyx_L1_error)
  __pyx_t_10 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pressureGradientBC.rcbuffer->pybuffer);
    __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pressureGradientBC.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_6 < 0)) {
      PyErr_Fetch(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pressureGradientBC.rcbuffer->pybuffer, (PyObject*)__pyx_v_pressureGradientBC, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_13);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      }
      __pyx_t_11 = __pyx_t_12 = __pyx_t_13 = 0;
    }
    __pyx_pybuffernd_pressureGradientBC.diminfo[0].strides = __pyx_pybuffernd_pressureGradientBC.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pressureGradientBC.diminfo[0].shape = __pyx_pybuffernd_pressureGradientBC.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 803, __pyx_L1_error)
  }
  __pyx_t_10 = 0;
  __pyx_v_pressureGradientBC = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "foamSolverWrapper.pyx":804
 *             cdef _np.ndarray[_np.float64_t, ndim=1] pressureGradientBC
 *             pressureGradientBC = _np.hstack((dpdxBoundary, dpdyBoundary, dpdzBoundary)).copy().ravel()
 *             self.cppFoamLib.set_neumann_pressure_boundary_condition(&pressureGradientBC[0], patchName)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_14 = 0;
  __pyx_t_6 = -1;
  if (__pyx_t_14 < 0) {
    __pyx_t_14 += __pyx_pybuffernd_pressureGradientBC.diminfo[0].shape;
    if (unlikely(__pyx_t_14 < 0)) __pyx_t_6 = 0;
  } else if (unlikely(__pyx_t_14 >= __pyx_pybuffernd_pressureGradientBC.diminfo[0].shape)) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    __PYX_ERR(0, 804, __pyx_L1_error)
  }
  __pyx_t_15 = __Pyx_PyObject_AsWritableString(__pyx_v_patchName); if (unlikely((!__pyx_t_15) && PyErr_Occurred())) __PYX_ERR(0, 804, __pyx_L1_error)
  __pyx_v_self->cppFoamLib->set_neumann_pressure_boundary_condition((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_pressureGradientBC.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_pressureGradientBC.diminfo[0].strides))), __pyx_t_15);

  /* "foamSolverWrapper.pyx":778
 *             self.cppFoamLib.set_dirichlet_pressure_boundary_condition(&pressureBC[0], patchName)
 * 
 *       def set_neumann_pressure_boundary_condition(self, dpdxBoundary, dpdyBoundary, dpdzBoundary, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Set Neumann pressure boundary conditions.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pressureGradientBC.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.set_neumann_pressure_boundary_condition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pressureGradientBC.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_nx);
  __Pyx_XDECREF(__pyx_v_ny);
  __Pyx_XDECREF(__pyx_v_nz);
  __Pyx_XDECREF((PyObject *)__pyx_v_pressureGradientBC);
  __Pyx_XDECREF(__pyx_v_dpdxBoundary);
  __Pyx_XDECREF(__pyx_v_dpdyBoundary);
  __Pyx_XDECREF(__pyx_v_dpdzBoundary);
  __Pyx_XDECREF(__pyx_v_patchName);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":811
 *       # ================================================= #
 * 
 *       def correct_mass_flux_python(self, faceVelocityX, faceVelocityY, faceVelocityZ, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Correct the mass flux at each face along the numerical boundary.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_73correct_mass_flux_python(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_72correct_mass_flux_python[] = "pyFoamSolver.correct_mass_flux_python(self, faceVelocityX, faceVelocityY, faceVelocityZ, patchName=u'numericalBoundary')\nFile: foamSolverWrapper.pyx (starting at line 811)\n\n            Correct the mass flux at each face along the numerical boundary.\n\n            Parameters\n            ----------\n            faceVelocityX : ndarray (3 * nBoundaryFaces,)\n                  x-component of the face velocity.\n            faceVelocityY : ndarray (3 * nBoundaryFaces,)\n                  y-component of the face velocity.\n            faceVelocityZ : ndarray (3 * nBoundaryFaces,)\n                  z-component of the face velocity.\n            patchName : str, optional\n                  Name of the OpenFOAM boundary patch (default: \"numericalBoundary\").\n\n            Returns\n            -------\n            tuple of ndarrays (3 * nBoundaryFaces,)\n                  Corrected face velocities (faceVelocityX2, faceVelocityY2, faceVelocityZ2).\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_73correct_mass_flux_python = {"correct_mass_flux_python", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_73correct_mass_flux_python, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_72correct_mass_flux_python};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_73correct_mass_flux_python(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_faceVelocityX = 0;
  PyObject *__pyx_v_faceVelocityY = 0;
  PyObject *__pyx_v_faceVelocityZ = 0;
  PyObject *__pyx_v_patchName = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("correct_mass_flux_python (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_faceVelocityX,&__pyx_n_s_faceVelocityY,&__pyx_n_s_faceVelocityZ,&__pyx_n_s_patchName,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_u_numericalBoundary);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_faceVelocityX)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_faceVelocityY)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("correct_mass_flux_python", 0, 3, 4, 1); __PYX_ERR(0, 811, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_faceVelocityZ)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("correct_mass_flux_python", 0, 3, 4, 2); __PYX_ERR(0, 811, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_patchName);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "correct_mass_flux_python") < 0)) __PYX_ERR(0, 811, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_faceVelocityX = values[0];
    __pyx_v_faceVelocityY = values[1];
    __pyx_v_faceVelocityZ = values[2];
    __pyx_v_patchName = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("correct_mass_flux_python", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 811, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.correct_mass_flux_python", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_72correct_mass_flux_python(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self), __pyx_v_faceVelocityX, __pyx_v_faceVelocityY, __pyx_v_faceVelocityZ, __pyx_v_patchName);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_72correct_mass_flux_python(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_faceVelocityX, PyObject *__pyx_v_faceVelocityY, PyObject *__pyx_v_faceVelocityZ, PyObject *__pyx_v_patchName) {
  PyObject *__pyx_v_faceArea = NULL;
  PyObject *__pyx_v_faceNormal = NULL;
  PyObject *__pyx_v_faceFlux = NULL;
  PyObject *__pyx_v_totalFlux = NULL;
  PyObject *__pyx_v_totalAbsFlux = NULL;
  PyObject *__pyx_v_faceVelocityCorr = NULL;
  PyObject *__pyx_v_faceVelocityX2 = NULL;
  PyObject *__pyx_v_faceVelocityY2 = NULL;
  PyObject *__pyx_v_faceVelocityZ2 = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("correct_mass_flux_python", 0);

  /* "foamSolverWrapper.pyx":832
 *             """
 *             # Area of each face along the numerical boundary
 *             faceArea = self.get_boundary_face_areas(patchName)             # <<<<<<<<<<<<<<
 * 
 *             # Normal vector of each face along the numerical boundary
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_boundary_face_areas); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_patchName) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_patchName);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_faceArea = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":835
 * 
 *             # Normal vector of each face along the numerical boundary
 *             faceNormal = self.get_boundary_face_normals(patchName)             # <<<<<<<<<<<<<<
 * 
 *             # Ensure normal vector has unit length
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_boundary_face_normals); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_patchName) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_patchName);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_faceNormal = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":838
 * 
 *             # Ensure normal vector has unit length
 *             faceNormal = faceNormal / _np.linalg.norm(faceNormal, axis=1)[:, None]             # <<<<<<<<<<<<<<
 * 
 *             # Mass flux at each face along the numerical boundary
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_linalg); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_norm); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_faceNormal);
  __Pyx_GIVEREF(__pyx_v_faceNormal);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_faceNormal);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_axis, __pyx_int_1) < 0) __PYX_ERR(0, 838, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_tuple__3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_v_faceNormal, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_faceNormal, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "foamSolverWrapper.pyx":841
 * 
 *             # Mass flux at each face along the numerical boundary
 *             faceFlux = (faceVelocityX * faceNormal[:, 0] + faceVelocityY * faceNormal[:, 1] + faceVelocityZ * faceNormal[:, 2]) * faceArea             # <<<<<<<<<<<<<<
 * 
 *             # Net flux along the numerical boundary
 */
  __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_faceNormal, __pyx_tuple__4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_faceVelocityX, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_faceNormal, __pyx_tuple__5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_faceVelocityY, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_faceNormal, __pyx_tuple__6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_faceVelocityZ, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_v_faceArea); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_faceFlux = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "foamSolverWrapper.pyx":844
 * 
 *             # Net flux along the numerical boundary
 *             totalFlux = _np.sum(faceFlux)             # <<<<<<<<<<<<<<
 * 
 *             # Total flux along the numerical boundary
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_sum); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_faceFlux) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_faceFlux);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_totalFlux = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "foamSolverWrapper.pyx":847
 * 
 *             # Total flux along the numerical boundary
 *             totalAbsFlux = _np.sum(_np.abs(faceFlux))             # <<<<<<<<<<<<<<
 * 
 *             # Correction for velocity component normal to each face along the numerical boundary
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_sum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_abs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_1, __pyx_v_faceFlux) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_faceFlux);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_totalAbsFlux = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "foamSolverWrapper.pyx":850
 * 
 *             # Correction for velocity component normal to each face along the numerical boundary
 *             faceVelocityCorr = (-(_np.abs(faceFlux) / (totalAbsFlux + 1.0e-15)) * totalFlux) / faceArea             # <<<<<<<<<<<<<<
 * 
 *             # Apply correction
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_abs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_faceFlux) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_faceFlux);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyFloat_AddObjC(__pyx_v_totalAbsFlux, __pyx_float_1_0eneg_15, 1.0e-15, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Negative(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_4, __pyx_v_totalFlux); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_v_faceArea); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_faceVelocityCorr = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "foamSolverWrapper.pyx":853
 * 
 *             # Apply correction
 *             faceVelocityX2 = faceVelocityX + faceVelocityCorr * faceNormal[:, 0]             # <<<<<<<<<<<<<<
 *             faceVelocityY2 = faceVelocityY + faceVelocityCorr * faceNormal[:, 1]
 *             faceVelocityZ2 = faceVelocityZ + faceVelocityCorr * faceNormal[:, 2]
 */
  __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_faceNormal, __pyx_tuple__4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_faceVelocityCorr, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_v_faceVelocityX, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_faceVelocityX2 = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "foamSolverWrapper.pyx":854
 *             # Apply correction
 *             faceVelocityX2 = faceVelocityX + faceVelocityCorr * faceNormal[:, 0]
 *             faceVelocityY2 = faceVelocityY + faceVelocityCorr * faceNormal[:, 1]             # <<<<<<<<<<<<<<
 *             faceVelocityZ2 = faceVelocityZ + faceVelocityCorr * faceNormal[:, 2]
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_faceNormal, __pyx_tuple__5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_faceVelocityCorr, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_v_faceVelocityY, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_faceVelocityY2 = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "foamSolverWrapper.pyx":855
 *             faceVelocityX2 = faceVelocityX + faceVelocityCorr * faceNormal[:, 0]
 *             faceVelocityY2 = faceVelocityY + faceVelocityCorr * faceNormal[:, 1]
 *             faceVelocityZ2 = faceVelocityZ + faceVelocityCorr * faceNormal[:, 2]             # <<<<<<<<<<<<<<
 * 
 *             return faceVelocityX2, faceVelocityY2, faceVelocityZ2
 */
  __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_faceNormal, __pyx_tuple__6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_faceVelocityCorr, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_v_faceVelocityZ, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_faceVelocityZ2 = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "foamSolverWrapper.pyx":857
 *             faceVelocityZ2 = faceVelocityZ + faceVelocityCorr * faceNormal[:, 2]
 * 
 *             return faceVelocityX2, faceVelocityY2, faceVelocityZ2             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_faceVelocityX2);
  __Pyx_GIVEREF(__pyx_v_faceVelocityX2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_faceVelocityX2);
  __Pyx_INCREF(__pyx_v_faceVelocityY2);
  __Pyx_GIVEREF(__pyx_v_faceVelocityY2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_faceVelocityY2);
  __Pyx_INCREF(__pyx_v_faceVelocityZ2);
  __Pyx_GIVEREF(__pyx_v_faceVelocityZ2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_faceVelocityZ2);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":811
 *       # ================================================= #
 * 
 *       def correct_mass_flux_python(self, faceVelocityX, faceVelocityY, faceVelocityZ, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Correct the mass flux at each face along the numerical boundary.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.correct_mass_flux_python", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_faceArea);
  __Pyx_XDECREF(__pyx_v_faceNormal);
  __Pyx_XDECREF(__pyx_v_faceFlux);
  __Pyx_XDECREF(__pyx_v_totalFlux);
  __Pyx_XDECREF(__pyx_v_totalAbsFlux);
  __Pyx_XDECREF(__pyx_v_faceVelocityCorr);
  __Pyx_XDECREF(__pyx_v_faceVelocityX2);
  __Pyx_XDECREF(__pyx_v_faceVelocityY2);
  __Pyx_XDECREF(__pyx_v_faceVelocityZ2);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":860
 * 
 * 
 *       def correct_normal_pressure_gradient(self, dpdx, dpdy, dpdz, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Correct the normal pressure gradient at each face along the numerical boundary.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_75correct_normal_pressure_gradient(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_74correct_normal_pressure_gradient[] = "pyFoamSolver.correct_normal_pressure_gradient(self, dpdx, dpdy, dpdz, patchName=u'numericalBoundary')\nFile: foamSolverWrapper.pyx (starting at line 860)\n\n            Correct the normal pressure gradient at each face along the numerical boundary.\n\n            Parameters\n            ----------\n            dpdx : ndarray (nBoundaryFaces,)\n                  Pressure gradient in the x direction.\n            dpdy : ndarray (nBoundaryFaces,)\n                  Pressure gradient in the y direction.\n            dpdz : ndarray (nBoundaryFaces,)\n                  Pressure gradient in the z direction.\n            patchName : str, optional\n                  Name of the OpenFOAM boundary patch (default: \"numericalBoundary\").\n\n            Returns\n            -------\n            tuple of ndarrays (nBoundaryFaces,)\n                  Corrected pressure gradients (dpdx, dpdy, dpdz).\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_75correct_normal_pressure_gradient = {"correct_normal_pressure_gradient", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_75correct_normal_pressure_gradient, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_74correct_normal_pressure_gradient};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_75correct_normal_pressure_gradient(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dpdx = 0;
  PyObject *__pyx_v_dpdy = 0;
  PyObject *__pyx_v_dpdz = 0;
  PyObject *__pyx_v_patchName = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("correct_normal_pressure_gradient (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dpdx,&__pyx_n_s_dpdy,&__pyx_n_s_dpdz,&__pyx_n_s_patchName,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_u_numericalBoundary);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dpdx)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dpdy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("correct_normal_pressure_gradient", 0, 3, 4, 1); __PYX_ERR(0, 860, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dpdz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("correct_normal_pressure_gradient", 0, 3, 4, 2); __PYX_ERR(0, 860, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_patchName);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "correct_normal_pressure_gradient") < 0)) __PYX_ERR(0, 860, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dpdx = values[0];
    __pyx_v_dpdy = values[1];
    __pyx_v_dpdz = values[2];
    __pyx_v_patchName = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("correct_normal_pressure_gradient", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 860, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.correct_normal_pressure_gradient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_74correct_normal_pressure_gradient(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self), __pyx_v_dpdx, __pyx_v_dpdy, __pyx_v_dpdz, __pyx_v_patchName);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_74correct_normal_pressure_gradient(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, PyObject *__pyx_v_dpdx, PyObject *__pyx_v_dpdy, PyObject *__pyx_v_dpdz, PyObject *__pyx_v_patchName) {
  PyObject *__pyx_v_np = NULL;
  PyObject *__pyx_v__np = NULL;
  PyObject *__pyx_v_faceArea = NULL;
  PyObject *__pyx_v_faceNormal = NULL;
  PyObject *__pyx_v_global_ref = NULL;
  PyObject *__pyx_v_alternative_ref = NULL;
  PyObject *__pyx_v_faceTangent = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_ref = NULL;
  PyObject *__pyx_v_tangent = NULL;
  PyObject *__pyx_v_dpdn = NULL;
  PyObject *__pyx_v_dpdn_x = NULL;
  PyObject *__pyx_v_dpdn_y = NULL;
  PyObject *__pyx_v_dpdn_z = NULL;
  PyObject *__pyx_v_dpdt_x = NULL;
  PyObject *__pyx_v_dpdt_y = NULL;
  PyObject *__pyx_v_dpdt_z = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_dpdt = NULL;
  PyObject *__pyx_v_faceDeltaP = NULL;
  PyObject *__pyx_v_totalDeltaP = NULL;
  PyObject *__pyx_v_totalAbsDeltaP = NULL;
  PyObject *__pyx_v_facePressureGradientCorr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("correct_normal_pressure_gradient", 0);
  __Pyx_INCREF(__pyx_v_dpdx);
  __Pyx_INCREF(__pyx_v_dpdy);
  __Pyx_INCREF(__pyx_v_dpdz);
  __Pyx_INCREF(__pyx_v_patchName);

  /* "foamSolverWrapper.pyx":880
 *                   Corrected pressure gradients (dpdx, dpdy, dpdz).
 *             """
 *             import numpy as np  # if not already imported as _np             # <<<<<<<<<<<<<<
 *             _np = np
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_np = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":881
 *             """
 *             import numpy as np  # if not already imported as _np
 *             _np = np             # <<<<<<<<<<<<<<
 * 
 *             # If patchName is a str, encode it (needed for your C++ binding)
 */
  __Pyx_INCREF(__pyx_v_np);
  __pyx_v__np = __pyx_v_np;

  /* "foamSolverWrapper.pyx":884
 * 
 *             # If patchName is a str, encode it (needed for your C++ binding)
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_patchName); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "foamSolverWrapper.pyx":885
 *             # If patchName is a str, encode it (needed for your C++ binding)
 *             if isinstance(patchName, str):
 *                   patchName = patchName.encode('utf-8')             # <<<<<<<<<<<<<<
 * 
 *             # Get the area of each boundary face.
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_patchName, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 885, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_u_utf_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_utf_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 885, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_patchName, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "foamSolverWrapper.pyx":884
 * 
 *             # If patchName is a str, encode it (needed for your C++ binding)
 *             if isinstance(patchName, str):             # <<<<<<<<<<<<<<
 *                   patchName = patchName.encode('utf-8')
 * 
 */
  }

  /* "foamSolverWrapper.pyx":888
 * 
 *             # Get the area of each boundary face.
 *             faceArea = self.get_boundary_face_areas(patchName)             # <<<<<<<<<<<<<<
 * 
 *             # Get the face normals.
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_boundary_face_areas); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_patchName) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_patchName);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_faceArea = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":891
 * 
 *             # Get the face normals.
 *             faceNormal = self.get_boundary_face_normals(patchName)             # <<<<<<<<<<<<<<
 * 
 *             # Ensure faceNormal is a 3D array. If only two components are provided,
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_boundary_face_normals); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_patchName) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_patchName);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_faceNormal = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":895
 *             # Ensure faceNormal is a 3D array. If only two components are provided,
 *             # extend to 3D by adding a zero for the z component.
 *             if faceNormal.shape[1] == 2:             # <<<<<<<<<<<<<<
 *                   faceNormal = _np.hstack([faceNormal, _np.zeros((faceNormal.shape[0], 1))])
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_faceNormal, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_t_4, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "foamSolverWrapper.pyx":896
 *             # extend to 3D by adding a zero for the z component.
 *             if faceNormal.shape[1] == 2:
 *                   faceNormal = _np.hstack([faceNormal, _np.zeros((faceNormal.shape[0], 1))])             # <<<<<<<<<<<<<<
 * 
 *             # Normalize the face normal vectors.
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v__np, __pyx_n_s_hstack); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 896, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v__np, __pyx_n_s_zeros); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 896, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_faceNormal, __pyx_n_s_shape); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 896, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 896, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 896, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_int_1);
    __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 896, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyList_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 896, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_faceNormal);
    __Pyx_GIVEREF(__pyx_v_faceNormal);
    PyList_SET_ITEM(__pyx_t_6, 0, __pyx_v_faceNormal);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 896, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_faceNormal, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "foamSolverWrapper.pyx":895
 *             # Ensure faceNormal is a 3D array. If only two components are provided,
 *             # extend to 3D by adding a zero for the z component.
 *             if faceNormal.shape[1] == 2:             # <<<<<<<<<<<<<<
 *                   faceNormal = _np.hstack([faceNormal, _np.zeros((faceNormal.shape[0], 1))])
 * 
 */
  }

  /* "foamSolverWrapper.pyx":899
 * 
 *             # Normalize the face normal vectors.
 *             faceNormal = faceNormal / _np.linalg.norm(faceNormal, axis=1)[:, None]             # <<<<<<<<<<<<<<
 * 
 *             # In 3D there is no unique tangential vector.
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v__np, __pyx_n_s_linalg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_norm); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_faceNormal);
  __Pyx_GIVEREF(__pyx_v_faceNormal);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_faceNormal);
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_axis, __pyx_int_1) < 0) __PYX_ERR(0, 899, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_tuple__3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_v_faceNormal, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF_SET(__pyx_v_faceNormal, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "foamSolverWrapper.pyx":904
 *             # We define one by projecting a chosen global reference vector onto the tangent plane.
 *             # Choose [0, 0, 1] as the primary reference vector.
 *             global_ref = _np.array([0.0, 0.0, 1.0])             # <<<<<<<<<<<<<<
 *             alternative_ref = _np.array([1.0, 0.0, 0.0])  # use if face normal is parallel to global_ref
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v__np, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_float_0_0);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_float_0_0);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_float_1_0);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_4, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_global_ref = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "foamSolverWrapper.pyx":905
 *             # Choose [0, 0, 1] as the primary reference vector.
 *             global_ref = _np.array([0.0, 0.0, 1.0])
 *             alternative_ref = _np.array([1.0, 0.0, 0.0])  # use if face normal is parallel to global_ref             # <<<<<<<<<<<<<<
 * 
 *             # Build a unique tangential vector for each face.
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v__np, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_float_1_0);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_float_0_0);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_float_0_0);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_4, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_alternative_ref = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "foamSolverWrapper.pyx":908
 * 
 *             # Build a unique tangential vector for each face.
 *             faceTangent = []             # <<<<<<<<<<<<<<
 *             for i in range(faceNormal.shape[0]):
 *                   # Check if the face normal is nearly parallel to the global reference.
 */
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 908, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_faceTangent = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "foamSolverWrapper.pyx":909
 *             # Build a unique tangential vector for each face.
 *             faceTangent = []
 *             for i in range(faceNormal.shape[0]):             # <<<<<<<<<<<<<<
 *                   # Check if the face normal is nearly parallel to the global reference.
 *                   if abs(_np.dot(faceNormal[i], global_ref)) > 0.99:
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_faceNormal, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_6 = __pyx_t_5; __Pyx_INCREF(__pyx_t_6); __pyx_t_9 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 909, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_10 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 909, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_9); __Pyx_INCREF(__pyx_t_5); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 909, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 909, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_9); __Pyx_INCREF(__pyx_t_5); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 909, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 909, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_10(__pyx_t_6);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 909, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "foamSolverWrapper.pyx":911
 *             for i in range(faceNormal.shape[0]):
 *                   # Check if the face normal is nearly parallel to the global reference.
 *                   if abs(_np.dot(faceNormal[i], global_ref)) > 0.99:             # <<<<<<<<<<<<<<
 *                         ref = alternative_ref
 *                   else:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v__np, __pyx_n_s_dot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 911, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_faceNormal, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 911, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_4, __pyx_v_global_ref};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 911, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_4, __pyx_v_global_ref};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 911, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 911, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_11, __pyx_t_4);
      __Pyx_INCREF(__pyx_v_global_ref);
      __Pyx_GIVEREF(__pyx_v_global_ref);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_11, __pyx_v_global_ref);
      __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 911, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyNumber_Absolute(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 911, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_float_0_99, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 911, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 911, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_3) {

      /* "foamSolverWrapper.pyx":912
 *                   # Check if the face normal is nearly parallel to the global reference.
 *                   if abs(_np.dot(faceNormal[i], global_ref)) > 0.99:
 *                         ref = alternative_ref             # <<<<<<<<<<<<<<
 *                   else:
 *                         ref = global_ref
 */
      __Pyx_INCREF(__pyx_v_alternative_ref);
      __Pyx_XDECREF_SET(__pyx_v_ref, __pyx_v_alternative_ref);

      /* "foamSolverWrapper.pyx":911
 *             for i in range(faceNormal.shape[0]):
 *                   # Check if the face normal is nearly parallel to the global reference.
 *                   if abs(_np.dot(faceNormal[i], global_ref)) > 0.99:             # <<<<<<<<<<<<<<
 *                         ref = alternative_ref
 *                   else:
 */
      goto __pyx_L7;
    }

    /* "foamSolverWrapper.pyx":914
 *                         ref = alternative_ref
 *                   else:
 *                         ref = global_ref             # <<<<<<<<<<<<<<
 *                   # Project the reference vector onto the plane tangent to faceNormal.
 *                   tangent = ref - _np.dot(ref, faceNormal[i]) * faceNormal[i]
 */
    /*else*/ {
      __Pyx_INCREF(__pyx_v_global_ref);
      __Pyx_XDECREF_SET(__pyx_v_ref, __pyx_v_global_ref);
    }
    __pyx_L7:;

    /* "foamSolverWrapper.pyx":916
 *                         ref = global_ref
 *                   # Project the reference vector onto the plane tangent to faceNormal.
 *                   tangent = ref - _np.dot(ref, faceNormal[i]) * faceNormal[i]             # <<<<<<<<<<<<<<
 *                   tangent = tangent / _np.linalg.norm(tangent)
 *                   faceTangent.append(tangent)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v__np, __pyx_n_s_dot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 916, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_faceNormal, __pyx_v_i); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 916, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_4 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_ref, __pyx_t_8};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 916, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_ref, __pyx_t_8};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 916, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 916, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_ref);
      __Pyx_GIVEREF(__pyx_v_ref);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_11, __pyx_v_ref);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_11, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 916, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_faceNormal, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 916, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyNumber_Multiply(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 916, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Subtract(__pyx_v_ref, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 916, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_tangent, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "foamSolverWrapper.pyx":917
 *                   # Project the reference vector onto the plane tangent to faceNormal.
 *                   tangent = ref - _np.dot(ref, faceNormal[i]) * faceNormal[i]
 *                   tangent = tangent / _np.linalg.norm(tangent)             # <<<<<<<<<<<<<<
 *                   faceTangent.append(tangent)
 *             faceTangent = _np.array(faceTangent)
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v__np, __pyx_n_s_linalg); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_norm); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_v_tangent) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_tangent);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_v_tangent, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_tangent, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "foamSolverWrapper.pyx":918
 *                   tangent = ref - _np.dot(ref, faceNormal[i]) * faceNormal[i]
 *                   tangent = tangent / _np.linalg.norm(tangent)
 *                   faceTangent.append(tangent)             # <<<<<<<<<<<<<<
 *             faceTangent = _np.array(faceTangent)
 * 
 */
    __pyx_t_12 = __Pyx_PyObject_Append(__pyx_v_faceTangent, __pyx_v_tangent); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 918, __pyx_L1_error)

    /* "foamSolverWrapper.pyx":909
 *             # Build a unique tangential vector for each face.
 *             faceTangent = []
 *             for i in range(faceNormal.shape[0]):             # <<<<<<<<<<<<<<
 *                   # Check if the face normal is nearly parallel to the global reference.
 *                   if abs(_np.dot(faceNormal[i], global_ref)) > 0.99:
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "foamSolverWrapper.pyx":919
 *                   tangent = tangent / _np.linalg.norm(tangent)
 *                   faceTangent.append(tangent)
 *             faceTangent = _np.array(faceTangent)             # <<<<<<<<<<<<<<
 * 
 *             # Compute the normal pressure gradient at each face.
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v__np, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 919, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_6 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_1, __pyx_v_faceTangent) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_faceTangent);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 919, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_faceTangent, __pyx_t_6);
  __pyx_t_6 = 0;

  /* "foamSolverWrapper.pyx":922
 * 
 *             # Compute the normal pressure gradient at each face.
 *             dpdn = dpdx * faceNormal[:, 0] + dpdy * faceNormal[:, 1] + dpdz * faceNormal[:, 2]             # <<<<<<<<<<<<<<
 *             dpdn_x = dpdn * faceNormal[:, 0]
 *             dpdn_y = dpdn * faceNormal[:, 1]
 */
  __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_faceNormal, __pyx_tuple__4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyNumber_Multiply(__pyx_v_dpdx, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_faceNormal, __pyx_tuple__5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_dpdy, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_faceNormal, __pyx_tuple__6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyNumber_Multiply(__pyx_v_dpdz, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_dpdn = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":923
 *             # Compute the normal pressure gradient at each face.
 *             dpdn = dpdx * faceNormal[:, 0] + dpdy * faceNormal[:, 1] + dpdz * faceNormal[:, 2]
 *             dpdn_x = dpdn * faceNormal[:, 0]             # <<<<<<<<<<<<<<
 *             dpdn_y = dpdn * faceNormal[:, 1]
 *             dpdn_z = dpdn * faceNormal[:, 2]
 */
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_faceNormal, __pyx_tuple__4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyNumber_Multiply(__pyx_v_dpdn, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dpdn_x = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "foamSolverWrapper.pyx":924
 *             dpdn = dpdx * faceNormal[:, 0] + dpdy * faceNormal[:, 1] + dpdz * faceNormal[:, 2]
 *             dpdn_x = dpdn * faceNormal[:, 0]
 *             dpdn_y = dpdn * faceNormal[:, 1]             # <<<<<<<<<<<<<<
 *             dpdn_z = dpdn * faceNormal[:, 2]
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_faceNormal, __pyx_tuple__5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_dpdn, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_dpdn_y = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":925
 *             dpdn_x = dpdn * faceNormal[:, 0]
 *             dpdn_y = dpdn * faceNormal[:, 1]
 *             dpdn_z = dpdn * faceNormal[:, 2]             # <<<<<<<<<<<<<<
 * 
 *             # Compute the tangential components (difference between full gradient and its normal projection).
 */
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_faceNormal, __pyx_tuple__6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyNumber_Multiply(__pyx_v_dpdn, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dpdn_z = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "foamSolverWrapper.pyx":928
 * 
 *             # Compute the tangential components (difference between full gradient and its normal projection).
 *             dpdt_x = dpdx - dpdn_x             # <<<<<<<<<<<<<<
 *             dpdt_y = dpdy - dpdn_y
 *             dpdt_z = dpdz - dpdn_z
 */
  __pyx_t_5 = PyNumber_Subtract(__pyx_v_dpdx, __pyx_v_dpdn_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_dpdt_x = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "foamSolverWrapper.pyx":929
 *             # Compute the tangential components (difference between full gradient and its normal projection).
 *             dpdt_x = dpdx - dpdn_x
 *             dpdt_y = dpdy - dpdn_y             # <<<<<<<<<<<<<<
 *             dpdt_z = dpdz - dpdn_z
 *             # dpdt (magnitude of the tangential gradient) is computed for informational purposes.
 */
  __pyx_t_5 = PyNumber_Subtract(__pyx_v_dpdy, __pyx_v_dpdn_y); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_dpdt_y = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "foamSolverWrapper.pyx":930
 *             dpdt_x = dpdx - dpdn_x
 *             dpdt_y = dpdy - dpdn_y
 *             dpdt_z = dpdz - dpdn_z             # <<<<<<<<<<<<<<
 *             # dpdt (magnitude of the tangential gradient) is computed for informational purposes.
 *             dpdt = _np.sqrt(dpdt_x**2 + dpdt_y**2 + dpdt_z**2)
 */
  __pyx_t_5 = PyNumber_Subtract(__pyx_v_dpdz, __pyx_v_dpdn_z); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_dpdt_z = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "foamSolverWrapper.pyx":932
 *             dpdt_z = dpdz - dpdn_z
 *             # dpdt (magnitude of the tangential gradient) is computed for informational purposes.
 *             dpdt = _np.sqrt(dpdt_x**2 + dpdt_y**2 + dpdt_z**2)             # <<<<<<<<<<<<<<
 * 
 *             # Compute the tangential pressure difference along the boundary.
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v__np, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyNumber_Power(__pyx_v_dpdt_x, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyNumber_Power(__pyx_v_dpdt_y, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyNumber_Add(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyNumber_Power(__pyx_v_dpdt_z, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = PyNumber_Add(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dpdt = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "foamSolverWrapper.pyx":936
 *             # Compute the tangential pressure difference along the boundary.
 *             # Here we take the dot product of the tangential component with our defined tangent vector.
 *             faceDeltaP = (dpdt_x * faceTangent[:, 0] +             # <<<<<<<<<<<<<<
 *                               dpdt_y * faceTangent[:, 1] +
 *                               dpdt_z * faceTangent[:, 2]) * faceArea
 */
  __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_faceTangent, __pyx_tuple__4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_dpdt_x, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "foamSolverWrapper.pyx":937
 *             # Here we take the dot product of the tangential component with our defined tangent vector.
 *             faceDeltaP = (dpdt_x * faceTangent[:, 0] +
 *                               dpdt_y * faceTangent[:, 1] +             # <<<<<<<<<<<<<<
 *                               dpdt_z * faceTangent[:, 2]) * faceArea
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_faceTangent, __pyx_tuple__5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_v_dpdt_y, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "foamSolverWrapper.pyx":936
 *             # Compute the tangential pressure difference along the boundary.
 *             # Here we take the dot product of the tangential component with our defined tangent vector.
 *             faceDeltaP = (dpdt_x * faceTangent[:, 0] +             # <<<<<<<<<<<<<<
 *                               dpdt_y * faceTangent[:, 1] +
 *                               dpdt_z * faceTangent[:, 2]) * faceArea
 */
  __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "foamSolverWrapper.pyx":938
 *             faceDeltaP = (dpdt_x * faceTangent[:, 0] +
 *                               dpdt_y * faceTangent[:, 1] +
 *                               dpdt_z * faceTangent[:, 2]) * faceArea             # <<<<<<<<<<<<<<
 * 
 *             # Calculate net and total absolute pressure differences along the boundary.
 */
  __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_faceTangent, __pyx_tuple__6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 938, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_dpdt_z, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 938, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "foamSolverWrapper.pyx":937
 *             # Here we take the dot product of the tangential component with our defined tangent vector.
 *             faceDeltaP = (dpdt_x * faceTangent[:, 0] +
 *                               dpdt_y * faceTangent[:, 1] +             # <<<<<<<<<<<<<<
 *                               dpdt_z * faceTangent[:, 2]) * faceArea
 * 
 */
  __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":938
 *             faceDeltaP = (dpdt_x * faceTangent[:, 0] +
 *                               dpdt_y * faceTangent[:, 1] +
 *                               dpdt_z * faceTangent[:, 2]) * faceArea             # <<<<<<<<<<<<<<
 * 
 *             # Calculate net and total absolute pressure differences along the boundary.
 */
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_6, __pyx_v_faceArea); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 938, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_faceDeltaP = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":941
 * 
 *             # Calculate net and total absolute pressure differences along the boundary.
 *             totalDeltaP = _np.sum(faceDeltaP)             # <<<<<<<<<<<<<<
 *             totalAbsDeltaP = _np.sum(_np.abs(faceDeltaP))
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v__np, __pyx_n_s_sum); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_v_faceDeltaP) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_faceDeltaP);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_totalDeltaP = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":942
 *             # Calculate net and total absolute pressure differences along the boundary.
 *             totalDeltaP = _np.sum(faceDeltaP)
 *             totalAbsDeltaP = _np.sum(_np.abs(faceDeltaP))             # <<<<<<<<<<<<<<
 * 
 *             # Compute the correction for the velocity component normal to each face.
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v__np, __pyx_n_s_sum); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v__np, __pyx_n_s_abs); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_v_faceDeltaP) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_faceDeltaP);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_totalAbsDeltaP = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":945
 * 
 *             # Compute the correction for the velocity component normal to each face.
 *             facePressureGradientCorr = (-(_np.abs(faceDeltaP) / totalAbsDeltaP) * totalDeltaP) / faceArea             # <<<<<<<<<<<<<<
 * 
 *             # Apply the correction along the face normal direction.
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v__np, __pyx_n_s_abs); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_v_faceDeltaP) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_faceDeltaP);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_totalAbsDeltaP); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Negative(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_1, __pyx_v_totalDeltaP); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_6, __pyx_v_faceArea); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_facePressureGradientCorr = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":948
 * 
 *             # Apply the correction along the face normal direction.
 *             dpdx += facePressureGradientCorr * faceNormal[:, 0]             # <<<<<<<<<<<<<<
 *             dpdy += facePressureGradientCorr * faceNormal[:, 1]
 *             dpdz += facePressureGradientCorr * faceNormal[:, 2]
 */
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_faceNormal, __pyx_tuple__4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyNumber_Multiply(__pyx_v_facePressureGradientCorr, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_dpdx, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF_SET(__pyx_v_dpdx, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":949
 *             # Apply the correction along the face normal direction.
 *             dpdx += facePressureGradientCorr * faceNormal[:, 0]
 *             dpdy += facePressureGradientCorr * faceNormal[:, 1]             # <<<<<<<<<<<<<<
 *             dpdz += facePressureGradientCorr * faceNormal[:, 2]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_faceNormal, __pyx_tuple__5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyNumber_Multiply(__pyx_v_facePressureGradientCorr, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_dpdy, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF_SET(__pyx_v_dpdy, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":950
 *             dpdx += facePressureGradientCorr * faceNormal[:, 0]
 *             dpdy += facePressureGradientCorr * faceNormal[:, 1]
 *             dpdz += facePressureGradientCorr * faceNormal[:, 2]             # <<<<<<<<<<<<<<
 * 
 *             return dpdx, dpdy, dpdz
 */
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_faceNormal, __pyx_tuple__6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyNumber_Multiply(__pyx_v_facePressureGradientCorr, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_dpdz, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF_SET(__pyx_v_dpdz, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":952
 *             dpdz += facePressureGradientCorr * faceNormal[:, 2]
 * 
 *             return dpdx, dpdy, dpdz             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_dpdx);
  __Pyx_GIVEREF(__pyx_v_dpdx);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_dpdx);
  __Pyx_INCREF(__pyx_v_dpdy);
  __Pyx_GIVEREF(__pyx_v_dpdy);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_dpdy);
  __Pyx_INCREF(__pyx_v_dpdz);
  __Pyx_GIVEREF(__pyx_v_dpdz);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_dpdz);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":860
 * 
 * 
 *       def correct_normal_pressure_gradient(self, dpdx, dpdy, dpdz, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Correct the normal pressure gradient at each face along the numerical boundary.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.correct_normal_pressure_gradient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_np);
  __Pyx_XDECREF(__pyx_v__np);
  __Pyx_XDECREF(__pyx_v_faceArea);
  __Pyx_XDECREF(__pyx_v_faceNormal);
  __Pyx_XDECREF(__pyx_v_global_ref);
  __Pyx_XDECREF(__pyx_v_alternative_ref);
  __Pyx_XDECREF(__pyx_v_faceTangent);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_ref);
  __Pyx_XDECREF(__pyx_v_tangent);
  __Pyx_XDECREF(__pyx_v_dpdn);
  __Pyx_XDECREF(__pyx_v_dpdn_x);
  __Pyx_XDECREF(__pyx_v_dpdn_y);
  __Pyx_XDECREF(__pyx_v_dpdn_z);
  __Pyx_XDECREF(__pyx_v_dpdt_x);
  __Pyx_XDECREF(__pyx_v_dpdt_y);
  __Pyx_XDECREF(__pyx_v_dpdt_z);
  __Pyx_XDECREF(__pyx_v_dpdt);
  __Pyx_XDECREF(__pyx_v_faceDeltaP);
  __Pyx_XDECREF(__pyx_v_totalDeltaP);
  __Pyx_XDECREF(__pyx_v_totalAbsDeltaP);
  __Pyx_XDECREF(__pyx_v_facePressureGradientCorr);
  __Pyx_XDECREF(__pyx_v_dpdx);
  __Pyx_XDECREF(__pyx_v_dpdy);
  __Pyx_XDECREF(__pyx_v_dpdz);
  __Pyx_XDECREF(__pyx_v_patchName);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":956
 * 
 * 
 *       def get_total_circulation(self):             # <<<<<<<<<<<<<<
 *             """
 *             Get the total circulation in the finite volume mesh region.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_77get_total_circulation(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_76get_total_circulation[] = "pyFoamSolver.get_total_circulation(self)\nFile: foamSolverWrapper.pyx (starting at line 956)\n\n            Get the total circulation in the finite volume mesh region.\n\n            Returns\n            -------\n            float\n                  Total circulation within the finite volume mesh region (m\302\262/s).\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_77get_total_circulation = {"get_total_circulation", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_77get_total_circulation, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_76get_total_circulation};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_77get_total_circulation(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_total_circulation (wrapper)", 0);
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_76get_total_circulation(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_76get_total_circulation(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self) {
  PyObject *__pyx_v_gx = NULL;
  PyObject *__pyx_v_gy = NULL;
  PyObject *__pyx_v_gz = NULL;
  PyObject *__pyx_v_circulation = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_total_circulation", 0);

  /* "foamSolverWrapper.pyx":965
 *                   Total circulation within the finite volume mesh region (m/s).
 *             """
 *             gx, gy, gz = self.get_finite_volume_mesh_circulation()             # <<<<<<<<<<<<<<
 *             circulation = _np.sqrt(gx ** 2 + gy ** 2 + gz ** 2).sum()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_finite_volume_mesh_circulati); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 965, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 965, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 965, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 965, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 965, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 965, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 965, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) __PYX_ERR(0, 965, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 965, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_gx = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_gy = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_gz = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "foamSolverWrapper.pyx":966
 *             """
 *             gx, gy, gz = self.get_finite_volume_mesh_circulation()
 *             circulation = _np.sqrt(gx ** 2 + gy ** 2 + gz ** 2).sum()             # <<<<<<<<<<<<<<
 * 
 *             return circulation
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Power(__pyx_v_gx, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyNumber_Power(__pyx_v_gy, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyNumber_Add(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Power(__pyx_v_gz, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyNumber_Add(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_sum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_circulation = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":968
 *             circulation = _np.sqrt(gx ** 2 + gy ** 2 + gz ** 2).sum()
 * 
 *             return circulation             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_circulation);
  __pyx_r = __pyx_v_circulation;
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":956
 * 
 * 
 *       def get_total_circulation(self):             # <<<<<<<<<<<<<<
 *             """
 *             Get the total circulation in the finite volume mesh region.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_total_circulation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_gx);
  __Pyx_XDECREF(__pyx_v_gy);
  __Pyx_XDECREF(__pyx_v_gz);
  __Pyx_XDECREF(__pyx_v_circulation);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foamSolverWrapper.pyx":971
 * 
 * 
 *       def get_mesh_centroid(self):             # <<<<<<<<<<<<<<
 *             """
 *             Calculate the centroid of the mesh.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_79get_mesh_centroid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_78get_mesh_centroid[] = "pyFoamSolver.get_mesh_centroid(self)\nFile: foamSolverWrapper.pyx (starting at line 971)\n\n            Calculate the centroid of the mesh.\n\n            Returns\n            -------\n            ndarray\n                  Coordinates of the mesh centroid (3,).\n            ";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_79get_mesh_centroid = {"get_mesh_centroid", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_79get_mesh_centroid, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_78get_mesh_centroid};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_79get_mesh_centroid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_mesh_centroid (wrapper)", 0);
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_78get_mesh_centroid(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_78get_mesh_centroid(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self) {
  PyObject *__pyx_v_cellVolume = NULL;
  PyObject *__pyx_v_cellCoordinates = NULL;
  PyObject *__pyx_v_cellVolumeSum = NULL;
  PyObject *__pyx_v_centroid = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_mesh_centroid", 0);

  /* "foamSolverWrapper.pyx":980
 *                   Coordinates of the mesh centroid (3,).
 *             """
 *             cellVolume = self.get_cell_volumes()             # <<<<<<<<<<<<<<
 *             cellCoordinates = self.get_cell_center_coordinates()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_cell_volumes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_cellVolume = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":981
 *             """
 *             cellVolume = self.get_cell_volumes()
 *             cellCoordinates = self.get_cell_center_coordinates()             # <<<<<<<<<<<<<<
 * 
 *             cellVolumeSum = cellVolume.sum()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_cell_center_coordinates); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_cellCoordinates = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":983
 *             cellCoordinates = self.get_cell_center_coordinates()
 * 
 *             cellVolumeSum = cellVolume.sum()             # <<<<<<<<<<<<<<
 * 
 *             centroid = _np.dot(cellVolume, cellCoordinates) / cellVolumeSum
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_cellVolume, __pyx_n_s_sum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 983, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 983, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_cellVolumeSum = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":985
 *             cellVolumeSum = cellVolume.sum()
 * 
 *             centroid = _np.dot(cellVolume, cellCoordinates) / cellVolumeSum             # <<<<<<<<<<<<<<
 * 
 *             return centroid
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_dot); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_cellVolume, __pyx_v_cellCoordinates};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 985, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_cellVolume, __pyx_v_cellCoordinates};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 985, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 985, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_cellVolume);
    __Pyx_GIVEREF(__pyx_v_cellVolume);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_cellVolume);
    __Pyx_INCREF(__pyx_v_cellCoordinates);
    __Pyx_GIVEREF(__pyx_v_cellCoordinates);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_cellCoordinates);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 985, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_cellVolumeSum); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_centroid = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "foamSolverWrapper.pyx":987
 *             centroid = _np.dot(cellVolume, cellCoordinates) / cellVolumeSum
 * 
 *             return centroid             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_centroid);
  __pyx_r = __pyx_v_centroid;
  goto __pyx_L0;

  /* "foamSolverWrapper.pyx":971
 * 
 * 
 *       def get_mesh_centroid(self):             # <<<<<<<<<<<<<<
 *             """
 *             Calculate the centroid of the mesh.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.get_mesh_centroid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cellVolume);
  __Pyx_XDECREF(__pyx_v_cellCoordinates);
  __Pyx_XDECREF(__pyx_v_cellVolumeSum);
  __Pyx_XDECREF(__pyx_v_centroid);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_81__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_80__reduce_cython__[] = "pyFoamSolver.__reduce_cython__(self)\nFile: stringsource (starting at line 1)";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_81__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_81__reduce_cython__, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_80__reduce_cython__};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_81__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_80__reduce_cython__(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_80__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_83__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_82__setstate_cython__[] = "pyFoamSolver.__setstate_cython__(self, __pyx_state)\nFile: stringsource (starting at line 3)";
static PyMethodDef __pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_83__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_83__setstate_cython__, METH_O, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_82__setstate_cython__};
static PyObject *__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_83__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_82__setstate_cython__(((struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_82__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openONDA.solvers.FVM.fvmModule.pyFoamSolver.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":735
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":738
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":741
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":744
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":747
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":751
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":753
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":928
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":929
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":930
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":928
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":932
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":933
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":934
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":935
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":934
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":936
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":932
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":940
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":941
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":942
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 942, __pyx_L3_error)

      /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":941
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":943
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 943, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":944
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 944, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 944, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":941
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":940
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":946
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":947
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":948
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 948, __pyx_L3_error)

      /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":947
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":949
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 949, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":950
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 950, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 950, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":947
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":946
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":952
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":953
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":954
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 954, __pyx_L3_error)

      /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":953
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":955
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 955, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":956
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 956, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 956, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":953
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":952
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_timedelta64_object", 0);

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":978
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":981
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_datetime64_object", 0);

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":993
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":981
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":996
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":1003
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":996
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":1006
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":1010
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":1006
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":1013
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":1017
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":1013
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

static PyObject *__pyx_tp_new_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver[] = {
  {"evolve", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_5evolve, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_4evolve},
  {"evolve_mesh", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_7evolve_mesh, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_6evolve_mesh},
  {"evolve_only_solution", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_9evolve_only_solution, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_8evolve_only_solution},
  {"correct_mass_flux", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_11correct_mass_flux, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_10correct_mass_flux},
  {"get_run_time_value", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_13get_run_time_value, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_12get_run_time_value},
  {"get_time_step", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_15get_time_step, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_14get_time_step},
  {"get_number_of_nodes", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_17get_number_of_nodes, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_16get_number_of_nodes},
  {"get_number_of_cells", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_19get_number_of_cells, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_18get_number_of_cells},
  {"get_number_of_boundary_nodes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_21get_number_of_boundary_nodes, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_20get_number_of_boundary_nodes},
  {"get_number_of_boundary_faces", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_23get_number_of_boundary_faces, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_22get_number_of_boundary_faces},
  {"get_node_coordinates", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_25get_node_coordinates, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_24get_node_coordinates},
  {"get_connectivity", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_27get_connectivity, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_26get_connectivity},
  {"get_cell_volumes", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_29get_cell_volumes, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_28get_cell_volumes},
  {"get_cell_center_coordinates", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_31get_cell_center_coordinates, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_30get_cell_center_coordinates},
  {"get_boundary_node_coordinates", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_33get_boundary_node_coordinates, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_32get_boundary_node_coordinates},
  {"get_boundary_node_normal", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_35get_boundary_node_normal, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_34get_boundary_node_normal},
  {"get_boundary_face_center_coordinates", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_37get_boundary_face_center_coordinates, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_36get_boundary_face_center_coordinates},
  {"get_boundary_face_areas", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_39get_boundary_face_areas, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_38get_boundary_face_areas},
  {"get_boundary_face_normals", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_41get_boundary_face_normals, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_40get_boundary_face_normals},
  {"get_boundary_cell_center_coordinates", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_43get_boundary_cell_center_coordinates, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_42get_boundary_cell_center_coordinates},
  {"get_velocity_field", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_45get_velocity_field, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_44get_velocity_field},
  {"get_velocity_boundary_field", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_47get_velocity_boundary_field, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_46get_velocity_boundary_field},
  {"get_pressure_field", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_49get_pressure_field, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_48get_pressure_field},
  {"get_velocity_gradient", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_51get_velocity_gradient, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_50get_velocity_gradient},
  {"get_velocity_gradient_boundary_field", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_53get_velocity_gradient_boundary_field, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_52get_velocity_gradient_boundary_field},
  {"get_pressure_gradient_field", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_55get_pressure_gradient_field, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_54get_pressure_gradient_field},
  {"get_pressure_boundary_field", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_57get_pressure_boundary_field, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_56get_pressure_boundary_field},
  {"get_pressure_gradient_boundary_field", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_59get_pressure_gradient_boundary_field, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_58get_pressure_gradient_boundary_field},
  {"get_vorticity_field", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_61get_vorticity_field, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_60get_vorticity_field},
  {"get_vorticity_boundary_field", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_63get_vorticity_boundary_field, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_62get_vorticity_boundary_field},
  {"set_time_step", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_65set_time_step, METH_O, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_64set_time_step},
  {"set_dirichlet_velocity_boundary_condition", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_67set_dirichlet_velocity_boundary_condition, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_66set_dirichlet_velocity_boundary_condition},
  {"set_dirichlet_pressure_boundary_condition", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_69set_dirichlet_pressure_boundary_condition, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_68set_dirichlet_pressure_boundary_condition},
  {"set_neumann_pressure_boundary_condition", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_71set_neumann_pressure_boundary_condition, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_70set_neumann_pressure_boundary_condition},
  {"correct_mass_flux_python", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_73correct_mass_flux_python, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_72correct_mass_flux_python},
  {"correct_normal_pressure_gradient", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_75correct_normal_pressure_gradient, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_74correct_normal_pressure_gradient},
  {"get_total_circulation", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_77get_total_circulation, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_76get_total_circulation},
  {"get_mesh_centroid", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_79get_mesh_centroid, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_78get_mesh_centroid},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_81__reduce_cython__, METH_NOARGS, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_80__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_83__setstate_cython__, METH_O, __pyx_doc_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_82__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver = {
  PyVarObject_HEAD_INIT(0, 0)
  "openONDA.solvers.FVM.fvmModule.pyFoamSolver", /*tp_name*/
  sizeof(struct __pyx_obj_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "File: foamSolverWrapper.pyx (starting at line 40)\n\n      pyFoamSolver: Python interface for interacting with OpenFOAM solvers.\n\n      This class provides methods to evolve the simulation, retrieve mesh properties,\n      and correct mass fluxes.\n      ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_fvmModule(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_fvmModule},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "fvmModule",
    __pyx_k_File_foamSolverWrapper_pyx_start, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_abs, __pyx_k_abs, sizeof(__pyx_k_abs), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_alternative_ref, __pyx_k_alternative_ref, sizeof(__pyx_k_alternative_ref), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_axis, __pyx_k_axis, sizeof(__pyx_k_axis), 0, 0, 1, 1},
  {&__pyx_n_s_bondCellCenterCoordinates, __pyx_k_bondCellCenterCoordinates, sizeof(__pyx_k_bondCellCenterCoordinates), 0, 0, 1, 1},
  {&__pyx_n_s_bondFaceCenterCoordinates, __pyx_k_bondFaceCenterCoordinates, sizeof(__pyx_k_bondFaceCenterCoordinates), 0, 0, 1, 1},
  {&__pyx_n_s_bondFaceNormals, __pyx_k_bondFaceNormals, sizeof(__pyx_k_bondFaceNormals), 0, 0, 1, 1},
  {&__pyx_n_s_bondNodeNormals, __pyx_k_bondNodeNormals, sizeof(__pyx_k_bondNodeNormals), 0, 0, 1, 1},
  {&__pyx_n_s_bondNodesCoordinates, __pyx_k_bondNodesCoordinates, sizeof(__pyx_k_bondNodesCoordinates), 0, 0, 1, 1},
  {&__pyx_n_s_boundaryFaceAreas, __pyx_k_boundaryFaceAreas, sizeof(__pyx_k_boundaryFaceAreas), 0, 0, 1, 1},
  {&__pyx_n_s_cellCenters, __pyx_k_cellCenters, sizeof(__pyx_k_cellCenters), 0, 0, 1, 1},
  {&__pyx_n_s_cellCoordinates, __pyx_k_cellCoordinates, sizeof(__pyx_k_cellCoordinates), 0, 0, 1, 1},
  {&__pyx_n_s_cellVolume, __pyx_k_cellVolume, sizeof(__pyx_k_cellVolume), 0, 0, 1, 1},
  {&__pyx_n_s_cellVolumeSum, __pyx_k_cellVolumeSum, sizeof(__pyx_k_cellVolumeSum), 0, 0, 1, 1},
  {&__pyx_n_s_cellVolumes, __pyx_k_cellVolumes, sizeof(__pyx_k_cellVolumes), 0, 0, 1, 1},
  {&__pyx_n_s_cellXYZ, __pyx_k_cellXYZ, sizeof(__pyx_k_cellXYZ), 0, 0, 1, 1},
  {&__pyx_n_s_centroid, __pyx_k_centroid, sizeof(__pyx_k_centroid), 0, 0, 1, 1},
  {&__pyx_n_s_circulation, __pyx_k_circulation, sizeof(__pyx_k_circulation), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_connectivity, __pyx_k_connectivity, sizeof(__pyx_k_connectivity), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_correct_mass_flux, __pyx_k_correct_mass_flux, sizeof(__pyx_k_correct_mass_flux), 0, 0, 1, 1},
  {&__pyx_n_s_correct_mass_flux_python, __pyx_k_correct_mass_flux_python, sizeof(__pyx_k_correct_mass_flux_python), 0, 0, 1, 1},
  {&__pyx_n_s_correct_normal_pressure_gradient, __pyx_k_correct_normal_pressure_gradient, sizeof(__pyx_k_correct_normal_pressure_gradient), 0, 0, 1, 1},
  {&__pyx_n_s_ctypes, __pyx_k_ctypes, sizeof(__pyx_k_ctypes), 0, 0, 1, 1},
  {&__pyx_n_s_deltaT, __pyx_k_deltaT, sizeof(__pyx_k_deltaT), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_dot, __pyx_k_dot, sizeof(__pyx_k_dot), 0, 0, 1, 1},
  {&__pyx_n_s_dpdn, __pyx_k_dpdn, sizeof(__pyx_k_dpdn), 0, 0, 1, 1},
  {&__pyx_n_s_dpdn_x, __pyx_k_dpdn_x, sizeof(__pyx_k_dpdn_x), 0, 0, 1, 1},
  {&__pyx_n_s_dpdn_y, __pyx_k_dpdn_y, sizeof(__pyx_k_dpdn_y), 0, 0, 1, 1},
  {&__pyx_n_s_dpdn_z, __pyx_k_dpdn_z, sizeof(__pyx_k_dpdn_z), 0, 0, 1, 1},
  {&__pyx_n_s_dpdt, __pyx_k_dpdt, sizeof(__pyx_k_dpdt), 0, 0, 1, 1},
  {&__pyx_n_s_dpdt_x, __pyx_k_dpdt_x, sizeof(__pyx_k_dpdt_x), 0, 0, 1, 1},
  {&__pyx_n_s_dpdt_y, __pyx_k_dpdt_y, sizeof(__pyx_k_dpdt_y), 0, 0, 1, 1},
  {&__pyx_n_s_dpdt_z, __pyx_k_dpdt_z, sizeof(__pyx_k_dpdt_z), 0, 0, 1, 1},
  {&__pyx_n_s_dpdx, __pyx_k_dpdx, sizeof(__pyx_k_dpdx), 0, 0, 1, 1},
  {&__pyx_n_s_dpdxBoundary, __pyx_k_dpdxBoundary, sizeof(__pyx_k_dpdxBoundary), 0, 0, 1, 1},
  {&__pyx_n_s_dpdy, __pyx_k_dpdy, sizeof(__pyx_k_dpdy), 0, 0, 1, 1},
  {&__pyx_n_s_dpdyBoundary, __pyx_k_dpdyBoundary, sizeof(__pyx_k_dpdyBoundary), 0, 0, 1, 1},
  {&__pyx_n_s_dpdz, __pyx_k_dpdz, sizeof(__pyx_k_dpdz), 0, 0, 1, 1},
  {&__pyx_n_s_dpdzBoundary, __pyx_k_dpdzBoundary, sizeof(__pyx_k_dpdzBoundary), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_evolve, __pyx_k_evolve, sizeof(__pyx_k_evolve), 0, 0, 1, 1},
  {&__pyx_n_s_evolve_mesh, __pyx_k_evolve_mesh, sizeof(__pyx_k_evolve_mesh), 0, 0, 1, 1},
  {&__pyx_n_s_evolve_only_solution, __pyx_k_evolve_only_solution, sizeof(__pyx_k_evolve_only_solution), 0, 0, 1, 1},
  {&__pyx_n_s_faceArea, __pyx_k_faceArea, sizeof(__pyx_k_faceArea), 0, 0, 1, 1},
  {&__pyx_n_s_faceDeltaP, __pyx_k_faceDeltaP, sizeof(__pyx_k_faceDeltaP), 0, 0, 1, 1},
  {&__pyx_n_s_faceFlux, __pyx_k_faceFlux, sizeof(__pyx_k_faceFlux), 0, 0, 1, 1},
  {&__pyx_n_s_faceNormal, __pyx_k_faceNormal, sizeof(__pyx_k_faceNormal), 0, 0, 1, 1},
  {&__pyx_n_s_facePressureGradientCorr, __pyx_k_facePressureGradientCorr, sizeof(__pyx_k_facePressureGradientCorr), 0, 0, 1, 1},
  {&__pyx_n_s_faceTangent, __pyx_k_faceTangent, sizeof(__pyx_k_faceTangent), 0, 0, 1, 1},
  {&__pyx_n_s_faceVelocityCorr, __pyx_k_faceVelocityCorr, sizeof(__pyx_k_faceVelocityCorr), 0, 0, 1, 1},
  {&__pyx_n_s_faceVelocityX, __pyx_k_faceVelocityX, sizeof(__pyx_k_faceVelocityX), 0, 0, 1, 1},
  {&__pyx_n_s_faceVelocityX2, __pyx_k_faceVelocityX2, sizeof(__pyx_k_faceVelocityX2), 0, 0, 1, 1},
  {&__pyx_n_s_faceVelocityY, __pyx_k_faceVelocityY, sizeof(__pyx_k_faceVelocityY), 0, 0, 1, 1},
  {&__pyx_n_s_faceVelocityY2, __pyx_k_faceVelocityY2, sizeof(__pyx_k_faceVelocityY2), 0, 0, 1, 1},
  {&__pyx_n_s_faceVelocityZ, __pyx_k_faceVelocityZ, sizeof(__pyx_k_faceVelocityZ), 0, 0, 1, 1},
  {&__pyx_n_s_faceVelocityZ2, __pyx_k_faceVelocityZ2, sizeof(__pyx_k_faceVelocityZ2), 0, 0, 1, 1},
  {&__pyx_n_s_faceXYZ, __pyx_k_faceXYZ, sizeof(__pyx_k_faceXYZ), 0, 0, 1, 1},
  {&__pyx_n_s_float64, __pyx_k_float64, sizeof(__pyx_k_float64), 0, 0, 1, 1},
  {&__pyx_kp_s_foamSolverWrapper_pyx, __pyx_k_foamSolverWrapper_pyx, sizeof(__pyx_k_foamSolverWrapper_pyx), 0, 0, 1, 0},
  {&__pyx_kp_u_fvmModule_Interface_for_OpenFOA, __pyx_k_fvmModule_Interface_for_OpenFOA, sizeof(__pyx_k_fvmModule_Interface_for_OpenFOA), 0, 1, 0, 0},
  {&__pyx_n_s_get_boundary_cell_center_coordin, __pyx_k_get_boundary_cell_center_coordin, sizeof(__pyx_k_get_boundary_cell_center_coordin), 0, 0, 1, 1},
  {&__pyx_n_s_get_boundary_face_areas, __pyx_k_get_boundary_face_areas, sizeof(__pyx_k_get_boundary_face_areas), 0, 0, 1, 1},
  {&__pyx_n_s_get_boundary_face_center_coordin, __pyx_k_get_boundary_face_center_coordin, sizeof(__pyx_k_get_boundary_face_center_coordin), 0, 0, 1, 1},
  {&__pyx_n_s_get_boundary_face_normals, __pyx_k_get_boundary_face_normals, sizeof(__pyx_k_get_boundary_face_normals), 0, 0, 1, 1},
  {&__pyx_n_s_get_boundary_node_coordinates, __pyx_k_get_boundary_node_coordinates, sizeof(__pyx_k_get_boundary_node_coordinates), 0, 0, 1, 1},
  {&__pyx_n_s_get_boundary_node_normal, __pyx_k_get_boundary_node_normal, sizeof(__pyx_k_get_boundary_node_normal), 0, 0, 1, 1},
  {&__pyx_n_s_get_cell_center_coordinates, __pyx_k_get_cell_center_coordinates, sizeof(__pyx_k_get_cell_center_coordinates), 0, 0, 1, 1},
  {&__pyx_n_s_get_cell_volumes, __pyx_k_get_cell_volumes, sizeof(__pyx_k_get_cell_volumes), 0, 0, 1, 1},
  {&__pyx_n_s_get_connectivity, __pyx_k_get_connectivity, sizeof(__pyx_k_get_connectivity), 0, 0, 1, 1},
  {&__pyx_n_s_get_finite_volume_mesh_circulati, __pyx_k_get_finite_volume_mesh_circulati, sizeof(__pyx_k_get_finite_volume_mesh_circulati), 0, 0, 1, 1},
  {&__pyx_n_s_get_mesh_centroid, __pyx_k_get_mesh_centroid, sizeof(__pyx_k_get_mesh_centroid), 0, 0, 1, 1},
  {&__pyx_n_s_get_node_coordinates, __pyx_k_get_node_coordinates, sizeof(__pyx_k_get_node_coordinates), 0, 0, 1, 1},
  {&__pyx_n_s_get_number_of_boundary_faces, __pyx_k_get_number_of_boundary_faces, sizeof(__pyx_k_get_number_of_boundary_faces), 0, 0, 1, 1},
  {&__pyx_n_s_get_number_of_boundary_nodes, __pyx_k_get_number_of_boundary_nodes, sizeof(__pyx_k_get_number_of_boundary_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_get_number_of_cells, __pyx_k_get_number_of_cells, sizeof(__pyx_k_get_number_of_cells), 0, 0, 1, 1},
  {&__pyx_n_s_get_number_of_nodes, __pyx_k_get_number_of_nodes, sizeof(__pyx_k_get_number_of_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_get_pressure_boundary_field, __pyx_k_get_pressure_boundary_field, sizeof(__pyx_k_get_pressure_boundary_field), 0, 0, 1, 1},
  {&__pyx_n_s_get_pressure_field, __pyx_k_get_pressure_field, sizeof(__pyx_k_get_pressure_field), 0, 0, 1, 1},
  {&__pyx_n_s_get_pressure_gradient_boundary_f, __pyx_k_get_pressure_gradient_boundary_f, sizeof(__pyx_k_get_pressure_gradient_boundary_f), 0, 0, 1, 1},
  {&__pyx_n_s_get_pressure_gradient_field, __pyx_k_get_pressure_gradient_field, sizeof(__pyx_k_get_pressure_gradient_field), 0, 0, 1, 1},
  {&__pyx_n_s_get_run_time_value, __pyx_k_get_run_time_value, sizeof(__pyx_k_get_run_time_value), 0, 0, 1, 1},
  {&__pyx_n_s_get_time_step, __pyx_k_get_time_step, sizeof(__pyx_k_get_time_step), 0, 0, 1, 1},
  {&__pyx_n_s_get_total_circulation, __pyx_k_get_total_circulation, sizeof(__pyx_k_get_total_circulation), 0, 0, 1, 1},
  {&__pyx_n_s_get_velocity_boundary_field, __pyx_k_get_velocity_boundary_field, sizeof(__pyx_k_get_velocity_boundary_field), 0, 0, 1, 1},
  {&__pyx_n_s_get_velocity_field, __pyx_k_get_velocity_field, sizeof(__pyx_k_get_velocity_field), 0, 0, 1, 1},
  {&__pyx_n_s_get_velocity_gradient, __pyx_k_get_velocity_gradient, sizeof(__pyx_k_get_velocity_gradient), 0, 0, 1, 1},
  {&__pyx_n_s_get_velocity_gradient_boundary_f, __pyx_k_get_velocity_gradient_boundary_f, sizeof(__pyx_k_get_velocity_gradient_boundary_f), 0, 0, 1, 1},
  {&__pyx_n_s_get_vorticity_boundary_field, __pyx_k_get_vorticity_boundary_field, sizeof(__pyx_k_get_vorticity_boundary_field), 0, 0, 1, 1},
  {&__pyx_n_s_get_vorticity_field, __pyx_k_get_vorticity_field, sizeof(__pyx_k_get_vorticity_field), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_global_ref, __pyx_k_global_ref, sizeof(__pyx_k_global_ref), 0, 0, 1, 1},
  {&__pyx_n_s_griddata, __pyx_k_griddata, sizeof(__pyx_k_griddata), 0, 0, 1, 1},
  {&__pyx_n_s_griddata_2, __pyx_k_griddata_2, sizeof(__pyx_k_griddata_2), 0, 0, 1, 1},
  {&__pyx_n_s_gx, __pyx_k_gx, sizeof(__pyx_k_gx), 0, 0, 1, 1},
  {&__pyx_n_s_gy, __pyx_k_gy, sizeof(__pyx_k_gy), 0, 0, 1, 1},
  {&__pyx_n_s_gz, __pyx_k_gz, sizeof(__pyx_k_gz), 0, 0, 1, 1},
  {&__pyx_n_s_hstack, __pyx_k_hstack, sizeof(__pyx_k_hstack), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_linalg, __pyx_k_linalg, sizeof(__pyx_k_linalg), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_nBoundaryFaces, __pyx_k_nBoundaryFaces, sizeof(__pyx_k_nBoundaryFaces), 0, 0, 1, 1},
  {&__pyx_n_s_nBoundaryNodes, __pyx_k_nBoundaryNodes, sizeof(__pyx_k_nBoundaryNodes), 0, 0, 1, 1},
  {&__pyx_n_s_nCells, __pyx_k_nCells, sizeof(__pyx_k_nCells), 0, 0, 1, 1},
  {&__pyx_n_s_nNodes, __pyx_k_nNodes, sizeof(__pyx_k_nNodes), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_nodeCoordinates, __pyx_k_nodeCoordinates, sizeof(__pyx_k_nodeCoordinates), 0, 0, 1, 1},
  {&__pyx_n_s_nodesXYZ, __pyx_k_nodesXYZ, sizeof(__pyx_k_nodesXYZ), 0, 0, 1, 1},
  {&__pyx_n_s_norm, __pyx_k_norm, sizeof(__pyx_k_norm), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_np_2, __pyx_k_np_2, sizeof(__pyx_k_np_2), 0, 0, 1, 1},
  {&__pyx_n_s_num_boundary_faces, __pyx_k_num_boundary_faces, sizeof(__pyx_k_num_boundary_faces), 0, 0, 1, 1},
  {&__pyx_n_s_num_cells, __pyx_k_num_cells, sizeof(__pyx_k_num_cells), 0, 0, 1, 1},
  {&__pyx_n_u_numericalBoundary, __pyx_k_numericalBoundary, sizeof(__pyx_k_numericalBoundary), 0, 1, 0, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {&__pyx_n_s_nx, __pyx_k_nx, sizeof(__pyx_k_nx), 0, 0, 1, 1},
  {&__pyx_n_s_ny, __pyx_k_ny, sizeof(__pyx_k_ny), 0, 0, 1, 1},
  {&__pyx_n_s_nz, __pyx_k_nz, sizeof(__pyx_k_nz), 0, 0, 1, 1},
  {&__pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_k_openONDA_solvers_FVM_fvmModule, sizeof(__pyx_k_openONDA_solvers_FVM_fvmModule), 0, 0, 1, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_os_2, __pyx_k_os_2, sizeof(__pyx_k_os_2), 0, 0, 1, 1},
  {&__pyx_n_s_pBoundary, __pyx_k_pBoundary, sizeof(__pyx_k_pBoundary), 0, 0, 1, 1},
  {&__pyx_n_s_patchName, __pyx_k_patchName, sizeof(__pyx_k_patchName), 0, 0, 1, 1},
  {&__pyx_n_u_pimpleStepperFoam, __pyx_k_pimpleStepperFoam, sizeof(__pyx_k_pimpleStepperFoam), 0, 1, 0, 1},
  {&__pyx_n_s_pressure, __pyx_k_pressure, sizeof(__pyx_k_pressure), 0, 0, 1, 1},
  {&__pyx_n_s_pressureBC, __pyx_k_pressureBC, sizeof(__pyx_k_pressureBC), 0, 0, 1, 1},
  {&__pyx_n_s_pressureGradientBC, __pyx_k_pressureGradientBC, sizeof(__pyx_k_pressureGradientBC), 0, 0, 1, 1},
  {&__pyx_n_s_pressure_gradient, __pyx_k_pressure_gradient, sizeof(__pyx_k_pressure_gradient), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver, __pyx_k_pyFoamSolver, sizeof(__pyx_k_pyFoamSolver), 0, 0, 1, 1},
  {&__pyx_n_u_pyFoamSolver, __pyx_k_pyFoamSolver, sizeof(__pyx_k_pyFoamSolver), 0, 1, 0, 1},
  {&__pyx_n_s_pyFoamSolver___reduce_cython, __pyx_k_pyFoamSolver___reduce_cython, sizeof(__pyx_k_pyFoamSolver___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver___setstate_cython, __pyx_k_pyFoamSolver___setstate_cython, sizeof(__pyx_k_pyFoamSolver___setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_correct_mass_flux, __pyx_k_pyFoamSolver_correct_mass_flux, sizeof(__pyx_k_pyFoamSolver_correct_mass_flux), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_correct_mass_flux_p, __pyx_k_pyFoamSolver_correct_mass_flux_p, sizeof(__pyx_k_pyFoamSolver_correct_mass_flux_p), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_correct_normal_pres, __pyx_k_pyFoamSolver_correct_normal_pres, sizeof(__pyx_k_pyFoamSolver_correct_normal_pres), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_evolve, __pyx_k_pyFoamSolver_evolve, sizeof(__pyx_k_pyFoamSolver_evolve), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_evolve_mesh, __pyx_k_pyFoamSolver_evolve_mesh, sizeof(__pyx_k_pyFoamSolver_evolve_mesh), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_evolve_only_solutio, __pyx_k_pyFoamSolver_evolve_only_solutio, sizeof(__pyx_k_pyFoamSolver_evolve_only_solutio), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_boundary_cell_c, __pyx_k_pyFoamSolver_get_boundary_cell_c, sizeof(__pyx_k_pyFoamSolver_get_boundary_cell_c), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_boundary_face_a, __pyx_k_pyFoamSolver_get_boundary_face_a, sizeof(__pyx_k_pyFoamSolver_get_boundary_face_a), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_boundary_face_c, __pyx_k_pyFoamSolver_get_boundary_face_c, sizeof(__pyx_k_pyFoamSolver_get_boundary_face_c), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_boundary_face_n, __pyx_k_pyFoamSolver_get_boundary_face_n, sizeof(__pyx_k_pyFoamSolver_get_boundary_face_n), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_boundary_node_c, __pyx_k_pyFoamSolver_get_boundary_node_c, sizeof(__pyx_k_pyFoamSolver_get_boundary_node_c), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_boundary_node_n, __pyx_k_pyFoamSolver_get_boundary_node_n, sizeof(__pyx_k_pyFoamSolver_get_boundary_node_n), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_cell_center_coo, __pyx_k_pyFoamSolver_get_cell_center_coo, sizeof(__pyx_k_pyFoamSolver_get_cell_center_coo), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_cell_volumes, __pyx_k_pyFoamSolver_get_cell_volumes, sizeof(__pyx_k_pyFoamSolver_get_cell_volumes), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_connectivity, __pyx_k_pyFoamSolver_get_connectivity, sizeof(__pyx_k_pyFoamSolver_get_connectivity), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_mesh_centroid, __pyx_k_pyFoamSolver_get_mesh_centroid, sizeof(__pyx_k_pyFoamSolver_get_mesh_centroid), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_node_coordinate, __pyx_k_pyFoamSolver_get_node_coordinate, sizeof(__pyx_k_pyFoamSolver_get_node_coordinate), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_number_of_bound, __pyx_k_pyFoamSolver_get_number_of_bound, sizeof(__pyx_k_pyFoamSolver_get_number_of_bound), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_number_of_bound_2, __pyx_k_pyFoamSolver_get_number_of_bound_2, sizeof(__pyx_k_pyFoamSolver_get_number_of_bound_2), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_number_of_cells, __pyx_k_pyFoamSolver_get_number_of_cells, sizeof(__pyx_k_pyFoamSolver_get_number_of_cells), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_number_of_nodes, __pyx_k_pyFoamSolver_get_number_of_nodes, sizeof(__pyx_k_pyFoamSolver_get_number_of_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_pressure_bounda, __pyx_k_pyFoamSolver_get_pressure_bounda, sizeof(__pyx_k_pyFoamSolver_get_pressure_bounda), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_pressure_field, __pyx_k_pyFoamSolver_get_pressure_field, sizeof(__pyx_k_pyFoamSolver_get_pressure_field), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_pressure_gradie, __pyx_k_pyFoamSolver_get_pressure_gradie, sizeof(__pyx_k_pyFoamSolver_get_pressure_gradie), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_pressure_gradie_2, __pyx_k_pyFoamSolver_get_pressure_gradie_2, sizeof(__pyx_k_pyFoamSolver_get_pressure_gradie_2), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_run_time_value, __pyx_k_pyFoamSolver_get_run_time_value, sizeof(__pyx_k_pyFoamSolver_get_run_time_value), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_time_step, __pyx_k_pyFoamSolver_get_time_step, sizeof(__pyx_k_pyFoamSolver_get_time_step), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_total_circulati, __pyx_k_pyFoamSolver_get_total_circulati, sizeof(__pyx_k_pyFoamSolver_get_total_circulati), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_velocity_bounda, __pyx_k_pyFoamSolver_get_velocity_bounda, sizeof(__pyx_k_pyFoamSolver_get_velocity_bounda), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_velocity_field, __pyx_k_pyFoamSolver_get_velocity_field, sizeof(__pyx_k_pyFoamSolver_get_velocity_field), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_velocity_gradie, __pyx_k_pyFoamSolver_get_velocity_gradie, sizeof(__pyx_k_pyFoamSolver_get_velocity_gradie), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_velocity_gradie_2, __pyx_k_pyFoamSolver_get_velocity_gradie_2, sizeof(__pyx_k_pyFoamSolver_get_velocity_gradie_2), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_vorticity_bound, __pyx_k_pyFoamSolver_get_vorticity_bound, sizeof(__pyx_k_pyFoamSolver_get_vorticity_bound), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_get_vorticity_field, __pyx_k_pyFoamSolver_get_vorticity_field, sizeof(__pyx_k_pyFoamSolver_get_vorticity_field), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_set_dirichlet_press, __pyx_k_pyFoamSolver_set_dirichlet_press, sizeof(__pyx_k_pyFoamSolver_set_dirichlet_press), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_set_dirichlet_veloc, __pyx_k_pyFoamSolver_set_dirichlet_veloc, sizeof(__pyx_k_pyFoamSolver_set_dirichlet_veloc), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_set_neumann_pressur, __pyx_k_pyFoamSolver_set_neumann_pressur, sizeof(__pyx_k_pyFoamSolver_set_neumann_pressur), 0, 0, 1, 1},
  {&__pyx_n_s_pyFoamSolver_set_time_step, __pyx_k_pyFoamSolver_set_time_step, sizeof(__pyx_k_pyFoamSolver_set_time_step), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_ravel, __pyx_k_ravel, sizeof(__pyx_k_ravel), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_ref, __pyx_k_ref, sizeof(__pyx_k_ref), 0, 0, 1, 1},
  {&__pyx_n_s_reshape, __pyx_k_reshape, sizeof(__pyx_k_reshape), 0, 0, 1, 1},
  {&__pyx_n_s_scipy_interpolate, __pyx_k_scipy_interpolate, sizeof(__pyx_k_scipy_interpolate), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_set_dirichlet_pressure_boundary, __pyx_k_set_dirichlet_pressure_boundary, sizeof(__pyx_k_set_dirichlet_pressure_boundary), 0, 0, 1, 1},
  {&__pyx_n_s_set_dirichlet_velocity_boundary, __pyx_k_set_dirichlet_velocity_boundary, sizeof(__pyx_k_set_dirichlet_velocity_boundary), 0, 0, 1, 1},
  {&__pyx_n_s_set_neumann_pressure_boundary_co, __pyx_k_set_neumann_pressure_boundary_co, sizeof(__pyx_k_set_neumann_pressure_boundary_co), 0, 0, 1, 1},
  {&__pyx_n_s_set_time_step, __pyx_k_set_time_step, sizeof(__pyx_k_set_time_step), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_sh, __pyx_k_sh, sizeof(__pyx_k_sh), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_shutil, __pyx_k_shutil, sizeof(__pyx_k_shutil), 0, 0, 1, 1},
  {&__pyx_n_s_sqrt, __pyx_k_sqrt, sizeof(__pyx_k_sqrt), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_sys_2, __pyx_k_sys_2, sizeof(__pyx_k_sys_2), 0, 0, 1, 1},
  {&__pyx_n_s_tangent, __pyx_k_tangent, sizeof(__pyx_k_tangent), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_timeStep, __pyx_k_timeStep, sizeof(__pyx_k_timeStep), 0, 0, 1, 1},
  {&__pyx_n_s_totalAbsDeltaP, __pyx_k_totalAbsDeltaP, sizeof(__pyx_k_totalAbsDeltaP), 0, 0, 1, 1},
  {&__pyx_n_s_totalAbsFlux, __pyx_k_totalAbsFlux, sizeof(__pyx_k_totalAbsFlux), 0, 0, 1, 1},
  {&__pyx_n_s_totalDeltaP, __pyx_k_totalDeltaP, sizeof(__pyx_k_totalDeltaP), 0, 0, 1, 1},
  {&__pyx_n_s_totalFlux, __pyx_k_totalFlux, sizeof(__pyx_k_totalFlux), 0, 0, 1, 1},
  {&__pyx_kp_u_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 1, 0, 0},
  {&__pyx_n_s_velocity, __pyx_k_velocity, sizeof(__pyx_k_velocity), 0, 0, 1, 1},
  {&__pyx_n_s_velocityBC, __pyx_k_velocityBC, sizeof(__pyx_k_velocityBC), 0, 0, 1, 1},
  {&__pyx_n_s_velocity_gradient, __pyx_k_velocity_gradient, sizeof(__pyx_k_velocity_gradient), 0, 0, 1, 1},
  {&__pyx_n_s_vorticity, __pyx_k_vorticity, sizeof(__pyx_k_vorticity), 0, 0, 1, 1},
  {&__pyx_n_s_vxBoundary, __pyx_k_vxBoundary, sizeof(__pyx_k_vxBoundary), 0, 0, 1, 1},
  {&__pyx_n_s_vyBoundary, __pyx_k_vyBoundary, sizeof(__pyx_k_vyBoundary), 0, 0, 1, 1},
  {&__pyx_n_s_vzBoundary, __pyx_k_vzBoundary, sizeof(__pyx_k_vzBoundary), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 74, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 76, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 944, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "foamSolverWrapper.pyx":838
 * 
 *             # Ensure normal vector has unit length
 *             faceNormal = faceNormal / _np.linalg.norm(faceNormal, axis=1)[:, None]             # <<<<<<<<<<<<<<
 * 
 *             # Mass flux at each face along the numerical boundary
 */
  __pyx_slice__2 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__2)) __PYX_ERR(0, 838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__2);
  __Pyx_GIVEREF(__pyx_slice__2);
  __pyx_tuple__3 = PyTuple_Pack(2, __pyx_slice__2, Py_None); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "foamSolverWrapper.pyx":841
 * 
 *             # Mass flux at each face along the numerical boundary
 *             faceFlux = (faceVelocityX * faceNormal[:, 0] + faceVelocityY * faceNormal[:, 1] + faceVelocityZ * faceNormal[:, 2]) * faceArea             # <<<<<<<<<<<<<<
 * 
 *             # Net flux along the numerical boundary
 */
  __pyx_tuple__4 = PyTuple_Pack(2, __pyx_slice__2, __pyx_int_0); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);
  __pyx_tuple__5 = PyTuple_Pack(2, __pyx_slice__2, __pyx_int_1); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);
  __pyx_tuple__6 = PyTuple_Pack(2, __pyx_slice__2, __pyx_int_2); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":944
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(2, 944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":950
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(2, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "foamSolverWrapper.pyx":96
 *       # Simulation methods:
 *       # ================================================== #
 *       def evolve(self):             # <<<<<<<<<<<<<<
 *             """
 *             Advances the OpenFOAM simulation by one time step, updating the state,
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_evolve, 96, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(0, 96, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":107
 *             self.cppFoamLib.evolve()
 * 
 *       def evolve_mesh(self):             # <<<<<<<<<<<<<<
 *             """
 *             Updates the mesh of the OpenFOAM simulation from time step t to t+1.
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_evolve_mesh, 107, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(0, 107, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":121
 *             self.cppFoamLib.evolve_mesh()
 * 
 *       def evolve_only_solution(self):             # <<<<<<<<<<<<<<
 *             """
 *             Advances the solution of the OpenFOAM simulation without updating the mesh.
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_evolve_only_solution, 121, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(0, 121, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":135
 *             self.cppFoamLib.evolve_only_solution()
 * 
 *       def correct_mass_flux(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Corrects the mass flux across the specified boundary patch.
 */
  __pyx_tuple__17 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_patchName); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_correct_mass_flux, 135, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(0, 135, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":155
 *       # Simulation Methods
 *       # ==================================================
 *       def get_run_time_value(self):             # <<<<<<<<<<<<<<
 *             """
 *             Get the current flow time in seconds.
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_run_time_value, 155, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(0, 155, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":167
 * 
 * 
 *       def get_time_step(self):             # <<<<<<<<<<<<<<
 *             """
 *             Get the size of the current time step in seconds.
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_time_step, 167, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(0, 167, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":179
 * 
 * 
 *       def get_number_of_nodes(self):             # <<<<<<<<<<<<<<
 *             """
 *             Get the number of nodes in the simulation.
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__23, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_number_of_nodes, 179, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(0, 179, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":191
 * 
 * 
 *       def get_number_of_cells(self):             # <<<<<<<<<<<<<<
 *             """
 *             Get the total number of cells in the simulation.
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_number_of_cells, 191, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(0, 191, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":203
 * 
 * 
 *       def get_number_of_boundary_nodes(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Get the number of boundary nodes for a specified OpenFOAM patch.
 */
  __pyx_tuple__27 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_patchName); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_number_of_boundary_nodes, 203, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(0, 203, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":223
 * 
 * 
 *       def get_number_of_boundary_faces(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Get the number of boundary faces for a specified OpenFOAM patch.
 */
  __pyx_tuple__29 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_patchName); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_number_of_boundary_faces, 223, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 223, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":245
 * 
 *       # Cell and Node Coordinate Access
 *       def get_node_coordinates(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the coordinates of the nodes in the simulation.
 */
  __pyx_tuple__31 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_nNodes, __pyx_n_s_nodeCoordinates); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_node_coordinates, 245, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(0, 245, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":264
 * 
 * 
 *       def get_connectivity(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the connectivity of the cells in the simulation.
 */
  __pyx_tuple__33 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_nCells, __pyx_n_s_connectivity); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_connectivity, 264, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(0, 264, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":282
 *             return connectivity
 * 
 *       def get_cell_volumes(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the volumes of the cells in the simulation.
 */
  __pyx_tuple__35 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_nCells, __pyx_n_s_cellVolumes); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__35, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_cell_volumes, 282, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) __PYX_ERR(0, 282, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":301
 * 
 * 
 *       def get_cell_center_coordinates(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the coordinates of the cell centers in the simulation.
 */
  __pyx_tuple__37 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_nCells, __pyx_n_s_cellXYZ, __pyx_n_s_cellCenters); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_cell_center_coordinates, 301, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(0, 301, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":323
 * 
 *       # Boundary Data Access
 *       def get_boundary_node_coordinates(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the coordinates of the boundary nodes for a given patch.
 */
  __pyx_tuple__39 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_patchName, __pyx_n_s_nBoundaryNodes, __pyx_n_s_nodesXYZ, __pyx_n_s_bondNodesCoordinates); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_boundary_node_coordinates, 323, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(0, 323, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":351
 *             return bondNodesCoordinates
 * 
 *       def get_boundary_node_normal(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the normals of the boundary nodes for a given patch.
 */
  __pyx_tuple__41 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_patchName, __pyx_n_s_nBoundaryNodes, __pyx_n_s_bondNodeNormals); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);
  __pyx_codeobj__42 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_boundary_node_normal, 351, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__42)) __PYX_ERR(0, 351, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":378
 * 
 * 
 *       def get_boundary_face_center_coordinates(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the coordinates of the boundary face centers for a given patch.
 */
  __pyx_tuple__43 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_patchName, __pyx_n_s_nBoundaryFaces, __pyx_n_s_faceXYZ, __pyx_n_s_bondFaceCenterCoordinates); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__43, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_boundary_face_center_coordin, 378, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(0, 378, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":406
 *             return bondFaceCenterCoordinates
 * 
 *       def get_boundary_face_areas(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the areas of the boundary faces for a given patch.
 */
  __pyx_tuple__45 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_patchName, __pyx_n_s_nBoundaryFaces, __pyx_n_s_boundaryFaceAreas); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_boundary_face_areas, 406, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(0, 406, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":432
 *             return boundaryFaceAreas
 * 
 *       def get_boundary_face_normals(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the normals of the boundary faces for a given patch.
 */
  __pyx_tuple__47 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_patchName, __pyx_n_s_nBoundaryFaces, __pyx_n_s_bondFaceNormals); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__47, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_boundary_face_normals, 432, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(0, 432, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":458
 *             return bondFaceNormals.reshape(nBoundaryFaces, 3)
 * 
 *       def get_boundary_cell_center_coordinates(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the coordinates of the boundary cell centers for a given patch.
 */
  __pyx_tuple__49 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_patchName, __pyx_n_s_nBoundaryFaces, __pyx_n_s_cellXYZ, __pyx_n_s_bondCellCenterCoordinates); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_boundary_cell_center_coordin, 458, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(0, 458, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":488
 * 
 *       # Field Access Methods
 *       def get_velocity_field(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the velocity field as a NumPy array.
 */
  __pyx_tuple__51 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_velocity, __pyx_n_s_num_cells); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_velocity_field, 488, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(0, 488, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":506
 * 
 * 
 *       def get_velocity_boundary_field(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the velocity boundary field.
 */
  __pyx_tuple__53 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_patchName, __pyx_n_s_velocity, __pyx_n_s_num_boundary_faces); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_velocity_boundary_field, 506, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(0, 506, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":532
 * 
 * 
 *       def get_pressure_field(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the pressure field.
 */
  __pyx_tuple__55 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_pressure, __pyx_n_s_num_cells); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_pressure_field, 532, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(0, 532, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":550
 * 
 * 
 *       def get_velocity_gradient(self):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the velocity gradient field.
 */
  __pyx_tuple__57 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_velocity_gradient, __pyx_n_s_num_cells); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_velocity_gradient, 550, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(0, 550, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":574
 * 
 * 
 *       def get_velocity_gradient_boundary_field(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the velocity gradient boundary field.
 */
  __pyx_tuple__59 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_patchName, __pyx_n_s_velocity_gradient, __pyx_n_s_num_boundary_faces); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_velocity_gradient_boundary_f, 574, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(0, 574, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":599
 *             return velocity_gradient
 * 
 *       def get_pressure_gradient_field(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the pressure gradient field.
 */
  __pyx_tuple__61 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_pressure_gradient, __pyx_n_s_num_cells); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_pressure_gradient_field, 599, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) __PYX_ERR(0, 599, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":615
 *             return pressure_gradient
 * 
 *       def get_pressure_boundary_field(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the pressure boundary field.
 */
  __pyx_tuple__63 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_patchName, __pyx_n_s_pressure, __pyx_n_s_num_boundary_faces); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_pressure_boundary_field, 615, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) __PYX_ERR(0, 615, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":639
 *             return pressure
 * 
 *       def get_pressure_gradient_boundary_field(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the pressure gradient boundary field.
 */
  __pyx_tuple__65 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_patchName, __pyx_n_s_pressure_gradient, __pyx_n_s_num_boundary_faces); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(0, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_pressure_gradient_boundary_f, 639, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) __PYX_ERR(0, 639, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":664
 * 
 * 
 *       def get_vorticity_field(self):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the vorticity gradient field.
 */
  __pyx_tuple__67 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_vorticity, __pyx_n_s_num_cells); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__67, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_vorticity_field, 664, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(0, 664, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":688
 * 
 * 
 *       def get_vorticity_boundary_field(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the vorticity boundary field.
 */
  __pyx_tuple__69 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_patchName, __pyx_n_s_vorticity, __pyx_n_s_num_boundary_faces); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);
  __pyx_codeobj__70 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__69, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_vorticity_boundary_field, 688, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__70)) __PYX_ERR(0, 688, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":718
 *       # ================================================== #
 * 
 *       def set_time_step(self, deltaT):             # <<<<<<<<<<<<<<
 *             """
 *             Set the desired time-step size.
 */
  __pyx_tuple__71 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_deltaT, __pyx_n_s_timeStep); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(0, 718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);
  __pyx_codeobj__72 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__71, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_set_time_step, 718, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__72)) __PYX_ERR(0, 718, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":731
 *             self.cppFoamLib.set_time_step(&timeStep)
 * 
 *       def set_dirichlet_velocity_boundary_condition(self, vxBoundary, vyBoundary, vzBoundary, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Set Dirichlet velocity boundary conditions.
 */
  __pyx_tuple__73 = PyTuple_Pack(9, __pyx_n_s_self, __pyx_n_s_vxBoundary, __pyx_n_s_vyBoundary, __pyx_n_s_vzBoundary, __pyx_n_s_patchName, __pyx_n_s_nx, __pyx_n_s_ny, __pyx_n_s_nz, __pyx_n_s_velocityBC); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(5, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__73, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_set_dirichlet_velocity_boundary, 731, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) __PYX_ERR(0, 731, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":760
 *             self.cppFoamLib.set_dirichlet_velocity_boundary_condition(&velocityBC[0], patchName)
 * 
 *       def set_dirichlet_pressure_boundary_condition(self, pBoundary, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Set Dirichlet pressure boundary conditions.
 */
  __pyx_tuple__75 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_pBoundary, __pyx_n_s_patchName, __pyx_n_s_n, __pyx_n_s_pressureBC); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);
  __pyx_codeobj__76 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__75, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_set_dirichlet_pressure_boundary, 760, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__76)) __PYX_ERR(0, 760, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":778
 *             self.cppFoamLib.set_dirichlet_pressure_boundary_condition(&pressureBC[0], patchName)
 * 
 *       def set_neumann_pressure_boundary_condition(self, dpdxBoundary, dpdyBoundary, dpdzBoundary, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Set Neumann pressure boundary conditions.
 */
  __pyx_tuple__77 = PyTuple_Pack(9, __pyx_n_s_self, __pyx_n_s_dpdxBoundary, __pyx_n_s_dpdyBoundary, __pyx_n_s_dpdzBoundary, __pyx_n_s_patchName, __pyx_n_s_nx, __pyx_n_s_ny, __pyx_n_s_nz, __pyx_n_s_pressureGradientBC); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(0, 778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);
  __pyx_codeobj__78 = (PyObject*)__Pyx_PyCode_New(5, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__77, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_set_neumann_pressure_boundary_co, 778, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__78)) __PYX_ERR(0, 778, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":811
 *       # ================================================= #
 * 
 *       def correct_mass_flux_python(self, faceVelocityX, faceVelocityY, faceVelocityZ, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Correct the mass flux at each face along the numerical boundary.
 */
  __pyx_tuple__79 = PyTuple_Pack(14, __pyx_n_s_self, __pyx_n_s_faceVelocityX, __pyx_n_s_faceVelocityY, __pyx_n_s_faceVelocityZ, __pyx_n_s_patchName, __pyx_n_s_faceArea, __pyx_n_s_faceNormal, __pyx_n_s_faceFlux, __pyx_n_s_totalFlux, __pyx_n_s_totalAbsFlux, __pyx_n_s_faceVelocityCorr, __pyx_n_s_faceVelocityX2, __pyx_n_s_faceVelocityY2, __pyx_n_s_faceVelocityZ2); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);
  __pyx_codeobj__80 = (PyObject*)__Pyx_PyCode_New(5, 0, 14, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__79, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_correct_mass_flux_python, 811, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__80)) __PYX_ERR(0, 811, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":860
 * 
 * 
 *       def correct_normal_pressure_gradient(self, dpdx, dpdy, dpdz, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Correct the normal pressure gradient at each face along the numerical boundary.
 */
  __pyx_tuple__81 = PyTuple_Pack(27, __pyx_n_s_self, __pyx_n_s_dpdx, __pyx_n_s_dpdy, __pyx_n_s_dpdz, __pyx_n_s_patchName, __pyx_n_s_np_2, __pyx_n_s_np, __pyx_n_s_faceArea, __pyx_n_s_faceNormal, __pyx_n_s_global_ref, __pyx_n_s_alternative_ref, __pyx_n_s_faceTangent, __pyx_n_s_i, __pyx_n_s_ref, __pyx_n_s_tangent, __pyx_n_s_dpdn, __pyx_n_s_dpdn_x, __pyx_n_s_dpdn_y, __pyx_n_s_dpdn_z, __pyx_n_s_dpdt_x, __pyx_n_s_dpdt_y, __pyx_n_s_dpdt_z, __pyx_n_s_dpdt, __pyx_n_s_faceDeltaP, __pyx_n_s_totalDeltaP, __pyx_n_s_totalAbsDeltaP, __pyx_n_s_facePressureGradientCorr); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(0, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);
  __pyx_codeobj__82 = (PyObject*)__Pyx_PyCode_New(5, 0, 27, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__81, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_correct_normal_pressure_gradient, 860, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__82)) __PYX_ERR(0, 860, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":956
 * 
 * 
 *       def get_total_circulation(self):             # <<<<<<<<<<<<<<
 *             """
 *             Get the total circulation in the finite volume mesh region.
 */
  __pyx_tuple__83 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_gx, __pyx_n_s_gy, __pyx_n_s_gz, __pyx_n_s_circulation); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);
  __pyx_codeobj__84 = (PyObject*)__Pyx_PyCode_New(1, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__83, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_total_circulation, 956, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__84)) __PYX_ERR(0, 956, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":971
 * 
 * 
 *       def get_mesh_centroid(self):             # <<<<<<<<<<<<<<
 *             """
 *             Calculate the centroid of the mesh.
 */
  __pyx_tuple__85 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_cellVolume, __pyx_n_s_cellCoordinates, __pyx_n_s_cellVolumeSum, __pyx_n_s_centroid); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(0, 971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(1, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__85, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_foamSolverWrapper_pyx, __pyx_n_s_get_mesh_centroid, 971, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) __PYX_ERR(0, 971, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__87 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__87, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__89 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__89, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_99 = PyFloat_FromDouble(0.99); if (unlikely(!__pyx_float_0_99)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_0eneg_15 = PyFloat_FromDouble(1.0e-15); if (unlikely(!__pyx_float_1_0eneg_15)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_9 = PyInt_FromLong(9); if (unlikely(!__pyx_int_9)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver.tp_dictoffset && __pyx_type_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_pyFoamSolver, (PyObject *)&__pyx_type_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  __pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver = &__pyx_type_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 199, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 222, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 226, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 238, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_generic) __PYX_ERR(2, 770, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType(__pyx_t_1, "numpy", "number", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_number) __PYX_ERR(2, 772, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_integer) __PYX_ERR(2, 774, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(2, 776, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(2, 778, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(2, 780, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_floating) __PYX_ERR(2, 782, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(2, 784, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(2, 786, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType(__pyx_t_1, "numpy", "character", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_character) __PYX_ERR(2, 788, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 826, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initfvmModule(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initfvmModule(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_fvmModule(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_fvmModule(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_fvmModule(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'fvmModule' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_fvmModule(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("fvmModule", __pyx_methods, __pyx_k_File_foamSolverWrapper_pyx_start, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_openONDA__solvers__FVM__fvmModule) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "openONDA.solvers.FVM.fvmModule")) {
      if (unlikely(PyDict_SetItemString(modules, "openONDA.solvers.FVM.fvmModule", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "foamSolverWrapper.pyx":7
 * # To build this file use: python setup.py build_ext --inplace
 * 
 * __all__ = [             # <<<<<<<<<<<<<<
 *     'pyFoamSolver'
 * ]
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_u_pyFoamSolver);
  __Pyx_GIVEREF(__pyx_n_u_pyFoamSolver);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_u_pyFoamSolver);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_all, __pyx_t_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":11
 * ]
 * 
 * __doc__ = """             # <<<<<<<<<<<<<<
 * fvmModule: Interface for OpenFOAM solvers in OpenONDA.
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_doc, __pyx_kp_u_fvmModule_Interface_for_OpenFOA) < 0) __PYX_ERR(0, 11, __pyx_L1_error)

  /* "foamSolverWrapper.pyx":22
 * # ==================================================
 * 
 * import os as _os             # <<<<<<<<<<<<<<
 * import shutil as _sh
 * import ctypes
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os_2, __pyx_t_1) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":23
 * 
 * import os as _os
 * import shutil as _sh             # <<<<<<<<<<<<<<
 * import ctypes
 * import sys as _sys
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_shutil, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sh, __pyx_t_1) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":24
 * import os as _os
 * import shutil as _sh
 * import ctypes             # <<<<<<<<<<<<<<
 * import sys as _sys
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_ctypes, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ctypes, __pyx_t_1) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":25
 * import shutil as _sh
 * import ctypes
 * import sys as _sys             # <<<<<<<<<<<<<<
 * 
 * import cython as _cython
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys_2, __pyx_t_1) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":28
 * 
 * import cython as _cython
 * import numpy as _np             # <<<<<<<<<<<<<<
 * cimport numpy as _np
 * from scipy.interpolate import griddata as _griddata
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "foamSolverWrapper.pyx":30
 * import numpy as _np
 * cimport numpy as _np
 * from scipy.interpolate import griddata as _griddata             # <<<<<<<<<<<<<<
 * 
 * from libc.stdlib cimport malloc, free
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_griddata);
  __Pyx_GIVEREF(__pyx_n_s_griddata);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_griddata);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_scipy_interpolate, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_griddata); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_griddata_2, __pyx_t_1) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "foamSolverWrapper.pyx":55
 *       # ==================================================
 * 
 *       def __cinit__(self, args=["pimpleStepperFoam"]):             # <<<<<<<<<<<<<<
 *             """
 *             Initializes the pyFoamSolver object by allocating and initializing
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_u_pimpleStepperFoam);
  __Pyx_GIVEREF(__pyx_n_u_pimpleStepperFoam);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_u_pimpleStepperFoam);
  __pyx_k_ = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "foamSolverWrapper.pyx":96
 *       # Simulation methods:
 *       # ================================================== #
 *       def evolve(self):             # <<<<<<<<<<<<<<
 *             """
 *             Advances the OpenFOAM simulation by one time step, updating the state,
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_5evolve, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_evolve, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__12)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_evolve, __pyx_t_2) < 0) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":107
 *             self.cppFoamLib.evolve()
 * 
 *       def evolve_mesh(self):             # <<<<<<<<<<<<<<
 *             """
 *             Updates the mesh of the OpenFOAM simulation from time step t to t+1.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_7evolve_mesh, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_evolve_mesh, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__14)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_evolve_mesh, __pyx_t_2) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":121
 *             self.cppFoamLib.evolve_mesh()
 * 
 *       def evolve_only_solution(self):             # <<<<<<<<<<<<<<
 *             """
 *             Advances the solution of the OpenFOAM simulation without updating the mesh.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_9evolve_only_solution, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_evolve_only_solutio, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__16)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_evolve_only_solution, __pyx_t_2) < 0) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":135
 *             self.cppFoamLib.evolve_only_solution()
 * 
 *       def correct_mass_flux(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Corrects the mass flux across the specified boundary patch.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_11correct_mass_flux, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_correct_mass_flux, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_correct_mass_flux, __pyx_t_2) < 0) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":155
 *       # Simulation Methods
 *       # ==================================================
 *       def get_run_time_value(self):             # <<<<<<<<<<<<<<
 *             """
 *             Get the current flow time in seconds.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_13get_run_time_value, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_run_time_value, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__20)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_run_time_value, __pyx_t_2) < 0) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":167
 * 
 * 
 *       def get_time_step(self):             # <<<<<<<<<<<<<<
 *             """
 *             Get the size of the current time step in seconds.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_15get_time_step, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_time_step, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__22)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_time_step, __pyx_t_2) < 0) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":179
 * 
 * 
 *       def get_number_of_nodes(self):             # <<<<<<<<<<<<<<
 *             """
 *             Get the number of nodes in the simulation.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_17get_number_of_nodes, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_number_of_nodes, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__24)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_number_of_nodes, __pyx_t_2) < 0) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":191
 * 
 * 
 *       def get_number_of_cells(self):             # <<<<<<<<<<<<<<
 *             """
 *             Get the total number of cells in the simulation.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_19get_number_of_cells, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_number_of_cells, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__26)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_number_of_cells, __pyx_t_2) < 0) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":203
 * 
 * 
 *       def get_number_of_boundary_nodes(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Get the number of boundary nodes for a specified OpenFOAM patch.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_21get_number_of_boundary_nodes, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_number_of_bound, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__28)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_number_of_boundary_nodes, __pyx_t_2) < 0) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":223
 * 
 * 
 *       def get_number_of_boundary_faces(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Get the number of boundary faces for a specified OpenFOAM patch.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_23get_number_of_boundary_faces, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_number_of_bound_2, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__30)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_number_of_boundary_faces, __pyx_t_2) < 0) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":245
 * 
 *       # Cell and Node Coordinate Access
 *       def get_node_coordinates(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the coordinates of the nodes in the simulation.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_25get_node_coordinates, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_node_coordinate, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__32)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_node_coordinates, __pyx_t_2) < 0) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":264
 * 
 * 
 *       def get_connectivity(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the connectivity of the cells in the simulation.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_27get_connectivity, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_connectivity, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__34)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_connectivity, __pyx_t_2) < 0) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":282
 *             return connectivity
 * 
 *       def get_cell_volumes(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the volumes of the cells in the simulation.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_29get_cell_volumes, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_cell_volumes, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__36)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_cell_volumes, __pyx_t_2) < 0) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":301
 * 
 * 
 *       def get_cell_center_coordinates(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the coordinates of the cell centers in the simulation.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_31get_cell_center_coordinates, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_cell_center_coo, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__38)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_cell_center_coordinates, __pyx_t_2) < 0) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":323
 * 
 *       # Boundary Data Access
 *       def get_boundary_node_coordinates(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the coordinates of the boundary nodes for a given patch.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_33get_boundary_node_coordinates, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_boundary_node_c, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__40)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_boundary_node_coordinates, __pyx_t_2) < 0) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":351
 *             return bondNodesCoordinates
 * 
 *       def get_boundary_node_normal(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the normals of the boundary nodes for a given patch.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_35get_boundary_node_normal, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_boundary_node_n, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__42)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_boundary_node_normal, __pyx_t_2) < 0) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":378
 * 
 * 
 *       def get_boundary_face_center_coordinates(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the coordinates of the boundary face centers for a given patch.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_37get_boundary_face_center_coordinates, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_boundary_face_c, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__44)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_boundary_face_center_coordin, __pyx_t_2) < 0) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":406
 *             return bondFaceCenterCoordinates
 * 
 *       def get_boundary_face_areas(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the areas of the boundary faces for a given patch.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_39get_boundary_face_areas, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_boundary_face_a, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__46)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_boundary_face_areas, __pyx_t_2) < 0) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":432
 *             return boundaryFaceAreas
 * 
 *       def get_boundary_face_normals(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the normals of the boundary faces for a given patch.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_41get_boundary_face_normals, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_boundary_face_n, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__48)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_boundary_face_normals, __pyx_t_2) < 0) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":458
 *             return bondFaceNormals.reshape(nBoundaryFaces, 3)
 * 
 *       def get_boundary_cell_center_coordinates(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the coordinates of the boundary cell centers for a given patch.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_43get_boundary_cell_center_coordinates, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_boundary_cell_c, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__50)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_boundary_cell_center_coordin, __pyx_t_2) < 0) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":488
 * 
 *       # Field Access Methods
 *       def get_velocity_field(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the velocity field as a NumPy array.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_45get_velocity_field, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_velocity_field, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__52)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_velocity_field, __pyx_t_2) < 0) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":506
 * 
 * 
 *       def get_velocity_boundary_field(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the velocity boundary field.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_47get_velocity_boundary_field, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_velocity_bounda, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__54)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_velocity_boundary_field, __pyx_t_2) < 0) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":532
 * 
 * 
 *       def get_pressure_field(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the pressure field.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_49get_pressure_field, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_pressure_field, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__56)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_pressure_field, __pyx_t_2) < 0) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":550
 * 
 * 
 *       def get_velocity_gradient(self):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the velocity gradient field.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_51get_velocity_gradient, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_velocity_gradie, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__58)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_velocity_gradient, __pyx_t_2) < 0) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":574
 * 
 * 
 *       def get_velocity_gradient_boundary_field(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the velocity gradient boundary field.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_53get_velocity_gradient_boundary_field, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_velocity_gradie_2, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__60)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_velocity_gradient_boundary_f, __pyx_t_2) < 0) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":599
 *             return velocity_gradient
 * 
 *       def get_pressure_gradient_field(self):             # <<<<<<<<<<<<<<
 *             """
 *             Returns the pressure gradient field.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_55get_pressure_gradient_field, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_pressure_gradie, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__62)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_pressure_gradient_field, __pyx_t_2) < 0) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":615
 *             return pressure_gradient
 * 
 *       def get_pressure_boundary_field(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the pressure boundary field.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_57get_pressure_boundary_field, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_pressure_bounda, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__64)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_pressure_boundary_field, __pyx_t_2) < 0) __PYX_ERR(0, 615, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":639
 *             return pressure
 * 
 *       def get_pressure_gradient_boundary_field(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the pressure gradient boundary field.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_59get_pressure_gradient_boundary_field, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_pressure_gradie_2, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__66)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_pressure_gradient_boundary_f, __pyx_t_2) < 0) __PYX_ERR(0, 639, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":664
 * 
 * 
 *       def get_vorticity_field(self):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the vorticity gradient field.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_61get_vorticity_field, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_vorticity_field, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__68)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_vorticity_field, __pyx_t_2) < 0) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":688
 * 
 * 
 *       def get_vorticity_boundary_field(self, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Retrieve the vorticity boundary field.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_63get_vorticity_boundary_field, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_vorticity_bound, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__70)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_vorticity_boundary_field, __pyx_t_2) < 0) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":718
 *       # ================================================== #
 * 
 *       def set_time_step(self, deltaT):             # <<<<<<<<<<<<<<
 *             """
 *             Set the desired time-step size.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_65set_time_step, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_set_time_step, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__72)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_set_time_step, __pyx_t_2) < 0) __PYX_ERR(0, 718, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":731
 *             self.cppFoamLib.set_time_step(&timeStep)
 * 
 *       def set_dirichlet_velocity_boundary_condition(self, vxBoundary, vyBoundary, vzBoundary, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Set Dirichlet velocity boundary conditions.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_67set_dirichlet_velocity_boundary_condition, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_set_dirichlet_veloc, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__74)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_set_dirichlet_velocity_boundary, __pyx_t_2) < 0) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":760
 *             self.cppFoamLib.set_dirichlet_velocity_boundary_condition(&velocityBC[0], patchName)
 * 
 *       def set_dirichlet_pressure_boundary_condition(self, pBoundary, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Set Dirichlet pressure boundary conditions.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_69set_dirichlet_pressure_boundary_condition, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_set_dirichlet_press, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__76)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_set_dirichlet_pressure_boundary, __pyx_t_2) < 0) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":778
 *             self.cppFoamLib.set_dirichlet_pressure_boundary_condition(&pressureBC[0], patchName)
 * 
 *       def set_neumann_pressure_boundary_condition(self, dpdxBoundary, dpdyBoundary, dpdzBoundary, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Set Neumann pressure boundary conditions.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_71set_neumann_pressure_boundary_condition, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_set_neumann_pressur, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__78)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_set_neumann_pressure_boundary_co, __pyx_t_2) < 0) __PYX_ERR(0, 778, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":811
 *       # ================================================= #
 * 
 *       def correct_mass_flux_python(self, faceVelocityX, faceVelocityY, faceVelocityZ, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Correct the mass flux at each face along the numerical boundary.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_73correct_mass_flux_python, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_correct_mass_flux_p, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__80)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_correct_mass_flux_python, __pyx_t_2) < 0) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":860
 * 
 * 
 *       def correct_normal_pressure_gradient(self, dpdx, dpdy, dpdz, patchName="numericalBoundary"):             # <<<<<<<<<<<<<<
 *             """
 *             Correct the normal pressure gradient at each face along the numerical boundary.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_75correct_normal_pressure_gradient, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_correct_normal_pres, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__82)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_correct_normal_pressure_gradient, __pyx_t_2) < 0) __PYX_ERR(0, 860, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":956
 * 
 * 
 *       def get_total_circulation(self):             # <<<<<<<<<<<<<<
 *             """
 *             Get the total circulation in the finite volume mesh region.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_77get_total_circulation, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_total_circulati, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__84)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_total_circulation, __pyx_t_2) < 0) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "foamSolverWrapper.pyx":971
 * 
 * 
 *       def get_mesh_centroid(self):             # <<<<<<<<<<<<<<
 *             """
 *             Calculate the centroid of the mesh.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_79get_mesh_centroid, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver_get_mesh_centroid, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__86)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver->tp_dict, __pyx_n_s_get_mesh_centroid, __pyx_t_2) < 0) __PYX_ERR(0, 971, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8openONDA_7solvers_3FVM_9fvmModule_pyFoamSolver);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_81__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver___reduce_cython, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__88)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8openONDA_7solvers_3FVM_9fvmModule_12pyFoamSolver_83__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pyFoamSolver___setstate_cython, NULL, __pyx_n_s_openONDA_solvers_FVM_fvmModule, __pyx_d, ((PyObject *)__pyx_codeobj__90)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "foamSolverWrapper.pyx":1
 * # ==================================================             # <<<<<<<<<<<<<<
 * # Module Imports and Declarations
 * # ==================================================
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "../../../../../../anaconda3/envs/openONDA/lib/python3.9/site-packages/numpy/__init__.pxd":1013
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init openONDA.solvers.FVM.fvmModule", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init openONDA.solvers.FVM.fvmModule");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case '?': return "'bool'";
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case '?': case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number, ndim;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    ndim = ctx->head->field->type->ndim;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case '?': case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if ((ctx->enc_type == *ts) && (got_Z == ctx->is_complex) &&
            (ctx->enc_packmode == ctx->new_packmode) && (!ctx->is_valid_array)) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* BufferGetAndValidate */
  static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (unlikely(info->buf == NULL)) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}
static void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static int __Pyx__GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  buf->buf = NULL;
  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
    __Pyx_ZeroBuffer(buf);
    return -1;
  }
  if (unlikely(buf->ndim != nd)) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if (unlikely((size_t)buf->itemsize != dtype->size)) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_SafeReleaseBuffer(buf);
  return -1;
}

/* BufferFallbackError */
  static void __Pyx_RaiseBufferFallbackError(void) {
  PyErr_SetString(PyExc_ValueError,
     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
}

/* BufferIndexError */
  static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

/* PyErrFetchRestore */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* PyFloatBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_AddObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double b = floatval;
    double a, result;
    (void)inplace;
    (void)zerodivision_check;
    if (likely(PyFloat_CheckExact(op1))) {
        a = PyFloat_AS_DOUBLE(op1);
        
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
        
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0; break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            default:
        #else
        {
        #endif
            a = PyLong_AsDouble(op1);
            if (unlikely(a == -1.0 && PyErr_Occurred())) return NULL;
            
        }
    } else {
        return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
    }
        
        PyFPE_START_PROTECT("add", return NULL)
        result = a + b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* Import */
    static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* PyIntCompare */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* py_abs */
    #if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *n) {
    if (likely(Py_SIZE(n) == -1)) {
        return PyLong_FromLong(((PyLongObject*)n)->ob_digit[0]);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    {
        PyObject *copy = _PyLong_Copy((PyLongObject*)n);
        if (likely(copy)) {
            __Pyx_SET_SIZE(copy, -Py_SIZE(copy));
        }
        return copy;
    }
#else
    return PyNumber_Negative(n);
#endif
}
#endif

/* PyObjectGetMethod */
    static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
    static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* append */
    static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* RaiseTooManyValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
    static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
    static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* RaiseException */
    #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* GetTopmostException */
    #if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
    #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
    #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObject_GenericGetAttrNoDict */
    #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
    #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
    static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
    static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
    #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* ImportFrom */
    static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* FetchCommonType */
    static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
    #include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
#if PY_MAJOR_VERSION < 3
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
#endif
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
    static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* CLineInTraceback */
    #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
    static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
    #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


    /* CIntFromPyVerify */
    #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Declarations */
    #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
    #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
    #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
    #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntFromPy */
    static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
    static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
    static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
    #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
    static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
    static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
